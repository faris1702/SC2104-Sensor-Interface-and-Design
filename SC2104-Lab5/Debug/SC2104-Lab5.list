
SC2104-Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b124  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001060  0800b2b8  0800b2b8  0001b2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c318  0800c318  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c318  0800c318  0001c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c320  0800c320  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c320  0800c320  0001c320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c324  0800c324  0001c324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00000908  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ac1  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ea  00000000  00000000  00034ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  000376d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  00038960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242f4  00000000  00000000  00039af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161e9  00000000  00000000  0005ddec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcddd  00000000  00000000  00073fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150db2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006188  00000000  00000000  00150e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b29c 	.word	0x0800b29c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800b29c 	.word	0x0800b29c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <IMU_Initialise>:

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(IMU_Data *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart)
{    // the uart is included in the parameter such that detailed message can be sent directly from within
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
     // the function here, instead of passing the information back to the main.c to send,  which can be messy.

	 char hex[2];
	 uint8_t uartbuf[20]="  IMU ID =      "; // buffer for data
 8000f58:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <IMU_Initialise+0x184>)
 8000f5a:	f107 0418 	add.w	r4, r7, #24
 8000f5e:	461d      	mov	r5, r3
 8000f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	7023      	strb	r3, [r4, #0]
 8000f68:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	801a      	strh	r2, [r3, #0]
 8000f70:	709a      	strb	r2, [r3, #2]
     uint8_t regData;

	 dev->i2cHandle = i2cHandle;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	601a      	str	r2, [r3, #0]
	 dev->uart = uart;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]

	  //check ID
	  ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000f7e:	2175      	movs	r1, #117	; 0x75
 8000f80:	f107 0317 	add.w	r3, r7, #23
 8000f84:	461a      	mov	r2, r3
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f000 f8d4 	bl	8001134 <IMU_ReadOneByte>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <IMU_Initialise+0x188>)
 8000f92:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000f94:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <IMU_Initialise+0x188>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d007      	beq.n	8000fac <IMU_Initialise+0x60>
	       strcpy((char*)uartbuf, "Error 2\r\n");
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <IMU_Initialise+0x18c>)
 8000fa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fa4:	c303      	stmia	r3!, {r0, r1}
 8000fa6:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e08c      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }
	  else{ // send ID read to Uart - for verififcation by user
		  sprintf(hex, "%x", regData); // change to hexidecimal
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb4:	4949      	ldr	r1, [pc, #292]	; (80010dc <IMU_Initialise+0x190>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 fc74 	bl	80088a4 <siprintf>
	      strcpy(uartbuf, hex); // copy back to buf
 8000fbc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f007 fc8c 	bl	80088e4 <strcpy>
	      uartbuf[12] = uartbuf[0]; // change to upper case
 8000fcc:	7e3b      	ldrb	r3, [r7, #24]
 8000fce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	      uartbuf[13] = uartbuf[1];
 8000fd2:	7e7b      	ldrb	r3, [r7, #25]
 8000fd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	      uartbuf[14] = '\r';
 8000fd8:	230d      	movs	r3, #13
 8000fda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	      uartbuf[15] = '\n';
 8000fde:	230a      	movs	r3, #10
 8000fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      uartbuf[16] = '\0';
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	      uartbuf[0]  = '\r';
 8000fea:	230d      	movs	r3, #13
 8000fec:	763b      	strb	r3, [r7, #24]
	      uartbuf[1]  = '\n';
 8000fee:	230a      	movs	r3, #10
 8000ff0:	767b      	strb	r3, [r7, #25]
	      uartbuf[2]  = 'I';
 8000ff2:	2349      	movs	r3, #73	; 0x49
 8000ff4:	76bb      	strb	r3, [r7, #26]
		  // for debuggiing - send to uart and return to main to display on OLED and UART
	      HAL_UART_Transmit(dev->uart, uartbuf, strlen((char*)uartbuf), HAL_MAX_DELAY);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	685c      	ldr	r4, [r3, #4]
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f8e6 	bl	80001d0 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	f107 0118 	add.w	r1, r7, #24
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	4620      	mov	r0, r4
 8001012:	f005 ffe4 	bl	8006fde <HAL_UART_Transmit>
	      }


	  // Initialize

      ret = IMU_WriteOneByte(dev, 0x1A,  0x05); //set lowpass filter
 8001016:	2205      	movs	r2, #5
 8001018:	211a      	movs	r1, #26
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 f866 	bl	80010ec <IMU_WriteOneByte>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <IMU_Initialise+0x188>)
 8001026:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <IMU_Initialise+0x188>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <IMU_Initialise+0xf4>
	       strcpy((char*)uartbuf, "Error 1\r\n");
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <IMU_Initialise+0x194>)
 8001036:	ca07      	ldmia	r2, {r0, r1, r2}
 8001038:	c303      	stmia	r3!, {r0, r1}
 800103a:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 800103c:	2300      	movs	r3, #0
 800103e:	e042      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }

      ret = IMU_WriteOneByte(dev, 0x1B,  0x08); // gyro senstitivity scales
 8001040:	2208      	movs	r2, #8
 8001042:	211b      	movs	r1, #27
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f851 	bl	80010ec <IMU_WriteOneByte>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <IMU_Initialise+0x188>)
 8001050:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <IMU_Initialise+0x188>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <IMU_Initialise+0x11e>
	       strcpy((char*)uartbuf, "Error 2\r\n");
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <IMU_Initialise+0x18c>)
 8001060:	ca07      	ldmia	r2, {r0, r1, r2}
 8001062:	c303      	stmia	r3!, {r0, r1}
 8001064:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001066:	2300      	movs	r3, #0
 8001068:	e02d      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }

      ret = IMU_WriteOneByte(dev, 0x1C,  0x00); // Accelerator max scale +/- 2g
 800106a:	2200      	movs	r2, #0
 800106c:	211c      	movs	r1, #28
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f83c 	bl	80010ec <IMU_WriteOneByte>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <IMU_Initialise+0x188>)
 800107a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <IMU_Initialise+0x188>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <IMU_Initialise+0x148>
	       strcpy((char*)uartbuf, "Error 3\r\n");
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <IMU_Initialise+0x198>)
 800108a:	ca07      	ldmia	r2, {r0, r1, r2}
 800108c:	c303      	stmia	r3!, {r0, r1}
 800108e:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001090:	2300      	movs	r3, #0
 8001092:	e018      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }

      ret = IMU_WriteOneByte(dev, 0x6B, 0x00);  //Turn on power to IMU
 8001094:	2200      	movs	r2, #0
 8001096:	216b      	movs	r1, #107	; 0x6b
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 f827 	bl	80010ec <IMU_WriteOneByte>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <IMU_Initialise+0x188>)
 80010a4:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <IMU_Initialise+0x188>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <IMU_Initialise+0x172>
	       strcpy((char*)uartbuf, "Error 4\r\n");
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <IMU_Initialise+0x19c>)
 80010b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b6:	c303      	stmia	r3!, {r0, r1}
 80010b8:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 80010ba:	2300      	movs	r3, #0
 80010bc:	e003      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }

      HAL_Delay(10);
 80010be:	200a      	movs	r0, #10
 80010c0:	f002 fbe2 	bl	8003888 <HAL_Delay>

      // everthing OK
      return 0; // 0 means 0 error
 80010c4:	2300      	movs	r3, #0

}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3730      	adds	r7, #48	; 0x30
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bdb0      	pop	{r4, r5, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0800b2ec 	.word	0x0800b2ec
 80010d4:	20000214 	.word	0x20000214
 80010d8:	0800b2b8 	.word	0x0800b2b8
 80010dc:	0800b2c4 	.word	0x0800b2c4
 80010e0:	0800b2c8 	.word	0x0800b2c8
 80010e4:	0800b2d4 	.word	0x0800b2d4
 80010e8:	0800b2e0 	.word	0x0800b2e0

080010ec <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(IMU_Data *dev, uint8_t reg, uint8_t data)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	70bb      	strb	r3, [r7, #2]
	 uint8_t regData = data;
 80010fc:	78bb      	ldrb	r3, [r7, #2]
 80010fe:	73fb      	strb	r3, [r7, #15]
	 return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <IMU_WriteOneByte+0x44>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b299      	uxth	r1, r3
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	b29a      	uxth	r2, r3
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	f107 030f 	add.w	r3, r7, #15
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	f003 fb08 	bl	8004734 <HAL_I2C_Mem_Write>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000

08001134 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(IMU_Data *dev, uint8_t reg, uint8_t *data)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af04      	add	r7, sp, #16
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	460b      	mov	r3, r1
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	72fb      	strb	r3, [r7, #11]
	ret=HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <IMU_ReadOneByte+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b299      	uxth	r1, r3
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	b29a      	uxth	r2, r3
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2301      	movs	r3, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	f003 fbe2 	bl	8004928 <HAL_I2C_Mem_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <IMU_ReadOneByte+0x48>)
 800116a:	701a      	strb	r2, [r3, #0]
	return ret;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <IMU_ReadOneByte+0x48>)
 800116e:	781b      	ldrb	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000214 	.word	0x20000214

08001180 <IMU_AccelRead>:


HAL_StatusTypeDef IMU_AccelRead(IMU_Data *dev)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    uint8_t u8Buf[2] = {0}; // reset to zero
 8001188:	2300      	movs	r3, #0
 800118a:	83bb      	strh	r3, [r7, #28]
    int16_t accRaw[3] = {0};  // reset to zero
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	809a      	strh	r2, [r3, #4]

    ret=IMU_ReadOneByte(dev, 0x3c, &u8Buf[0]); // low byte of X
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	461a      	mov	r2, r3
 800119c:	213c      	movs	r1, #60	; 0x3c
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffc8 	bl	8001134 <IMU_ReadOneByte>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b55      	ldr	r3, [pc, #340]	; (8001300 <IMU_AccelRead+0x180>)
 80011aa:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x3b, &u8Buf[1]); // high byte
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	3301      	adds	r3, #1
 80011b2:	461a      	mov	r2, r3
 80011b4:	213b      	movs	r1, #59	; 0x3b
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffbc 	bl	8001134 <IMU_ReadOneByte>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <IMU_AccelRead+0x180>)
 80011c2:	701a      	strb	r2, [r3, #0]
    accRaw[0] =	(u8Buf[1]<<8)|u8Buf[0];
 80011c4:	7f7b      	ldrb	r3, [r7, #29]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7f3b      	ldrb	r3, [r7, #28]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	82bb      	strh	r3, [r7, #20]


    ret=IMU_ReadOneByte(dev, 0x3e, &u8Buf[0]); // Low byte of Y
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	461a      	mov	r2, r3
 80011da:	213e      	movs	r1, #62	; 0x3e
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ffa9 	bl	8001134 <IMU_ReadOneByte>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b46      	ldr	r3, [pc, #280]	; (8001300 <IMU_AccelRead+0x180>)
 80011e8:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x3d, &u8Buf[1]);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	3301      	adds	r3, #1
 80011f0:	461a      	mov	r2, r3
 80011f2:	213d      	movs	r1, #61	; 0x3d
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff9d 	bl	8001134 <IMU_ReadOneByte>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b40      	ldr	r3, [pc, #256]	; (8001300 <IMU_AccelRead+0x180>)
 8001200:	701a      	strb	r2, [r3, #0]
    accRaw[1] =	(u8Buf[1]<<8)|u8Buf[0];
 8001202:	7f7b      	ldrb	r3, [r7, #29]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	7f3b      	ldrb	r3, [r7, #28]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	82fb      	strh	r3, [r7, #22]


    ret=IMU_ReadOneByte(dev, 0x40, &u8Buf[0]); // low byte of Z
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	461a      	mov	r2, r3
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff8a 	bl	8001134 <IMU_ReadOneByte>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <IMU_AccelRead+0x180>)
 8001226:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x3f, &u8Buf[1]);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	3301      	adds	r3, #1
 800122e:	461a      	mov	r2, r3
 8001230:	213f      	movs	r1, #63	; 0x3f
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff7e 	bl	8001134 <IMU_ReadOneByte>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <IMU_AccelRead+0x180>)
 800123e:	701a      	strb	r2, [r3, #0]
    accRaw[2] =	(u8Buf[1]<<8)|u8Buf[0];
 8001240:	7f7b      	ldrb	r3, [r7, #29]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	7f3b      	ldrb	r3, [r7, #28]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	833b      	strh	r3, [r7, #24]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ( (accRaw[0] & 0x00008000) == 0x00008000 )
 8001250:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	da07      	bge.n	8001268 <IMU_AccelRead+0xe8>
		accRawSigned[0] = accRaw[0] | 0xFFFF0000;
 8001258:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800125c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8001260:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	e002      	b.n	800126e <IMU_AccelRead+0xee>
	else
		accRawSigned[0] = accRaw[0];
 8001268:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800126c:	60bb      	str	r3, [r7, #8]

	if ( (accRaw[1] & 0x00008000) == 0x00008000 )
 800126e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da07      	bge.n	8001286 <IMU_AccelRead+0x106>
		accRawSigned[1] = accRaw[1] | 0xFFFF0000;
 8001276:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800127a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800127e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	e002      	b.n	800128c <IMU_AccelRead+0x10c>
	else
		accRawSigned[1] = accRaw[1];
 8001286:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800128a:	60fb      	str	r3, [r7, #12]

	if ( (accRaw[2] & 0x00008000) == 0x00008000 )
 800128c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da07      	bge.n	80012a4 <IMU_AccelRead+0x124>
		accRawSigned[2] = accRaw[2] | 0xFFFF0000;
 8001294:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001298:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800129c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	e002      	b.n	80012aa <IMU_AccelRead+0x12a>
	else
		accRawSigned[2] = accRaw[2];
 80012a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012a8:	613b      	str	r3, [r7, #16]


	// accelerometer full scale set to +/-2g, divide by sensitivity scale factor = 16384 LSB/g (see page 29, Registers 59-64)
	dev->acc[0] = 9.81f * 0.00006103515625f * accRawSigned[0];
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001304 <IMU_AccelRead+0x184>
 80012b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc[1] = 9.81f * 0.00006103515625f * accRawSigned[1];
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012cc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001304 <IMU_AccelRead+0x184>
 80012d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edc3 7a03 	vstr	s15, [r3, #12]
	dev->acc[2] = 9.81f * 0.00006103515625f * accRawSigned[2];
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001304 <IMU_AccelRead+0x184>
 80012e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edc3 7a04 	vstr	s15, [r3, #16]

	return ret;
 80012f2:	4b03      	ldr	r3, [pc, #12]	; (8001300 <IMU_AccelRead+0x180>)
 80012f4:	781b      	ldrb	r3, [r3, #0]

}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000214 	.word	0x20000214
 8001304:	3a1cf5c3 	.word	0x3a1cf5c3

08001308 <IMU_GyroRead>:
	return ret;
}


HAL_StatusTypeDef IMU_GyroRead(IMU_Data *dev)
{   // return the change in value instead of current value
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    uint8_t u8Buf[2] = {0}; // reset to zero
 8001310:	2300      	movs	r3, #0
 8001312:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t gyroRaw[3] = {0};  // reset to zero
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	809a      	strh	r2, [r3, #4]
    int16_t gyroDiff[3];
    int16_t temp;
    static int16_t gyroOld[3]= {0, 0, 0};  // previous value

    ret=IMU_ReadOneByte(dev, 0x44, &u8Buf[0]); // gyro X lower byte
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	461a      	mov	r2, r3
 8001324:	2144      	movs	r1, #68	; 0x44
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff04 	bl	8001134 <IMU_ReadOneByte>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b77      	ldr	r3, [pc, #476]	; (8001510 <IMU_GyroRead+0x208>)
 8001332:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x43, &u8Buf[1]); // upper byte
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	3301      	adds	r3, #1
 800133a:	461a      	mov	r2, r3
 800133c:	2143      	movs	r1, #67	; 0x43
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fef8 	bl	8001134 <IMU_ReadOneByte>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b71      	ldr	r3, [pc, #452]	; (8001510 <IMU_GyroRead+0x208>)
 800134a:	701a      	strb	r2, [r3, #0]
    temp = (u8Buf[1]<<8)|u8Buf[0]; // for debugging
 800134c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	84fb      	strh	r3, [r7, #38]	; 0x26
    gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] - gyro_offset[0];
 800135e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800136a:	b299      	uxth	r1, r3
 800136c:	4b69      	ldr	r3, [pc, #420]	; (8001514 <IMU_GyroRead+0x20c>)
 800136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001372:	b29b      	uxth	r3, r3
 8001374:	1acb      	subs	r3, r1, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	83bb      	strh	r3, [r7, #28]
    gyroDiff[0] = gyroRaw[0] - gyroOld[0];  // change in value
 8001380:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b64      	ldr	r3, [pc, #400]	; (8001518 <IMU_GyroRead+0x210>)
 8001388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138c:	b29b      	uxth	r3, r3
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	b29b      	uxth	r3, r3
 8001392:	b21b      	sxth	r3, r3
 8001394:	82bb      	strh	r3, [r7, #20]
    gyroOld[0] = gyroRaw[0];
 8001396:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <IMU_GyroRead+0x210>)
 800139c:	801a      	strh	r2, [r3, #0]

    ret=IMU_ReadOneByte(dev, 0x46, &u8Buf[0]);  // Gyro Y lower byte
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	461a      	mov	r2, r3
 80013a4:	2146      	movs	r1, #70	; 0x46
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fec4 	bl	8001134 <IMU_ReadOneByte>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b57      	ldr	r3, [pc, #348]	; (8001510 <IMU_GyroRead+0x208>)
 80013b2:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x45, &u8Buf[1]);  // upper byte
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	3301      	adds	r3, #1
 80013ba:	461a      	mov	r2, r3
 80013bc:	2145      	movs	r1, #69	; 0x45
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff feb8 	bl	8001134 <IMU_ReadOneByte>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b51      	ldr	r3, [pc, #324]	; (8001510 <IMU_GyroRead+0x208>)
 80013ca:	701a      	strb	r2, [r3, #0]
    gyroRaw[1] = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[1];
 80013cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013d8:	b299      	uxth	r1, r3
 80013da:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <IMU_GyroRead+0x20c>)
 80013dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	1acb      	subs	r3, r1, r3
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	83fb      	strh	r3, [r7, #30]
    gyroDiff[1] = gyroRaw[1] - gyroOld[1];  // change in value
 80013ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b48      	ldr	r3, [pc, #288]	; (8001518 <IMU_GyroRead+0x210>)
 80013f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b21b      	sxth	r3, r3
 8001402:	82fb      	strh	r3, [r7, #22]
    gyroOld[1] = gyroRaw[1];
 8001404:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <IMU_GyroRead+0x210>)
 800140a:	805a      	strh	r2, [r3, #2]

    ret=IMU_ReadOneByte(dev, 0x48, &u8Buf[0]);  // Gyro Z lower byte
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	461a      	mov	r2, r3
 8001412:	2148      	movs	r1, #72	; 0x48
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fe8d 	bl	8001134 <IMU_ReadOneByte>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <IMU_GyroRead+0x208>)
 8001420:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x47, &u8Buf[1]); // upper byte
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	3301      	adds	r3, #1
 8001428:	461a      	mov	r2, r3
 800142a:	2147      	movs	r1, #71	; 0x47
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fe81 	bl	8001134 <IMU_ReadOneByte>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b36      	ldr	r3, [pc, #216]	; (8001510 <IMU_GyroRead+0x208>)
 8001438:	701a      	strb	r2, [r3, #0]
    gyroRaw[2] = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[2];
 800143a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001446:	b299      	uxth	r1, r3
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <IMU_GyroRead+0x20c>)
 800144a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800144e:	b29b      	uxth	r3, r3
 8001450:	1acb      	subs	r3, r1, r3
 8001452:	b29b      	uxth	r3, r3
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21b      	sxth	r3, r3
 800145a:	843b      	strh	r3, [r7, #32]
    gyroDiff[2] = gyroRaw[2] - gyroOld[2];  // change in value
 800145c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <IMU_GyroRead+0x210>)
 8001464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001468:	b29b      	uxth	r3, r3
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	b21b      	sxth	r3, r3
 8001470:	833b      	strh	r3, [r7, #24]
    gyroOld[2] = gyroRaw[2];
 8001472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <IMU_GyroRead+0x210>)
 8001478:	809a      	strh	r2, [r3, #4]

	/* extend to 32 bit SIGNED integers (two's complement)*/
    int32_t gyroRawSigned[3];


	if ( (gyroRaw[0] & 0x00008000) == 0x00008000 )  //change to 32 bit
 800147a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	da07      	bge.n	8001492 <IMU_GyroRead+0x18a>
		gyroRawSigned[0] = gyroRaw[0] | 0xFFFF0000;
 8001482:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001486:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800148a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	e002      	b.n	8001498 <IMU_GyroRead+0x190>
	else
		gyroRawSigned[0] = gyroRaw[0];
 8001492:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001496:	60bb      	str	r3, [r7, #8]

	if ( (gyroRaw[1] & 0x00008000) == 0x00008000 )
 8001498:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800149c:	2b00      	cmp	r3, #0
 800149e:	da07      	bge.n	80014b0 <IMU_GyroRead+0x1a8>
		gyroRawSigned[1] = gyroRaw[1] | 0xFFFF0000;
 80014a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014a4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80014a8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	e002      	b.n	80014b6 <IMU_GyroRead+0x1ae>
	else
		gyroRawSigned[1] = gyroRaw[1];
 80014b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014b4:	60fb      	str	r3, [r7, #12]

	if ( (gyroRaw[2] & 0x00008000) == 0x800008000 )
		gyroRawSigned[2] = gyroRaw[2] | 0xFFFF0000;
	else
		gyroRawSigned[2] = gyroRaw[2];
 80014b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014ba:	613b      	str	r3, [r7, #16]


	// gyro full scale set to +/-500 dps, divide by sensitivity scale factor = 65.5 LSB/dps (see pg 31, Registers 67-72)
	// degree per second = value/65.5
	dev->gyro[0] = 0.0152671755725191f * gyroRawSigned[0];
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800151c <IMU_GyroRead+0x214>
 80014ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[1] = 0.0152671755725191f * gyroRawSigned[1];
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014de:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800151c <IMU_GyroRead+0x214>
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	edc3 7a06 	vstr	s15, [r3, #24]
	dev->gyro[2] = 0.0152671755725191f * gyroRawSigned[2];
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800151c <IMU_GyroRead+0x214>
 80014fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edc3 7a07 	vstr	s15, [r3, #28]

	return ret;
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <IMU_GyroRead+0x208>)
 8001506:	781b      	ldrb	r3, [r3, #0]

}
 8001508:	4618      	mov	r0, r3
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000214 	.word	0x20000214
 8001514:	20000218 	.word	0x20000218
 8001518:	20000220 	.word	0x20000220
 800151c:	3c7a232d 	.word	0x3c7a232d

08001520 <OLED_disp_msg1>:
int32_t roll_servo_target = 150;

//***************************************************************************************

void OLED_disp_msg1()
{ // show starting messsage
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
  char *buf; // buffer to store value to be display on OLED/SerialPort
  OLED_Init();
 8001526:	f001 fc7b 	bl	8002e20 <OLED_Init>
  OLED_ShowString(10, 5, "SC2104/CE3002"); // show message on OLED display at line 5)
 800152a:	4a16      	ldr	r2, [pc, #88]	; (8001584 <OLED_disp_msg1+0x64>)
 800152c:	2105      	movs	r1, #5
 800152e:	200a      	movs	r0, #10
 8001530:	f001 fc44 	bl	8002dbc <OLED_ShowString>
  buf = "Lab 5"; // another way to show message through buffer
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <OLED_disp_msg1+0x68>)
 8001536:	607b      	str	r3, [r7, #4]
  OLED_ShowString(10,30, buf); //another message at line 30
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	211e      	movs	r1, #30
 800153c:	200a      	movs	r0, #10
 800153e:	f001 fc3d 	bl	8002dbc <OLED_ShowString>
  buf = "IMU + PID"; // anther way to show message through buffer
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <OLED_disp_msg1+0x6c>)
 8001544:	607b      	str	r3, [r7, #4]
  OLED_ShowString(10,50, buf); //another message at line 50
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	2132      	movs	r1, #50	; 0x32
 800154a:	200a      	movs	r0, #10
 800154c:	f001 fc36 	bl	8002dbc <OLED_ShowString>
  OLED_Refresh_Gram();
 8001550:	f001 fb0a 	bl	8002b68 <OLED_Refresh_Gram>
  HAL_Delay(2000); // pause for 2 second to show message
 8001554:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001558:	f002 f996 	bl	8003888 <HAL_Delay>

  // send a message to serial port - for testing
  buf = "SC2104\n\r";
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <OLED_disp_msg1+0x70>)
 800155e:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, buf, 8, HAL_MAX_DELAY); // Send through Serial Port @115200
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	2208      	movs	r2, #8
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	480a      	ldr	r0, [pc, #40]	; (8001594 <OLED_disp_msg1+0x74>)
 800156a:	f005 fd38 	bl	8006fde <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, buf, 8, HAL_MAX_DELAY); // Send through BT Serial Port @9600
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	2208      	movs	r2, #8
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <OLED_disp_msg1+0x78>)
 8001578:	f005 fd31 	bl	8006fde <HAL_UART_Transmit>
  }
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	0800b300 	.word	0x0800b300
 8001588:	0800b310 	.word	0x0800b310
 800158c:	0800b318 	.word	0x0800b318
 8001590:	0800b324 	.word	0x0800b324
 8001594:	200004b8 	.word	0x200004b8
 8001598:	20000474 	.word	0x20000474

0800159c <OLED_disp_msg2>:

void OLED_disp_msg2()
{ // showing messages while adjusting the platform
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  OLED_Clear();
 80015a2:	f001 fb19 	bl	8002bd8 <OLED_Clear>
  OLED_ShowString(30, 20, "Testing"); // show message on OLED display at line 20)
 80015a6:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <OLED_disp_msg2+0x108>)
 80015a8:	2114      	movs	r1, #20
 80015aa:	201e      	movs	r0, #30
 80015ac:	f001 fc06 	bl	8002dbc <OLED_ShowString>
  OLED_ShowString(10, 30, " Server motors"); // show message on OLED display at line 40)
 80015b0:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <OLED_disp_msg2+0x10c>)
 80015b2:	211e      	movs	r1, #30
 80015b4:	200a      	movs	r0, #10
 80015b6:	f001 fc01 	bl	8002dbc <OLED_ShowString>
  OLED_Refresh_Gram();
 80015ba:	f001 fad5 	bl	8002b68 <OLED_Refresh_Gram>
  Server_Motor12(); // testing servermotor 1 and 2
 80015be:	f000 f95b 	bl	8001878 <Server_Motor12>

  // show starting message
  OLED_Clear();
 80015c2:	f001 fb09 	bl	8002bd8 <OLED_Clear>
  OLED_ShowString(0, 0,  "Adjust Platform"); // show message on OLED display at line 30)
 80015c6:	4a39      	ldr	r2, [pc, #228]	; (80016ac <OLED_disp_msg2+0x110>)
 80015c8:	2100      	movs	r1, #0
 80015ca:	2000      	movs	r0, #0
 80015cc:	f001 fbf6 	bl	8002dbc <OLED_ShowString>
  OLED_ShowString(0, 10, "    for"); // show message on OLED display at line 40)
 80015d0:	4a37      	ldr	r2, [pc, #220]	; (80016b0 <OLED_disp_msg2+0x114>)
 80015d2:	210a      	movs	r1, #10
 80015d4:	2000      	movs	r0, #0
 80015d6:	f001 fbf1 	bl	8002dbc <OLED_ShowString>
  OLED_ShowString(0, 20, "level setting"); // show message on OLED display at line 40)
 80015da:	4a36      	ldr	r2, [pc, #216]	; (80016b4 <OLED_disp_msg2+0x118>)
 80015dc:	2114      	movs	r1, #20
 80015de:	2000      	movs	r0, #0
 80015e0:	f001 fbec 	bl	8002dbc <OLED_ShowString>
  //OLED_ShowString(0, 30, "  setting"); // show message on OLED display at line 40)
  OLED_Refresh_Gram();
 80015e4:	f001 fac0 	bl	8002b68 <OLED_Refresh_Gram>
  HAL_Delay(1000); // pause for 2 second to show message
 80015e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ec:	f002 f94c 	bl	8003888 <HAL_Delay>
  millisOld = HAL_GetTick(); // get first time value before starting - for Gyro dt compuattaion
 80015f0:	f002 f93e 	bl	8003870 <HAL_GetTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4a30      	ldr	r2, [pc, #192]	; (80016b8 <OLED_disp_msg2+0x11c>)
 80015f8:	6013      	str	r3, [r2, #0]
  for (int j = 0; j < 200; j++){
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	e029      	b.n	8001654 <OLED_disp_msg2+0xb8>
	  get_angles();
 8001600:	f000 fa9a 	bl	8001b38 <get_angles>
	  // show Pitch_acc and Roll_acc on OLED
	  sprintf(temp[9], "P:%4.1f ", pitch_acc);
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <OLED_disp_msg2+0x120>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	492b      	ldr	r1, [pc, #172]	; (80016c0 <OLED_disp_msg2+0x124>)
 8001614:	482b      	ldr	r0, [pc, #172]	; (80016c4 <OLED_disp_msg2+0x128>)
 8001616:	f007 f945 	bl	80088a4 <siprintf>
	  OLED_ShowString(0, 40, &temp[9]);  // show on OLED
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <OLED_disp_msg2+0x128>)
 800161c:	2128      	movs	r1, #40	; 0x28
 800161e:	2000      	movs	r0, #0
 8001620:	f001 fbcc 	bl	8002dbc <OLED_ShowString>
	  sprintf(temp[9], "R:%4.1f", roll_acc); //
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <OLED_disp_msg2+0x12c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff8d 	bl	8000548 <__aeabi_f2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4926      	ldr	r1, [pc, #152]	; (80016cc <OLED_disp_msg2+0x130>)
 8001634:	4823      	ldr	r0, [pc, #140]	; (80016c4 <OLED_disp_msg2+0x128>)
 8001636:	f007 f935 	bl	80088a4 <siprintf>
	  OLED_ShowString(70, 40, &temp[9]); // shown on OLED
 800163a:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <OLED_disp_msg2+0x128>)
 800163c:	2128      	movs	r1, #40	; 0x28
 800163e:	2046      	movs	r0, #70	; 0x46
 8001640:	f001 fbbc 	bl	8002dbc <OLED_ShowString>
	  OLED_Refresh_Gram();
 8001644:	f001 fa90 	bl	8002b68 <OLED_Refresh_Gram>
	  HAL_Delay(10); // pause for 0.01 second
 8001648:	200a      	movs	r0, #10
 800164a:	f002 f91d 	bl	8003888 <HAL_Delay>
  for (int j = 0; j < 200; j++){
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3301      	adds	r3, #1
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2bc7      	cmp	r3, #199	; 0xc7
 8001658:	ddd2      	ble.n	8001600 <OLED_disp_msg2+0x64>
      }


  OLED_Clear();
 800165a:	f001 fabd 	bl	8002bd8 <OLED_Clear>
  OLED_ShowString(0, 10, "Targets setting"); // show message on OLED display at line 40)
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <OLED_disp_msg2+0x134>)
 8001660:	210a      	movs	r1, #10
 8001662:	2000      	movs	r0, #0
 8001664:	f001 fbaa 	bl	8002dbc <OLED_ShowString>
  OLED_ShowString(0, 20, "  procedure"); // show message on OLED display at line 40)
 8001668:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <OLED_disp_msg2+0x138>)
 800166a:	2114      	movs	r1, #20
 800166c:	2000      	movs	r0, #0
 800166e:	f001 fba5 	bl	8002dbc <OLED_ShowString>
  OLED_ShowString(0, 35, "   starts"); // show message on OLED display at line 40)
 8001672:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <OLED_disp_msg2+0x13c>)
 8001674:	2123      	movs	r1, #35	; 0x23
 8001676:	2000      	movs	r0, #0
 8001678:	f001 fba0 	bl	8002dbc <OLED_ShowString>
  OLED_ShowString(0, 50, "..Keep still.."); // show message on OLED display at line 40)
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <OLED_disp_msg2+0x140>)
 800167e:	2132      	movs	r1, #50	; 0x32
 8001680:	2000      	movs	r0, #0
 8001682:	f001 fb9b 	bl	8002dbc <OLED_ShowString>
  OLED_Refresh_Gram();
 8001686:	f001 fa6f 	bl	8002b68 <OLED_Refresh_Gram>


  set_targets(); //set the target  angles for the balance platform
 800168a:	f000 f9bd 	bl	8001a08 <set_targets>
  HAL_Delay(2000); // pause for 2 second to show message
 800168e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001692:	f002 f8f9 	bl	8003888 <HAL_Delay>
  OLED_Clear();
 8001696:	f001 fa9f 	bl	8002bd8 <OLED_Clear>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	0800b330 	.word	0x0800b330
 80016a8:	0800b338 	.word	0x0800b338
 80016ac:	0800b348 	.word	0x0800b348
 80016b0:	0800b358 	.word	0x0800b358
 80016b4:	0800b360 	.word	0x0800b360
 80016b8:	2000066c 	.word	0x2000066c
 80016bc:	20000520 	.word	0x20000520
 80016c0:	0800b370 	.word	0x0800b370
 80016c4:	20000662 	.word	0x20000662
 80016c8:	20000524 	.word	0x20000524
 80016cc:	0800b37c 	.word	0x0800b37c
 80016d0:	0800b384 	.word	0x0800b384
 80016d4:	0800b394 	.word	0x0800b394
 80016d8:	0800b3a0 	.word	0x0800b3a0
 80016dc:	0800b3ac 	.word	0x0800b3ac

080016e0 <OLED_disp_msg3>:

float pitch_target, roll_target;  // target angles values for platform

void OLED_disp_msg3()
{  	// show Pitch_acc and Roll_acc on OLED
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  	sprintf(temp[9], "P:%4.1f ", pitch_acc);
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <OLED_disp_msg3+0xac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4927      	ldr	r1, [pc, #156]	; (8001790 <OLED_disp_msg3+0xb0>)
 80016f4:	4827      	ldr	r0, [pc, #156]	; (8001794 <OLED_disp_msg3+0xb4>)
 80016f6:	f007 f8d5 	bl	80088a4 <siprintf>
  	OLED_ShowString(0, 40, &temp[9]);  // show on OLED
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <OLED_disp_msg3+0xb4>)
 80016fc:	2128      	movs	r1, #40	; 0x28
 80016fe:	2000      	movs	r0, #0
 8001700:	f001 fb5c 	bl	8002dbc <OLED_ShowString>
	sprintf(temp[9], "R:%4.1f", roll_acc); //
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <OLED_disp_msg3+0xb8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff1d 	bl	8000548 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4922      	ldr	r1, [pc, #136]	; (800179c <OLED_disp_msg3+0xbc>)
 8001714:	481f      	ldr	r0, [pc, #124]	; (8001794 <OLED_disp_msg3+0xb4>)
 8001716:	f007 f8c5 	bl	80088a4 <siprintf>
  	OLED_ShowString(70, 40, &temp[9]); // shown on OLED
 800171a:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <OLED_disp_msg3+0xb4>)
 800171c:	2128      	movs	r1, #40	; 0x28
 800171e:	2046      	movs	r0, #70	; 0x46
 8001720:	f001 fb4c 	bl	8002dbc <OLED_ShowString>

  	sprintf(temp[9], "T:%4.1f ", pitch_target);
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <OLED_disp_msg3+0xc0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff0d 	bl	8000548 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	491c      	ldr	r1, [pc, #112]	; (80017a4 <OLED_disp_msg3+0xc4>)
 8001734:	4817      	ldr	r0, [pc, #92]	; (8001794 <OLED_disp_msg3+0xb4>)
 8001736:	f007 f8b5 	bl	80088a4 <siprintf>
  	OLED_ShowString(0, 50, &temp[9]);  // show on OLED
 800173a:	4a16      	ldr	r2, [pc, #88]	; (8001794 <OLED_disp_msg3+0xb4>)
 800173c:	2132      	movs	r1, #50	; 0x32
 800173e:	2000      	movs	r0, #0
 8001740:	f001 fb3c 	bl	8002dbc <OLED_ShowString>
	sprintf(temp[9], "T:%4.1f", roll_target); //
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <OLED_disp_msg3+0xc8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fefd 	bl	8000548 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4916      	ldr	r1, [pc, #88]	; (80017ac <OLED_disp_msg3+0xcc>)
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <OLED_disp_msg3+0xb4>)
 8001756:	f007 f8a5 	bl	80088a4 <siprintf>
  	OLED_ShowString(70, 50, &temp[9]); // shown on OLED
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <OLED_disp_msg3+0xb4>)
 800175c:	2132      	movs	r1, #50	; 0x32
 800175e:	2046      	movs	r0, #70	; 0x46
 8001760:	f001 fb2c 	bl	8002dbc <OLED_ShowString>

 	sprintf(temp[9], "dt: %5.3f", dt);  // cycle time
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <OLED_disp_msg3+0xd0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe feed 	bl	8000548 <__aeabi_f2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4910      	ldr	r1, [pc, #64]	; (80017b4 <OLED_disp_msg3+0xd4>)
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <OLED_disp_msg3+0xb4>)
 8001776:	f007 f895 	bl	80088a4 <siprintf>
  	OLED_ShowString(0, 0, &temp[9]); // shown on OLED
 800177a:	4a06      	ldr	r2, [pc, #24]	; (8001794 <OLED_disp_msg3+0xb4>)
 800177c:	2100      	movs	r1, #0
 800177e:	2000      	movs	r0, #0
 8001780:	f001 fb1c 	bl	8002dbc <OLED_ShowString>

  	OLED_Refresh_Gram(); // refresh OLED display
 8001784:	f001 f9f0 	bl	8002b68 <OLED_Refresh_Gram>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000520 	.word	0x20000520
 8001790:	0800b370 	.word	0x0800b370
 8001794:	20000662 	.word	0x20000662
 8001798:	20000524 	.word	0x20000524
 800179c:	0800b37c 	.word	0x0800b37c
 80017a0:	20000678 	.word	0x20000678
 80017a4:	0800b3bc 	.word	0x0800b3bc
 80017a8:	2000067c 	.word	0x2000067c
 80017ac:	0800b3c8 	.word	0x0800b3c8
 80017b0:	20000674 	.word	0x20000674
 80017b4:	0800b3d0 	.word	0x0800b3d0

080017b8 <Serial_tx>:


//***************************************************************************************

void Serial_tx(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  	// send Platform  roll and pitch angles as roll and pitch targets to USB serial port
  	sprintf(sbuf[0], "%7.2f,", roll_KF); //
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <Serial_tx+0x94>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fec0 	bl	8000548 <__aeabi_f2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4920      	ldr	r1, [pc, #128]	; (8001850 <Serial_tx+0x98>)
 80017ce:	4821      	ldr	r0, [pc, #132]	; (8001854 <Serial_tx+0x9c>)
 80017d0:	f007 f868 	bl	80088a4 <siprintf>
   	sprintf(sbuf[1], "%7.2f,", roll_target);
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <Serial_tx+0xa0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe feb5 	bl	8000548 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	491b      	ldr	r1, [pc, #108]	; (8001850 <Serial_tx+0x98>)
 80017e4:	481d      	ldr	r0, [pc, #116]	; (800185c <Serial_tx+0xa4>)
 80017e6:	f007 f85d 	bl	80088a4 <siprintf>
  	sprintf(sbuf[2], "%7.2f,", pitch_KF); //
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <Serial_tx+0xa8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe feaa 	bl	8000548 <__aeabi_f2d>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4915      	ldr	r1, [pc, #84]	; (8001850 <Serial_tx+0x98>)
 80017fa:	481a      	ldr	r0, [pc, #104]	; (8001864 <Serial_tx+0xac>)
 80017fc:	f007 f852 	bl	80088a4 <siprintf>
  	sprintf(sbuf[3], "%7.2f\n\r", pitch_target); //yaw_gyro
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <Serial_tx+0xb0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe9f 	bl	8000548 <__aeabi_f2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4917      	ldr	r1, [pc, #92]	; (800186c <Serial_tx+0xb4>)
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <Serial_tx+0xb8>)
 8001812:	f007 f847 	bl	80088a4 <siprintf>
  	for (int i=0; i<4; i++)// send the values to serial port: channel 15 to 17 on SerialPort
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	e00f      	b.n	800183c <Serial_tx+0x84>
  	 	HAL_UART_Transmit(&huart3, sbuf[i], 8, HAL_MAX_DELAY); // send through serial port at 115200
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <Serial_tx+0x9c>)
 8001828:	1899      	adds	r1, r3, r2
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	2208      	movs	r2, #8
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <Serial_tx+0xbc>)
 8001832:	f005 fbd4 	bl	8006fde <HAL_UART_Transmit>
  	for (int i=0; i<4; i++)// send the values to serial port: channel 15 to 17 on SerialPort
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b03      	cmp	r3, #3
 8001840:	ddec      	ble.n	800181c <Serial_tx+0x64>
    }
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000538 	.word	0x20000538
 8001850:	0800b3dc 	.word	0x0800b3dc
 8001854:	20000540 	.word	0x20000540
 8001858:	2000067c 	.word	0x2000067c
 800185c:	20000554 	.word	0x20000554
 8001860:	2000053c 	.word	0x2000053c
 8001864:	20000568 	.word	0x20000568
 8001868:	20000678 	.word	0x20000678
 800186c:	0800b3e4 	.word	0x0800b3e4
 8001870:	2000057c 	.word	0x2000057c
 8001874:	200004b8 	.word	0x200004b8

08001878 <Server_Motor12>:


//***************************************************************************************

void Server_Motor12(){
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	 //   set Prescaler to 720 and ARR = 2000 (see ioc setup)
	 // 1ms = 2000 * 1/20 = 100
	 // 2 msec = 200
	 //1.5 msec = 150

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // start timer 12 for servor motor
 800187c:	2100      	movs	r1, #0
 800187e:	480b      	ldr	r0, [pc, #44]	; (80018ac <Server_Motor12+0x34>)
 8001880:	f004 fb3c 	bl	8005efc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // start timer 12 for servor motor
 8001884:	2104      	movs	r1, #4
 8001886:	4809      	ldr	r0, [pc, #36]	; (80018ac <Server_Motor12+0x34>)
 8001888:	f004 fb38 	bl	8005efc <HAL_TIM_PWM_Start>

  // initial position
	htim12.Instance->CCR1 = roll_servo_target;  // duty cycle is 1.5 ms
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <Server_Motor12+0x38>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <Server_Motor12+0x34>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
	htim12.Instance->CCR2 = pitch_servo_target;  // duty cycle is 1.5 ms
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <Server_Motor12+0x3c>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <Server_Motor12+0x34>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(2000);
 80018a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018a4:	f001 fff0 	bl	8003888 <HAL_Delay>

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000042c 	.word	0x2000042c
 80018b0:	20000018 	.word	0x20000018
 80018b4:	20000014 	.word	0x20000014

080018b8 <HAL_GPIO_EXTI_Callback>:


//***************************************************************************************

int start=0;              // use to start stop the motor
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {// user push button interrupt
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	80fb      	strh	r3, [r7, #6]
    // see EXTI0_IRQHandler() in stm32f4xx_it.c for interrupt
	if ( GPIO_Pin == USER_PB_Pin) {
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10f      	bne.n	80018e8 <HAL_GPIO_EXTI_Callback+0x30>
		// toggle LED
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12); // LED - A12
 80018c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80018ce:	f002 fdba 	bl	8004446 <HAL_GPIO_TogglePin>
		if (start == 0)
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <HAL_GPIO_EXTI_Callback+0x2a>
			start = 1;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
		else
			start = 0;
 	    }
}
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_EXTI_Callback+0x30>
			start = 0;
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40020000 	.word	0x40020000
 80018f4:	20000680 	.word	0x20000680

080018f8 <mov_avr_pitch>:
#define window_size 10
float pitch_array[window_size] = {0}; // initialize all value to 0
float roll_array[window_size] = {0};

float mov_avr_pitch(float data)
{   static int index = 0;
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	ed87 0a01 	vstr	s0, [r7, #4]
    float sum;
    char *buff;


    pitch_array[index] = data;
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <mov_avr_pitch+0x80>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1d      	ldr	r2, [pc, #116]	; (800197c <mov_avr_pitch+0x84>)
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	601a      	str	r2, [r3, #0]
    index++;
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <mov_avr_pitch+0x80>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	4a18      	ldr	r2, [pc, #96]	; (8001978 <mov_avr_pitch+0x80>)
 8001918:	6013      	str	r3, [r2, #0]
    if (index == window_size)
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <mov_avr_pitch+0x80>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d102      	bne.n	8001928 <mov_avr_pitch+0x30>
		index = 0;
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <mov_avr_pitch+0x80>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

	sum = 0;
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i<window_size; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	e00e      	b.n	8001952 <mov_avr_pitch+0x5a>
		sum = sum + pitch_array[i];
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <mov_avr_pitch+0x84>)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ed97 7a03 	vldr	s14, [r7, #12]
 8001944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001948:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i<window_size; i++)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b09      	cmp	r3, #9
 8001956:	dded      	ble.n	8001934 <mov_avr_pitch+0x3c>

	return (sum/window_size);
 8001958:	edd7 7a03 	vldr	s15, [r7, #12]
 800195c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001960:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001964:	eef0 7a66 	vmov.f32	s15, s13
}
 8001968:	eeb0 0a67 	vmov.f32	s0, s15
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200006e0 	.word	0x200006e0
 800197c:	20000684 	.word	0x20000684

08001980 <mov_avr_roll>:

//----------------------------------------------------------------------------------------

float mov_avr_roll(const float data)
{   static int index = 0;
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	ed87 0a01 	vstr	s0, [r7, #4]

    roll_array[index] = data;
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <mov_avr_roll+0x80>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <mov_avr_roll+0x84>)
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	601a      	str	r2, [r3, #0]
    index++;
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <mov_avr_roll+0x80>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <mov_avr_roll+0x80>)
 80019a0:	6013      	str	r3, [r2, #0]
	if (index == window_size)
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <mov_avr_roll+0x80>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b0a      	cmp	r3, #10
 80019a8:	d102      	bne.n	80019b0 <mov_avr_roll+0x30>
		index = 0;
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <mov_avr_roll+0x80>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

	float sum = 0;
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i<window_size; i++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	e00e      	b.n	80019da <mov_avr_roll+0x5a>
		sum = sum + roll_array[i];
 80019bc:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <mov_avr_roll+0x84>)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i<window_size; i++)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b09      	cmp	r3, #9
 80019de:	dded      	ble.n	80019bc <mov_avr_roll+0x3c>

	return (sum/window_size);
 80019e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80019f0:	eeb0 0a67 	vmov.f32	s0, s15
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200006e4 	.word	0x200006e4
 8001a04:	200006ac 	.word	0x200006ac

08001a08 <set_targets>:
//***************************************************************************************

#define data_size 500 // take most recent 500 values

void set_targets()  // use the average of 500 samples to set the platform target angles
{ float pitch_arr[data_size];
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
 8001a0e:	af00      	add	r7, sp, #0
  float roll_arr[data_size];
  float pitch_sum = 0, roll_sum = 0;
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f607 72ac 	addw	r2, r7, #4012	; 0xfac
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	f607 72a8 	addw	r2, r7, #4008	; 0xfa8
 8001a22:	6013      	str	r3, [r2, #0]

  millisOld = HAL_GetTick();
 8001a24:	f001 ff24 	bl	8003870 <HAL_GetTick>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a3c      	ldr	r2, [pc, #240]	; (8001b1c <set_targets+0x114>)
 8001a2c:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < data_size; i++ ){
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 3fa4 	str.w	r3, [r7, #4004]	; 0xfa4
 8001a34:	e01c      	b.n	8001a70 <set_targets+0x68>
      get_angles();
 8001a36:	f000 f87f 	bl	8001b38 <get_angles>
      pitch_arr[i] = pitch_KF; // store entries into array
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <set_targets+0x118>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8001a42:	f5a3 61fc 	sub.w	r1, r3, #2016	; 0x7e0
 8001a46:	f8d7 3fa4 	ldr.w	r3, [r7, #4004]	; 0xfa4
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	601a      	str	r2, [r3, #0]
      roll_arr[i] = roll_KF;  // store entries i to array
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <set_targets+0x11c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8001a58:	f5a3 617b 	sub.w	r1, r3, #4016	; 0xfb0
 8001a5c:	f8d7 3fa4 	ldr.w	r3, [r7, #4004]	; 0xfa4
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < data_size; i++ ){
 8001a66:	f8d7 3fa4 	ldr.w	r3, [r7, #4004]	; 0xfa4
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f8c7 3fa4 	str.w	r3, [r7, #4004]	; 0xfa4
 8001a70:	f8d7 3fa4 	ldr.w	r3, [r7, #4004]	; 0xfa4
 8001a74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a78:	dbdd      	blt.n	8001a36 <set_targets+0x2e>
      }
  // calculate average
  for (int i = 0; i < data_size; i++ ){
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 3fa0 	str.w	r3, [r7, #4000]	; 0xfa0
 8001a80:	e02c      	b.n	8001adc <set_targets+0xd4>
      pitch_sum = pitch_sum + pitch_arr[i];
 8001a82:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8001a86:	f5a3 62fc 	sub.w	r2, r3, #2016	; 0x7e0
 8001a8a:	f8d7 3fa0 	ldr.w	r3, [r7, #4000]	; 0xfa0
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8001a9a:	ed93 7a00 	vldr	s14, [r3]
 8001a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
      roll_sum = roll_sum + roll_arr[i];
 8001aaa:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8001aae:	f5a3 627b 	sub.w	r2, r3, #4016	; 0xfb0
 8001ab2:	f8d7 3fa0 	ldr.w	r3, [r7, #4000]	; 0xfa0
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8001ac2:	ed93 7a00 	vldr	s14, [r3]
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8001ace:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < data_size; i++ ){
 8001ad2:	f8d7 3fa0 	ldr.w	r3, [r7, #4000]	; 0xfa0
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f8c7 3fa0 	str.w	r3, [r7, #4000]	; 0xfa0
 8001adc:	f8d7 3fa0 	ldr.w	r3, [r7, #4000]	; 0xfa0
 8001ae0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ae4:	dbcd      	blt.n	8001a82 <set_targets+0x7a>
      }
  pitch_target = pitch_sum/data_size;
 8001ae6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001b28 <set_targets+0x120>
 8001af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <set_targets+0x124>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
  roll_target = roll_sum/data_size;
 8001afc:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b28 <set_targets+0x120>
 8001b08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <set_targets+0x128>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
}
 8001b12:	bf00      	nop
 8001b14:	f507 677b 	add.w	r7, r7, #4016	; 0xfb0
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000066c 	.word	0x2000066c
 8001b20:	2000053c 	.word	0x2000053c
 8001b24:	20000538 	.word	0x20000538
 8001b28:	43fa0000 	.word	0x43fa0000
 8001b2c:	20000678 	.word	0x20000678
 8001b30:	2000067c 	.word	0x2000067c
 8001b34:	00000000 	.word	0x00000000

08001b38 <get_angles>:

//***************************************************************************************

void get_angles()  //Calaculate pitch and toll angles using Kalman Filter
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	  IMU_AccelRead(&imu); // read Accelerometer value
 8001b3c:	48c8      	ldr	r0, [pc, #800]	; (8001e60 <get_angles+0x328>)
 8001b3e:	f7ff fb1f 	bl	8001180 <IMU_AccelRead>
	  IMU_GyroRead(&imu); //  read Gyroscope value
 8001b42:	48c7      	ldr	r0, [pc, #796]	; (8001e60 <get_angles+0x328>)
 8001b44:	f7ff fbe0 	bl	8001308 <IMU_GyroRead>

	  // get the loop elapse time = sampling interval
	  millisNow = HAL_GetTick(); // store the current time for next round
 8001b48:	f001 fe92 	bl	8003870 <HAL_GetTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4ac5      	ldr	r2, [pc, #788]	; (8001e64 <get_angles+0x32c>)
 8001b50:	6013      	str	r3, [r2, #0]
	  dt = (millisNow - millisOld)*0.001; // time elapsed in millisecond
 8001b52:	4bc4      	ldr	r3, [pc, #784]	; (8001e64 <get_angles+0x32c>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4bc4      	ldr	r3, [pc, #784]	; (8001e68 <get_angles+0x330>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcd1 	bl	8000504 <__aeabi_ui2d>
 8001b62:	a3b7      	add	r3, pc, #732	; (adr r3, 8001e40 <get_angles+0x308>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fd46 	bl	80005f8 <__aeabi_dmul>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7ff f818 	bl	8000ba8 <__aeabi_d2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4abc      	ldr	r2, [pc, #752]	; (8001e6c <get_angles+0x334>)
 8001b7c:	6013      	str	r3, [r2, #0]
	  millisOld = millisNow; // store the current time for next round
 8001b7e:	4bb9      	ldr	r3, [pc, #740]	; (8001e64 <get_angles+0x32c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4ab9      	ldr	r2, [pc, #740]	; (8001e68 <get_angles+0x330>)
 8001b84:	6013      	str	r3, [r2, #0]
	  // pitch_gyro = pitch_gyro + imu.gyro[0] * dt; // in millisecond
	  // roll_gyro = roll_gyro + imu.gyro[1] * dt;
	  // yaw_gyro = yaw_gyro + imu.gyro[2] * dt;     // yaw - not needed

	   // convert the acc readings to pitch and roll angles
	   roll_acc=atan2(imu.acc[0],imu.acc[2]); //thetha = pitch = arcTan(aX/aZ)
 8001b86:	4bb6      	ldr	r3, [pc, #728]	; (8001e60 <get_angles+0x328>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcdc 	bl	8000548 <__aeabi_f2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	4bb2      	ldr	r3, [pc, #712]	; (8001e60 <get_angles+0x328>)
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcd5 	bl	8000548 <__aeabi_f2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	ec43 2b11 	vmov	d1, r2, r3
 8001ba6:	ec45 4b10 	vmov	d0, r4, r5
 8001baa:	f009 f8fd 	bl	800ada8 <atan2>
 8001bae:	ec53 2b10 	vmov	r2, r3, d0
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe fff7 	bl	8000ba8 <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4aac      	ldr	r2, [pc, #688]	; (8001e70 <get_angles+0x338>)
 8001bbe:	6013      	str	r3, [r2, #0]
	   roll_acc=-roll_acc*57.3; //change from radian to degree, change sign to match gyro's pitch
 8001bc0:	4bab      	ldr	r3, [pc, #684]	; (8001e70 <get_angles+0x338>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	eef1 7a67 	vneg.f32	s15, s15
 8001bca:	ee17 3a90 	vmov	r3, s15
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcba 	bl	8000548 <__aeabi_f2d>
 8001bd4:	a39c      	add	r3, pc, #624	; (adr r3, 8001e48 <get_angles+0x310>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fd0d 	bl	80005f8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ffdf 	bl	8000ba8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4aa0      	ldr	r2, [pc, #640]	; (8001e70 <get_angles+0x338>)
 8001bee:	6013      	str	r3, [r2, #0]
	   pitch_acc=atan2(imu.acc[1],imu.acc[2]); //Phi = roll = arcTan(aX/aZ)
 8001bf0:	4b9b      	ldr	r3, [pc, #620]	; (8001e60 <get_angles+0x328>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fca7 	bl	8000548 <__aeabi_f2d>
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	460d      	mov	r5, r1
 8001bfe:	4b98      	ldr	r3, [pc, #608]	; (8001e60 <get_angles+0x328>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fca0 	bl	8000548 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	ec43 2b11 	vmov	d1, r2, r3
 8001c10:	ec45 4b10 	vmov	d0, r4, r5
 8001c14:	f009 f8c8 	bl	800ada8 <atan2>
 8001c18:	ec53 2b10 	vmov	r2, r3, d0
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ffc2 	bl	8000ba8 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a93      	ldr	r2, [pc, #588]	; (8001e74 <get_angles+0x33c>)
 8001c28:	6013      	str	r3, [r2, #0]
	   pitch_acc=pitch_acc*57.3; //change from radian to degree//
 8001c2a:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <get_angles+0x33c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc8a 	bl	8000548 <__aeabi_f2d>
 8001c34:	a384      	add	r3, pc, #528	; (adr r3, 8001e48 <get_angles+0x310>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fcdd 	bl	80005f8 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffaf 	bl	8000ba8 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a89      	ldr	r2, [pc, #548]	; (8001e74 <get_angles+0x33c>)
 8001c4e:	6013      	str	r3, [r2, #0]

	   // Complementary filter pitch AND ROLL
	   pitch_CF = 0.05*pitch_acc + 0.95*(pitch_CF + imu.gyro[0]*dt);	 // dt is msec
 8001c50:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <get_angles+0x33c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc77 	bl	8000548 <__aeabi_f2d>
 8001c5a:	a37d      	add	r3, pc, #500	; (adr r3, 8001e50 <get_angles+0x318>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fcca 	bl	80005f8 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	461d      	mov	r5, r3
 8001c6c:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <get_angles+0x328>)
 8001c6e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c72:	4b7e      	ldr	r3, [pc, #504]	; (8001e6c <get_angles+0x334>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7c:	4b7e      	ldr	r3, [pc, #504]	; (8001e78 <get_angles+0x340>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc5d 	bl	8000548 <__aeabi_f2d>
 8001c8e:	a372      	add	r3, pc, #456	; (adr r3, 8001e58 <get_angles+0x320>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fcb0 	bl	80005f8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f7fe faf4 	bl	800028c <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ff7c 	bl	8000ba8 <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a71      	ldr	r2, [pc, #452]	; (8001e78 <get_angles+0x340>)
 8001cb4:	6013      	str	r3, [r2, #0]
	   roll_CF = 0.05*roll_acc + 0.95*(roll_CF + imu.gyro[1]*dt);
 8001cb6:	4b6e      	ldr	r3, [pc, #440]	; (8001e70 <get_angles+0x338>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc44 	bl	8000548 <__aeabi_f2d>
 8001cc0:	a363      	add	r3, pc, #396	; (adr r3, 8001e50 <get_angles+0x318>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <get_angles+0x328>)
 8001cd4:	ed93 7a06 	vldr	s14, [r3, #24]
 8001cd8:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <get_angles+0x334>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce2:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <get_angles+0x344>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	ee17 0a90 	vmov	r0, s15
 8001cf0:	f7fe fc2a 	bl	8000548 <__aeabi_f2d>
 8001cf4:	a358      	add	r3, pc, #352	; (adr r3, 8001e58 <get_angles+0x320>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fc7d 	bl	80005f8 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fac1 	bl	800028c <__adddf3>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe ff49 	bl	8000ba8 <__aeabi_d2f>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <get_angles+0x344>)
 8001d1a:	6013      	str	r3, [r2, #0]

	   //Calculate Kalman filter Pitch and Roll
	   // roll_gyro and pitch_gyro, roll_acc and pitch_acc alreadys calculated above
	   // calculate the roll and pitch estimated angles by gyro measurement
	   pitch_KF = pitch_KF + imu.gyro[0]*dt; // add the latest change in angles to previous values
 8001d1c:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <get_angles+0x328>)
 8001d1e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d22:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <get_angles+0x334>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2c:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <get_angles+0x348>)
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	4b52      	ldr	r3, [pc, #328]	; (8001e80 <get_angles+0x348>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]
	   roll_KF = roll_KF + imu.gyro[1]*dt;
 8001d3c:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <get_angles+0x328>)
 8001d3e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d42:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <get_angles+0x334>)
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4c:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <get_angles+0x34c>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d56:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <get_angles+0x34c>)
 8001d58:	edc3 7a00 	vstr	s15, [r3]
	   // calculate the variance of the estimates by gyro
	   pitch_var_g = pitch_var_g + dt*dt*Var_gyro;
 8001d5c:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <get_angles+0x334>)
 8001d5e:	ed93 7a00 	vldr	s14, [r3]
 8001d62:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <get_angles+0x334>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6c:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <get_angles+0x350>)
 8001d6e:	edd3 7a00 	vldr	s15, [r3]
 8001d72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d76:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <get_angles+0x354>)
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d80:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <get_angles+0x354>)
 8001d82:	edc3 7a00 	vstr	s15, [r3]
	   roll_var_g = roll_var_g + dt*dt*Var_gyro;
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <get_angles+0x334>)
 8001d88:	ed93 7a00 	vldr	s14, [r3]
 8001d8c:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <get_angles+0x334>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <get_angles+0x350>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da0:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <get_angles+0x358>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001daa:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <get_angles+0x358>)
 8001dac:	edc3 7a00 	vstr	s15, [r3]
	   // calculate the Kalman Gain
	   KG_roll = roll_var_g/(roll_var_g + Var_acc);
 8001db0:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <get_angles+0x358>)
 8001db2:	edd3 6a00 	vldr	s13, [r3]
 8001db6:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <get_angles+0x358>)
 8001db8:	ed93 7a00 	vldr	s14, [r3]
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <get_angles+0x35c>)
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dca:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <get_angles+0x360>)
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
	   KG_pitch = pitch_var_g/(pitch_var_g + Var_acc);
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <get_angles+0x354>)
 8001dd2:	edd3 6a00 	vldr	s13, [r3]
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <get_angles+0x354>)
 8001dd8:	ed93 7a00 	vldr	s14, [r3]
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <get_angles+0x35c>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <get_angles+0x364>)
 8001dec:	edc3 7a00 	vstr	s15, [r3]
	   // update the gyro estimates using KG
	   roll_KF = roll_KF + KG_roll*(roll_acc-roll_KF);
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <get_angles+0x338>)
 8001df2:	ed93 7a00 	vldr	s14, [r3]
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <get_angles+0x34c>)
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <get_angles+0x360>)
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <get_angles+0x34c>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <get_angles+0x34c>)
 8001e16:	edc3 7a00 	vstr	s15, [r3]
	   pitch_KF = pitch_KF + KG_pitch*(pitch_acc-pitch_KF);
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <get_angles+0x33c>)
 8001e1c:	ed93 7a00 	vldr	s14, [r3]
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <get_angles+0x348>)
 8001e22:	edd3 7a00 	vldr	s15, [r3]
 8001e26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <get_angles+0x364>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <get_angles+0x348>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3e:	e02f      	b.n	8001ea0 <get_angles+0x368>
 8001e40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e44:	3f50624d 	.word	0x3f50624d
 8001e48:	66666666 	.word	0x66666666
 8001e4c:	404ca666 	.word	0x404ca666
 8001e50:	9999999a 	.word	0x9999999a
 8001e54:	3fa99999 	.word	0x3fa99999
 8001e58:	66666666 	.word	0x66666666
 8001e5c:	3fee6666 	.word	0x3fee6666
 8001e60:	200004fc 	.word	0x200004fc
 8001e64:	20000670 	.word	0x20000670
 8001e68:	2000066c 	.word	0x2000066c
 8001e6c:	20000674 	.word	0x20000674
 8001e70:	20000524 	.word	0x20000524
 8001e74:	20000520 	.word	0x20000520
 8001e78:	20000528 	.word	0x20000528
 8001e7c:	2000052c 	.word	0x2000052c
 8001e80:	2000053c 	.word	0x2000053c
 8001e84:	20000538 	.word	0x20000538
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	20000010 	.word	0x20000010
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000530 	.word	0x20000530
 8001e9c:	20000534 	.word	0x20000534
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <get_angles+0x3b0>)
 8001ea2:	edc3 7a00 	vstr	s15, [r3]
	   // update the gyro estimates variance using KG
	   roll_var_g = (1-KG_roll)*roll_var_g;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <get_angles+0x3b4>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001eb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <get_angles+0x3b8>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <get_angles+0x3b8>)
 8001ec0:	edc3 7a00 	vstr	s15, [r3]
	   pitch_var_g = (1-KG_pitch)*pitch_var_g;
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <get_angles+0x3bc>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <get_angles+0x3c0>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <get_angles+0x3c0>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]
  }
 8001ee2:	bf00      	nop
 8001ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000053c 	.word	0x2000053c
 8001eec:	20000530 	.word	0x20000530
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	20000534 	.word	0x20000534
 8001ef8:	20000010 	.word	0x20000010

08001efc <roll_PID>:
float roll_error_old = 0;    // use these 3 variables to calculate D for PD/PID control
float roll_error_change = 0;
float roll_error_rate = 0;

void roll_PID(float angle, const float kp, const float ki, const float kd)
{   int roll_ServoVal;        // PWM servo value for roll servo motor
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f06:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f0a:	ed87 1a01 	vstr	s2, [r7, #4]
 8001f0e:	edc7 1a00 	vstr	s3, [r7]
    const int ServoMax = 220; // maximum servor value
 8001f12:	23dc      	movs	r3, #220	; 0xdc
 8001f14:	61bb      	str	r3, [r7, #24]
    const int ServoMin = 50;  // maximum servor value
 8001f16:	2332      	movs	r3, #50	; 0x32
 8001f18:	617b      	str	r3, [r7, #20]

    roll_error = roll_target - angle;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <roll_PID+0x9c>)
 8001f1c:	ed93 7a00 	vldr	s14, [r3]
 8001f20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <roll_PID+0xa0>)
 8001f2a:	edc3 7a00 	vstr	s15, [r3]

	roll_ServoVal = (int)(roll_servo_target-(roll_error*kp)); // P control loop
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <roll_PID+0xa4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <roll_PID+0xa0>)
 8001f3c:	edd3 6a00 	vldr	s13, [r3]
 8001f40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f50:	ee17 3a90 	vmov	r3, s15
 8001f54:	61fb      	str	r3, [r7, #28]

	if (roll_ServoVal > ServoMax)  // Clamp the PWM value to maximum value
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	dd01      	ble.n	8001f62 <roll_PID+0x66>
	   roll_ServoVal = ServoMax;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	61fb      	str	r3, [r7, #28]
	if (roll_ServoVal < ServoMin)  // Clamp the PWM value to minimum value
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	da01      	bge.n	8001f6e <roll_PID+0x72>
	   roll_ServoVal = ServoMin;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	61fb      	str	r3, [r7, #28]

	htim12.Instance->CCR1 = roll_ServoVal;      // send PWM duty cycle to servo motor
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <roll_PID+0xa8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34

	sprintf(temp[9], "rS:%3d", roll_ServoVal);  // show Servo PWM value on OLED display
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <roll_PID+0xac>)
 8001f7a:	480c      	ldr	r0, [pc, #48]	; (8001fac <roll_PID+0xb0>)
 8001f7c:	f006 fc92 	bl	80088a4 <siprintf>
	OLED_ShowString(70, 20, &temp[9]);
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <roll_PID+0xb0>)
 8001f82:	2114      	movs	r1, #20
 8001f84:	2046      	movs	r0, #70	; 0x46
 8001f86:	f000 ff19 	bl	8002dbc <OLED_ShowString>
	OLED_Refresh_Gram();
 8001f8a:	f000 fded 	bl	8002b68 <OLED_Refresh_Gram>
}
 8001f8e:	bf00      	nop
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000067c 	.word	0x2000067c
 8001f9c:	200006d8 	.word	0x200006d8
 8001fa0:	20000018 	.word	0x20000018
 8001fa4:	2000042c 	.word	0x2000042c
 8001fa8:	0800b3ec 	.word	0x0800b3ec
 8001fac:	20000662 	.word	0x20000662

08001fb0 <pitch_PID>:
float pitch_error = 0;          // error between target and actual
float pitch_error_area = 0;   // area under error - to calculate I for PI implementation
float pitch_error_old = 0, pitch_error_change = 0, pitch_error_rate = 0; // to calculate D for PID control

void pitch_PID(float angle, const float kp, const float ki, const float kd)
{   int pitch_ServoVal;       // PWM servo value for Pitch servo motor
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001fba:	edc7 0a02 	vstr	s1, [r7, #8]
 8001fbe:	ed87 1a01 	vstr	s2, [r7, #4]
 8001fc2:	edc7 1a00 	vstr	s3, [r7]
    const int ServoMax = 220; // maximum servor value
 8001fc6:	23dc      	movs	r3, #220	; 0xdc
 8001fc8:	617b      	str	r3, [r7, #20]
    const int ServoMin = 50;  // maximum servor value
 8001fca:	2332      	movs	r3, #50	; 0x32
 8001fcc:	613b      	str	r3, [r7, #16]

    return; // disable this function - remove this line to implement Pitch control loop
 8001fce:	bf00      	nop
	htim12.Instance->CCR2 = pitch_ServoVal;  // send duty cycle to Pitch servo motor

	sprintf(temp[9], "pS:%3d", pitch_ServoVal);  // show Servo PWM value on OLED display
	OLED_ShowString(0, 20, &temp[9]);
	OLED_Refresh_Gram(); // refresh OLED display
}
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
     float Kp = 0;  // PID parameters
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
     float Kd = 0;
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
     float Ki = 0;
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff4:	f001 fbd6 	bl	80037a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff8:	f000 f8ce 	bl	8002198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffc:	f000 fcb4 	bl	8002968 <MX_GPIO_Init>
  MX_TIM8_Init();
 8002000:	f000 fba0 	bl	8002744 <MX_TIM8_Init>
  MX_TIM2_Init();
 8002004:	f000 fa74 	bl	80024f0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002008:	f000 fc5a 	bl	80028c0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800200c:	f000 f9ac 	bl	8002368 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002010:	f000 fc80 	bl	8002914 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8002014:	f000 f97a 	bl	800230c <MX_I2C2_Init>
  MX_TIM5_Init();
 8002018:	f000 fb40 	bl	800269c <MX_TIM5_Init>
  MX_TIM4_Init();
 800201c:	f000 fabc 	bl	8002598 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002020:	f000 f922 	bl	8002268 <MX_ADC1_Init>
  MX_TIM12_Init();
 8002024:	f000 fbde 	bl	80027e4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
     OLED_disp_msg1();  // display startup message on OLED
 8002028:	f7ff fa7a 	bl	8001520 <OLED_disp_msg1>

     // Initialize the IMU
     char *msg;
     int i = IMU_Initialise(&imu, &hi2c2, &huart3);
 800202c:	4a48      	ldr	r2, [pc, #288]	; (8002150 <main+0x174>)
 800202e:	4949      	ldr	r1, [pc, #292]	; (8002154 <main+0x178>)
 8002030:	4849      	ldr	r0, [pc, #292]	; (8002158 <main+0x17c>)
 8002032:	f7fe ff8b 	bl	8000f4c <IMU_Initialise>
 8002036:	6078      	str	r0, [r7, #4]
     if (i == 0) // 0 error (i.e. no error)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <main+0x68>
  	    msg = "IMU Init OK   \r\n";
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <main+0x180>)
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e001      	b.n	8002048 <main+0x6c>
     else
        msg = "IMU Init Error\r\n";
 8002044:	4b46      	ldr	r3, [pc, #280]	; (8002160 <main+0x184>)
 8002046:	617b      	str	r3, [r7, #20]
     HAL_UART_Transmit(&huart3, msg, 16, HAL_MAX_DELAY);  // send message to serial port
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	2210      	movs	r2, #16
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	483f      	ldr	r0, [pc, #252]	; (8002150 <main+0x174>)
 8002052:	f004 ffc4 	bl	8006fde <HAL_UART_Transmit>

     OLED_disp_msg2();  // display message2 on OLED to setup platform
 8002056:	f7ff faa1 	bl	800159c <OLED_disp_msg2>

     roll_servo_target = 150;   // nominal PWM value for roll servo motor
 800205a:	4b42      	ldr	r3, [pc, #264]	; (8002164 <main+0x188>)
 800205c:	2296      	movs	r2, #150	; 0x96
 800205e:	601a      	str	r2, [r3, #0]
     pitch_servo_target = 65;   // nominal PWM value for pitch servo motor
 8002060:	4b41      	ldr	r3, [pc, #260]	; (8002168 <main+0x18c>)
 8002062:	2241      	movs	r2, #65	; 0x41
 8002064:	601a      	str	r2, [r3, #0]

     millisOld = HAL_GetTick(); // get first time value before starting - for Gyro and PID dt computation
 8002066:	f001 fc03 	bl	8003870 <HAL_GetTick>
 800206a:	4603      	mov	r3, r0
 800206c:	4a3f      	ldr	r2, [pc, #252]	; (800216c <main+0x190>)
 800206e:	6013      	str	r3, [r2, #0]
     start = 1;  // for user push button detection
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <main+0x194>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     //------------------------------------------------------------------------------------
     while (start == 1){ //do until User button is pressed
 8002076:	e04e      	b.n	8002116 <main+0x13a>
	   get_angles();     //get roll and pitch angles from IMU
 8002078:	f7ff fd5e 	bl	8001b38 <get_angles>

	   //filtering the angles using FIR moving average filter
	   roll_angle = mov_avr_roll(roll_KF);
 800207c:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <main+0x198>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	eeb0 0a67 	vmov.f32	s0, s15
 8002086:	f7ff fc7b 	bl	8001980 <mov_avr_roll>
 800208a:	eef0 7a40 	vmov.f32	s15, s0
 800208e:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <main+0x19c>)
 8002090:	edc3 7a00 	vstr	s15, [r3]
	   pitch_angle = mov_avr_pitch(pitch_KF);
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <main+0x1a0>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eeb0 0a67 	vmov.f32	s0, s15
 800209e:	f7ff fc2b 	bl	80018f8 <mov_avr_pitch>
 80020a2:	eef0 7a40 	vmov.f32	s15, s0
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <main+0x1a4>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]

	   // Execute control loop for Roll angle with its PID parameters
	   Kp = 2;     // P
 80020ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b0:	613b      	str	r3, [r7, #16]
	   Ki = 1.5;     // I
 80020b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80020b6:	60bb      	str	r3, [r7, #8]
	   Kd = 0.5;     // D
 80020b8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80020bc:	60fb      	str	r3, [r7, #12]
	   roll_PID(roll_angle, Kp, Ki, Kd);
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <main+0x19c>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	edd7 1a03 	vldr	s3, [r7, #12]
 80020c8:	ed97 1a02 	vldr	s2, [r7, #8]
 80020cc:	edd7 0a04 	vldr	s1, [r7, #16]
 80020d0:	eeb0 0a67 	vmov.f32	s0, s15
 80020d4:	f7ff ff12 	bl	8001efc <roll_PID>

	   // Execute control loop for Pitch angle with its PID parameters
	   Kp = 1;     // P
 80020d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80020dc:	613b      	str	r3, [r7, #16]
	   Ki = 0;     // I
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
	   Kd = 0;     // D
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
	   pitch_PID(pitch_angle, Kp, Ki, Kd);
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <main+0x1a4>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	edd7 1a03 	vldr	s3, [r7, #12]
 80020f4:	ed97 1a02 	vldr	s2, [r7, #8]
 80020f8:	edd7 0a04 	vldr	s1, [r7, #16]
 80020fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002100:	f7ff ff56 	bl	8001fb0 <pitch_PID>

       Serial_tx(); //send roll & pitch angles, roll & pitch targets to serial port
 8002104:	f7ff fb58 	bl	80017b8 <Serial_tx>

  	   OLED_disp_msg3(); //display information on OLED
 8002108:	f7ff faea 	bl	80016e0 <OLED_disp_msg3>

  	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12); // toggle LED for heart beat indicator
 800210c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002110:	481c      	ldr	r0, [pc, #112]	; (8002184 <main+0x1a8>)
 8002112:	f002 f998 	bl	8004446 <HAL_GPIO_TogglePin>
     while (start == 1){ //do until User button is pressed
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <main+0x194>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d0ac      	beq.n	8002078 <main+0x9c>

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
     //while loop exit - user push button detected
     OLED_Clear();
 800211e:	f000 fd5b 	bl	8002bd8 <OLED_Clear>
     OLED_ShowString(0, 10, "Program Stop"); // show message on OLED display at line 10)
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <main+0x1ac>)
 8002124:	210a      	movs	r1, #10
 8002126:	2000      	movs	r0, #0
 8002128:	f000 fe48 	bl	8002dbc <OLED_ShowString>
     OLED_ShowString(0, 30, "Press Reset");  // show message on OLED display at line 30)
 800212c:	4a17      	ldr	r2, [pc, #92]	; (800218c <main+0x1b0>)
 800212e:	211e      	movs	r1, #30
 8002130:	2000      	movs	r0, #0
 8002132:	f000 fe43 	bl	8002dbc <OLED_ShowString>
     OLED_ShowString(0, 40, "button to");    // show message on OLED display at line 40)
 8002136:	4a16      	ldr	r2, [pc, #88]	; (8002190 <main+0x1b4>)
 8002138:	2128      	movs	r1, #40	; 0x28
 800213a:	2000      	movs	r0, #0
 800213c:	f000 fe3e 	bl	8002dbc <OLED_ShowString>
     OLED_ShowString(0, 50, "restart");      // show message on OLED display at line 50)
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <main+0x1b8>)
 8002142:	2132      	movs	r1, #50	; 0x32
 8002144:	2000      	movs	r0, #0
 8002146:	f000 fe39 	bl	8002dbc <OLED_ShowString>
     OLED_Refresh_Gram();
 800214a:	f000 fd0d 	bl	8002b68 <OLED_Refresh_Gram>
     while(1); // stop - do nothing
 800214e:	e7fe      	b.n	800214e <main+0x172>
 8002150:	200004b8 	.word	0x200004b8
 8002154:	20000270 	.word	0x20000270
 8002158:	200004fc 	.word	0x200004fc
 800215c:	0800b3f4 	.word	0x0800b3f4
 8002160:	0800b408 	.word	0x0800b408
 8002164:	20000018 	.word	0x20000018
 8002168:	20000014 	.word	0x20000014
 800216c:	2000066c 	.word	0x2000066c
 8002170:	20000680 	.word	0x20000680
 8002174:	20000538 	.word	0x20000538
 8002178:	200006d4 	.word	0x200006d4
 800217c:	2000053c 	.word	0x2000053c
 8002180:	200006dc 	.word	0x200006dc
 8002184:	40020000 	.word	0x40020000
 8002188:	0800b41c 	.word	0x0800b41c
 800218c:	0800b42c 	.word	0x0800b42c
 8002190:	0800b438 	.word	0x0800b438
 8002194:	0800b444 	.word	0x0800b444

08002198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b094      	sub	sp, #80	; 0x50
 800219c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	f107 0320 	add.w	r3, r7, #32
 80021a2:	2230      	movs	r2, #48	; 0x30
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f005 ff0a 	bl	8007fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <SystemClock_Config+0xc8>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <SystemClock_Config+0xc8>)
 80021c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ca:	6413      	str	r3, [r2, #64]	; 0x40
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <SystemClock_Config+0xc8>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <SystemClock_Config+0xcc>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a20      	ldr	r2, [pc, #128]	; (8002264 <SystemClock_Config+0xcc>)
 80021e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <SystemClock_Config+0xcc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021f4:	2301      	movs	r3, #1
 80021f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021fe:	2302      	movs	r3, #2
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002208:	2304      	movs	r3, #4
 800220a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800220c:	2348      	movs	r3, #72	; 0x48
 800220e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002210:	2302      	movs	r3, #2
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002214:	2304      	movs	r3, #4
 8002216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	4618      	mov	r0, r3
 800221e:	f003 f92d 	bl	800547c <HAL_RCC_OscConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002228:	f000 fc4a 	bl	8002ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222c:	230f      	movs	r3, #15
 800222e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002230:	2302      	movs	r3, #2
 8002232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	2102      	movs	r1, #2
 8002248:	4618      	mov	r0, r3
 800224a:	f003 fb8f 	bl	800596c <HAL_RCC_ClockConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002254:	f000 fc34 	bl	8002ac0 <Error_Handler>
  }
}
 8002258:	bf00      	nop
 800225a:	3750      	adds	r7, #80	; 0x50
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40023800 	.word	0x40023800
 8002264:	40007000 	.word	0x40007000

08002268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800226e:	463b      	mov	r3, r7
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <MX_ADC1_Init+0x98>)
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <MX_ADC1_Init+0x9c>)
 800227e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <MX_ADC1_Init+0x98>)
 8002282:	2200      	movs	r2, #0
 8002284:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <MX_ADC1_Init+0x98>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <MX_ADC1_Init+0x98>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <MX_ADC1_Init+0x98>)
 8002294:	2200      	movs	r2, #0
 8002296:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <MX_ADC1_Init+0x98>)
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <MX_ADC1_Init+0x98>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <MX_ADC1_Init+0x98>)
 80022a8:	4a17      	ldr	r2, [pc, #92]	; (8002308 <MX_ADC1_Init+0xa0>)
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <MX_ADC1_Init+0x98>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <MX_ADC1_Init+0x98>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <MX_ADC1_Init+0x98>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <MX_ADC1_Init+0x98>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022c6:	480e      	ldr	r0, [pc, #56]	; (8002300 <MX_ADC1_Init+0x98>)
 80022c8:	f001 fb02 	bl	80038d0 <HAL_ADC_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80022d2:	f000 fbf5 	bl	8002ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80022d6:	2308      	movs	r3, #8
 80022d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022da:	2301      	movs	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022e2:	463b      	mov	r3, r7
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <MX_ADC1_Init+0x98>)
 80022e8:	f001 fb36 	bl	8003958 <HAL_ADC_ConfigChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80022f2:	f000 fbe5 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000228 	.word	0x20000228
 8002304:	40012000 	.word	0x40012000
 8002308:	0f000001 	.word	0x0f000001

0800230c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <MX_I2C2_Init+0x50>)
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <MX_I2C2_Init+0x54>)
 8002314:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <MX_I2C2_Init+0x50>)
 8002318:	4a12      	ldr	r2, [pc, #72]	; (8002364 <MX_I2C2_Init+0x58>)
 800231a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <MX_I2C2_Init+0x50>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <MX_I2C2_Init+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <MX_I2C2_Init+0x50>)
 800232a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800232e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <MX_I2C2_Init+0x50>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <MX_I2C2_Init+0x50>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <MX_I2C2_Init+0x50>)
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <MX_I2C2_Init+0x50>)
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002348:	4804      	ldr	r0, [pc, #16]	; (800235c <MX_I2C2_Init+0x50>)
 800234a:	f002 f8af 	bl	80044ac <HAL_I2C_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002354:	f000 fbb4 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000270 	.word	0x20000270
 8002360:	40005800 	.word	0x40005800
 8002364:	000186a0 	.word	0x000186a0

08002368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b096      	sub	sp, #88	; 0x58
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	615a      	str	r2, [r3, #20]
 8002398:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	2220      	movs	r2, #32
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f005 fe0d 	bl	8007fc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023a6:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <MX_TIM1_Init+0x180>)
 80023a8:	4a50      	ldr	r2, [pc, #320]	; (80024ec <MX_TIM1_Init+0x184>)
 80023aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023ac:	4b4e      	ldr	r3, [pc, #312]	; (80024e8 <MX_TIM1_Init+0x180>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b2:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <MX_TIM1_Init+0x180>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <MX_TIM1_Init+0x180>)
 80023ba:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80023be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c0:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <MX_TIM1_Init+0x180>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023c6:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <MX_TIM1_Init+0x180>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <MX_TIM1_Init+0x180>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023d2:	4845      	ldr	r0, [pc, #276]	; (80024e8 <MX_TIM1_Init+0x180>)
 80023d4:	f003 fcea 	bl	8005dac <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80023de:	f000 fb6f 	bl	8002ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023ec:	4619      	mov	r1, r3
 80023ee:	483e      	ldr	r0, [pc, #248]	; (80024e8 <MX_TIM1_Init+0x180>)
 80023f0:	f004 f8bc 	bl	800656c <HAL_TIM_ConfigClockSource>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80023fa:	f000 fb61 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023fe:	483a      	ldr	r0, [pc, #232]	; (80024e8 <MX_TIM1_Init+0x180>)
 8002400:	f003 fd23 	bl	8005e4a <HAL_TIM_PWM_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800240a:	f000 fb59 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800241a:	4619      	mov	r1, r3
 800241c:	4832      	ldr	r0, [pc, #200]	; (80024e8 <MX_TIM1_Init+0x180>)
 800241e:	f004 fcaf 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002428:	f000 fb4a 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800242c:	2360      	movs	r3, #96	; 0x60
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244c:	2200      	movs	r2, #0
 800244e:	4619      	mov	r1, r3
 8002450:	4825      	ldr	r0, [pc, #148]	; (80024e8 <MX_TIM1_Init+0x180>)
 8002452:	f003 ffc9 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800245c:	f000 fb30 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002464:	2204      	movs	r2, #4
 8002466:	4619      	mov	r1, r3
 8002468:	481f      	ldr	r0, [pc, #124]	; (80024e8 <MX_TIM1_Init+0x180>)
 800246a:	f003 ffbd 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002474:	f000 fb24 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247c:	2208      	movs	r2, #8
 800247e:	4619      	mov	r1, r3
 8002480:	4819      	ldr	r0, [pc, #100]	; (80024e8 <MX_TIM1_Init+0x180>)
 8002482:	f003 ffb1 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800248c:	f000 fb18 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002494:	220c      	movs	r2, #12
 8002496:	4619      	mov	r1, r3
 8002498:	4813      	ldr	r0, [pc, #76]	; (80024e8 <MX_TIM1_Init+0x180>)
 800249a:	f003 ffa5 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80024a4:	f000 fb0c 	bl	8002ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4807      	ldr	r0, [pc, #28]	; (80024e8 <MX_TIM1_Init+0x180>)
 80024cc:	f004 fcd4 	bl	8006e78 <HAL_TIMEx_ConfigBreakDeadTime>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80024d6:	f000 faf3 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <MX_TIM1_Init+0x180>)
 80024dc:	f000 fef6 	bl	80032cc <HAL_TIM_MspPostInit>

}
 80024e0:	bf00      	nop
 80024e2:	3758      	adds	r7, #88	; 0x58
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200002c4 	.word	0x200002c4
 80024ec:	40010000 	.word	0x40010000

080024f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	2224      	movs	r2, #36	; 0x24
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 fd5e 	bl	8007fc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800250c:	4b21      	ldr	r3, [pc, #132]	; (8002594 <MX_TIM2_Init+0xa4>)
 800250e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <MX_TIM2_Init+0xa4>)
 8002516:	2200      	movs	r2, #0
 8002518:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <MX_TIM2_Init+0xa4>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002520:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <MX_TIM2_Init+0xa4>)
 8002522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <MX_TIM2_Init+0xa4>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <MX_TIM2_Init+0xa4>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002534:	2303      	movs	r3, #3
 8002536:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002538:	2302      	movs	r3, #2
 800253a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800253c:	2301      	movs	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002544:	230a      	movs	r3, #10
 8002546:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002548:	2302      	movs	r3, #2
 800254a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800254c:	2301      	movs	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002554:	230a      	movs	r3, #10
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	4619      	mov	r1, r3
 800255e:	480d      	ldr	r0, [pc, #52]	; (8002594 <MX_TIM2_Init+0xa4>)
 8002560:	f003 fd94 	bl	800608c <HAL_TIM_Encoder_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800256a:	f000 faa9 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4806      	ldr	r0, [pc, #24]	; (8002594 <MX_TIM2_Init+0xa4>)
 800257c:	f004 fc00 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002586:	f000 fa9b 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	3730      	adds	r7, #48	; 0x30
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	2000030c 	.word	0x2000030c

08002598 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	; 0x38
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ac:	f107 0320 	add.w	r3, r7, #32
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <MX_TIM4_Init+0xfc>)
 80025ca:	4a33      	ldr	r2, [pc, #204]	; (8002698 <MX_TIM4_Init+0x100>)
 80025cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <MX_TIM4_Init+0xfc>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <MX_TIM4_Init+0xfc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <MX_TIM4_Init+0xfc>)
 80025dc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80025e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <MX_TIM4_Init+0xfc>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <MX_TIM4_Init+0xfc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ee:	4829      	ldr	r0, [pc, #164]	; (8002694 <MX_TIM4_Init+0xfc>)
 80025f0:	f003 fbdc 	bl	8005dac <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80025fa:	f000 fa61 	bl	8002ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002608:	4619      	mov	r1, r3
 800260a:	4822      	ldr	r0, [pc, #136]	; (8002694 <MX_TIM4_Init+0xfc>)
 800260c:	f003 ffae 	bl	800656c <HAL_TIM_ConfigClockSource>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002616:	f000 fa53 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800261a:	481e      	ldr	r0, [pc, #120]	; (8002694 <MX_TIM4_Init+0xfc>)
 800261c:	f003 fc15 	bl	8005e4a <HAL_TIM_PWM_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002626:	f000 fa4b 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002632:	f107 0320 	add.w	r3, r7, #32
 8002636:	4619      	mov	r1, r3
 8002638:	4816      	ldr	r0, [pc, #88]	; (8002694 <MX_TIM4_Init+0xfc>)
 800263a:	f004 fba1 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002644:	f000 fa3c 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002648:	2360      	movs	r3, #96	; 0x60
 800264a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2208      	movs	r2, #8
 800265c:	4619      	mov	r1, r3
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <MX_TIM4_Init+0xfc>)
 8002660:	f003 fec2 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800266a:	f000 fa29 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	220c      	movs	r2, #12
 8002672:	4619      	mov	r1, r3
 8002674:	4807      	ldr	r0, [pc, #28]	; (8002694 <MX_TIM4_Init+0xfc>)
 8002676:	f003 feb7 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002680:	f000 fa1e 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002684:	4803      	ldr	r0, [pc, #12]	; (8002694 <MX_TIM4_Init+0xfc>)
 8002686:	f000 fe21 	bl	80032cc <HAL_TIM_MspPostInit>

}
 800268a:	bf00      	nop
 800268c:	3738      	adds	r7, #56	; 0x38
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000354 	.word	0x20000354
 8002698:	40000800 	.word	0x40000800

0800269c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	2224      	movs	r2, #36	; 0x24
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f005 fc88 	bl	8007fc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <MX_TIM5_Init+0xa0>)
 80026ba:	4a21      	ldr	r2, [pc, #132]	; (8002740 <MX_TIM5_Init+0xa4>)
 80026bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <MX_TIM5_Init+0xa0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <MX_TIM5_Init+0xa0>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <MX_TIM5_Init+0xa0>)
 80026cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <MX_TIM5_Init+0xa0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <MX_TIM5_Init+0xa0>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026de:	2301      	movs	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026e6:	2301      	movs	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026f6:	2301      	movs	r3, #1
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	4619      	mov	r1, r3
 8002708:	480c      	ldr	r0, [pc, #48]	; (800273c <MX_TIM5_Init+0xa0>)
 800270a:	f003 fcbf 	bl	800608c <HAL_TIM_Encoder_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002714:	f000 f9d4 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	4619      	mov	r1, r3
 8002724:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_TIM5_Init+0xa0>)
 8002726:	f004 fb2b 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002730:	f000 f9c6 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002734:	bf00      	nop
 8002736:	3730      	adds	r7, #48	; 0x30
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	2000039c 	.word	0x2000039c
 8002740:	40000c00 	.word	0x40000c00

08002744 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002758:	463b      	mov	r3, r7
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <MX_TIM8_Init+0x98>)
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <MX_TIM8_Init+0x9c>)
 8002764:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <MX_TIM8_Init+0x98>)
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <MX_TIM8_Init+0x98>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <MX_TIM8_Init+0x98>)
 8002774:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002778:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277a:	4b18      	ldr	r3, [pc, #96]	; (80027dc <MX_TIM8_Init+0x98>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <MX_TIM8_Init+0x98>)
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <MX_TIM8_Init+0x98>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800278c:	4813      	ldr	r0, [pc, #76]	; (80027dc <MX_TIM8_Init+0x98>)
 800278e:	f003 fb0d 	bl	8005dac <HAL_TIM_Base_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002798:	f000 f992 	bl	8002ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800279c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80027a2:	f107 0308 	add.w	r3, r7, #8
 80027a6:	4619      	mov	r1, r3
 80027a8:	480c      	ldr	r0, [pc, #48]	; (80027dc <MX_TIM8_Init+0x98>)
 80027aa:	f003 fedf 	bl	800656c <HAL_TIM_ConfigClockSource>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80027b4:	f000 f984 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b8:	2300      	movs	r3, #0
 80027ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027c0:	463b      	mov	r3, r7
 80027c2:	4619      	mov	r1, r3
 80027c4:	4805      	ldr	r0, [pc, #20]	; (80027dc <MX_TIM8_Init+0x98>)
 80027c6:	f004 fadb 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80027d0:	f000 f976 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200003e4 	.word	0x200003e4
 80027e0:	40010400 	.word	0x40010400

080027e4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08c      	sub	sp, #48	; 0x30
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ea:	f107 0320 	add.w	r3, r7, #32
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <MX_TIM12_Init+0xd4>)
 800280c:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <MX_TIM12_Init+0xd8>)
 800280e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 720;
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <MX_TIM12_Init+0xd4>)
 8002812:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002816:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <MX_TIM12_Init+0xd4>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2000;
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <MX_TIM12_Init+0xd4>)
 8002820:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002824:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <MX_TIM12_Init+0xd4>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <MX_TIM12_Init+0xd4>)
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002832:	4821      	ldr	r0, [pc, #132]	; (80028b8 <MX_TIM12_Init+0xd4>)
 8002834:	f003 faba 	bl	8005dac <HAL_TIM_Base_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 800283e:	f000 f93f 	bl	8002ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002846:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002848:	f107 0320 	add.w	r3, r7, #32
 800284c:	4619      	mov	r1, r3
 800284e:	481a      	ldr	r0, [pc, #104]	; (80028b8 <MX_TIM12_Init+0xd4>)
 8002850:	f003 fe8c 	bl	800656c <HAL_TIM_ConfigClockSource>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 800285a:	f000 f931 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800285e:	4816      	ldr	r0, [pc, #88]	; (80028b8 <MX_TIM12_Init+0xd4>)
 8002860:	f003 faf3 	bl	8005e4a <HAL_TIM_PWM_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800286a:	f000 f929 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800286e:	2360      	movs	r3, #96	; 0x60
 8002870:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	2200      	movs	r2, #0
 8002882:	4619      	mov	r1, r3
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <MX_TIM12_Init+0xd4>)
 8002886:	f003 fdaf 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002890:	f000 f916 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2204      	movs	r2, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4807      	ldr	r0, [pc, #28]	; (80028b8 <MX_TIM12_Init+0xd4>)
 800289c:	f003 fda4 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 80028a6:	f000 f90b 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80028aa:	4803      	ldr	r0, [pc, #12]	; (80028b8 <MX_TIM12_Init+0xd4>)
 80028ac:	f000 fd0e 	bl	80032cc <HAL_TIM_MspPostInit>

}
 80028b0:	bf00      	nop
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000042c 	.word	0x2000042c
 80028bc:	40001800 	.word	0x40001800

080028c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_USART2_UART_Init+0x4c>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <MX_USART2_UART_Init+0x50>)
 80028c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <MX_USART2_UART_Init+0x4c>)
 80028cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_USART2_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_USART2_UART_Init+0x4c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <MX_USART2_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <MX_USART2_UART_Init+0x4c>)
 80028e6:	220c      	movs	r2, #12
 80028e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <MX_USART2_UART_Init+0x4c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_USART2_UART_Init+0x4c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_USART2_UART_Init+0x4c>)
 80028f8:	f004 fb24 	bl	8006f44 <HAL_UART_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002902:	f000 f8dd 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000474 	.word	0x20000474
 8002910:	40004400 	.word	0x40004400

08002914 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <MX_USART3_UART_Init+0x4c>)
 800291a:	4a12      	ldr	r2, [pc, #72]	; (8002964 <MX_USART3_UART_Init+0x50>)
 800291c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <MX_USART3_UART_Init+0x4c>)
 8002920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <MX_USART3_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_USART3_UART_Init+0x4c>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <MX_USART3_UART_Init+0x4c>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_USART3_UART_Init+0x4c>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <MX_USART3_UART_Init+0x4c>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <MX_USART3_UART_Init+0x4c>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <MX_USART3_UART_Init+0x4c>)
 800294c:	f004 fafa 	bl	8006f44 <HAL_UART_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002956:	f000 f8b3 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200004b8 	.word	0x200004b8
 8002964:	40004800 	.word	0x40004800

08002968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	4b4a      	ldr	r3, [pc, #296]	; (8002aac <MX_GPIO_Init+0x144>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a49      	ldr	r2, [pc, #292]	; (8002aac <MX_GPIO_Init+0x144>)
 8002988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b47      	ldr	r3, [pc, #284]	; (8002aac <MX_GPIO_Init+0x144>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b43      	ldr	r3, [pc, #268]	; (8002aac <MX_GPIO_Init+0x144>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a42      	ldr	r2, [pc, #264]	; (8002aac <MX_GPIO_Init+0x144>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b40      	ldr	r3, [pc, #256]	; (8002aac <MX_GPIO_Init+0x144>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <MX_GPIO_Init+0x144>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <MX_GPIO_Init+0x144>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b39      	ldr	r3, [pc, #228]	; (8002aac <MX_GPIO_Init+0x144>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	4b35      	ldr	r3, [pc, #212]	; (8002aac <MX_GPIO_Init+0x144>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a34      	ldr	r2, [pc, #208]	; (8002aac <MX_GPIO_Init+0x144>)
 80029dc:	f043 0310 	orr.w	r3, r3, #16
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <MX_GPIO_Init+0x144>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <MX_GPIO_Init+0x144>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <MX_GPIO_Init+0x144>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <MX_GPIO_Init+0x144>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DC_Pin|RESET__Pin|SDIN_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8002a10:	4827      	ldr	r0, [pc, #156]	; (8002ab0 <MX_GPIO_Init+0x148>)
 8002a12:	f001 fcff 	bl	8004414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8002a1c:	4825      	ldr	r0, [pc, #148]	; (8002ab4 <MX_GPIO_Init+0x14c>)
 8002a1e:	f001 fcf9 	bl	8004414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	481f      	ldr	r0, [pc, #124]	; (8002ab8 <MX_GPIO_Init+0x150>)
 8002a3a:	f001 fb4f 	bl	80040dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin RESET__Pin SDIN_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = DC_Pin|RESET__Pin|SDIN_Pin|SCLK_Pin;
 8002a3e:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8002a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	2301      	movs	r3, #1
 8002a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	4816      	ldr	r0, [pc, #88]	; (8002ab0 <MX_GPIO_Init+0x148>)
 8002a58:	f001 fb40 	bl	80040dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LED3_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LED3_Pin;
 8002a5c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	480f      	ldr	r0, [pc, #60]	; (8002ab4 <MX_GPIO_Init+0x14c>)
 8002a76:	f001 fb31 	bl	80040dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	480b      	ldr	r0, [pc, #44]	; (8002abc <MX_GPIO_Init+0x154>)
 8002a90:	f001 fb24 	bl	80040dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2100      	movs	r1, #0
 8002a98:	2006      	movs	r0, #6
 8002a9a:	f001 fa56 	bl	8003f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a9e:	2006      	movs	r0, #6
 8002aa0:	f001 fa6f 	bl	8003f82 <HAL_NVIC_EnableIRQ>

}
 8002aa4:	bf00      	nop
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	40020400 	.word	0x40020400
 8002abc:	40021000 	.word	0x40021000

08002ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac4:	b672      	cpsid	i
}
 8002ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <Error_Handler+0x8>
	...

08002acc <OLED_WR_Byte>:
#include <oled.h>
#include <oledfont.h>
#include "stdlib.h"

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	460a      	mov	r2, r1
 8002ad6:	71fb      	strb	r3, [r7, #7]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1)    // Data write
 8002adc:	79bb      	ldrb	r3, [r7, #6]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d106      	bne.n	8002af0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ae8:	481e      	ldr	r0, [pc, #120]	; (8002b64 <OLED_WR_Byte+0x98>)
 8002aea:	f001 fc93 	bl	8004414 <HAL_GPIO_WritePin>
 8002aee:	e005      	b.n	8002afc <OLED_WR_Byte+0x30>
	else                // Command write
	  OLED_RS_Clr();
 8002af0:	2200      	movs	r2, #0
 8002af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002af6:	481b      	ldr	r0, [pc, #108]	; (8002b64 <OLED_WR_Byte+0x98>)
 8002af8:	f001 fc8c 	bl	8004414 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e022      	b.n	8002b48 <OLED_WR_Byte+0x7c>
	{	OLED_SCLK_Clr();  // clear the clock
 8002b02:	2200      	movs	r2, #0
 8002b04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b08:	4816      	ldr	r0, [pc, #88]	; (8002b64 <OLED_WR_Byte+0x98>)
 8002b0a:	f001 fc83 	bl	8004414 <HAL_GPIO_WritePin>
		if(dat&0x80)      // check data bit
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	da06      	bge.n	8002b24 <OLED_WR_Byte+0x58>
		   OLED_SDIN_Set();
 8002b16:	2201      	movs	r2, #1
 8002b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b1c:	4811      	ldr	r0, [pc, #68]	; (8002b64 <OLED_WR_Byte+0x98>)
 8002b1e:	f001 fc79 	bl	8004414 <HAL_GPIO_WritePin>
 8002b22:	e005      	b.n	8002b30 <OLED_WR_Byte+0x64>
		else 
		   OLED_SDIN_Clr();
 8002b24:	2200      	movs	r2, #0
 8002b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b2a:	480e      	ldr	r0, [pc, #56]	; (8002b64 <OLED_WR_Byte+0x98>)
 8002b2c:	f001 fc72 	bl	8004414 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8002b30:	2201      	movs	r2, #1
 8002b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b36:	480b      	ldr	r0, [pc, #44]	; (8002b64 <OLED_WR_Byte+0x98>)
 8002b38:	f001 fc6c 	bl	8004414 <HAL_GPIO_WritePin>
		dat<<=1;          // check next data bit
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	3301      	adds	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b07      	cmp	r3, #7
 8002b4c:	d9d9      	bls.n	8002b02 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Set RS=1 upon exit
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b54:	4803      	ldr	r0, [pc, #12]	; (8002b64 <OLED_WR_Byte+0x98>)
 8002b56:	f001 fc5d 	bl	8004414 <HAL_GPIO_WritePin>
} 
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40020c00 	.word	0x40020c00

08002b68 <OLED_Refresh_Gram>:

// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	71fb      	strb	r3, [r7, #7]
 8002b72:	e026      	b.n	8002bc2 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	3b50      	subs	r3, #80	; 0x50
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ffa5 	bl	8002acc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8002b82:	2100      	movs	r1, #0
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff ffa1 	bl	8002acc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	2010      	movs	r0, #16
 8002b8e:	f7ff ff9d 	bl	8002acc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8002b92:	2300      	movs	r3, #0
 8002b94:	71bb      	strb	r3, [r7, #6]
 8002b96:	e00d      	b.n	8002bb4 <OLED_Refresh_Gram+0x4c>
 8002b98:	79ba      	ldrb	r2, [r7, #6]
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	490d      	ldr	r1, [pc, #52]	; (8002bd4 <OLED_Refresh_Gram+0x6c>)
 8002b9e:	00d2      	lsls	r2, r2, #3
 8002ba0:	440a      	add	r2, r1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff8f 	bl	8002acc <OLED_WR_Byte>
 8002bae:	79bb      	ldrb	r3, [r7, #6]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	71bb      	strb	r3, [r7, #6]
 8002bb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	daed      	bge.n	8002b98 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	71fb      	strb	r3, [r7, #7]
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	2b07      	cmp	r3, #7
 8002bc6:	d9d5      	bls.n	8002b74 <OLED_Refresh_Gram+0xc>
	}
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200006e8 	.word	0x200006e8

08002bd8 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8002bde:	2300      	movs	r3, #0
 8002be0:	71fb      	strb	r3, [r7, #7]
 8002be2:	e014      	b.n	8002c0e <OLED_Clear+0x36>
 8002be4:	2300      	movs	r3, #0
 8002be6:	71bb      	strb	r3, [r7, #6]
 8002be8:	e00a      	b.n	8002c00 <OLED_Clear+0x28>
 8002bea:	79ba      	ldrb	r2, [r7, #6]
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	490c      	ldr	r1, [pc, #48]	; (8002c20 <OLED_Clear+0x48>)
 8002bf0:	00d2      	lsls	r2, r2, #3
 8002bf2:	440a      	add	r2, r1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	71bb      	strb	r3, [r7, #6]
 8002c00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	daf0      	bge.n	8002bea <OLED_Clear+0x12>
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	71fb      	strb	r3, [r7, #7]
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b07      	cmp	r3, #7
 8002c12:	d9e7      	bls.n	8002be4 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8002c14:	f7ff ffa8 	bl	8002b68 <OLED_Refresh_Gram>
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200006e8 	.word	0x200006e8

08002c24 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	71bb      	strb	r3, [r7, #6]
 8002c32:	4613      	mov	r3, r2
 8002c34:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db41      	blt.n	8002cc6 <OLED_DrawPoint+0xa2>
 8002c42:	79bb      	ldrb	r3, [r7, #6]
 8002c44:	2b3f      	cmp	r3, #63	; 0x3f
 8002c46:	d83e      	bhi.n	8002cc6 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8002c48:	79bb      	ldrb	r3, [r7, #6]
 8002c4a:	08db      	lsrs	r3, r3, #3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8002c54:	79bb      	ldrb	r3, [r7, #6]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002c5c:	7b7b      	ldrb	r3, [r7, #13]
 8002c5e:	f1c3 0307 	rsb	r3, r3, #7
 8002c62:	2201      	movs	r2, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8002c6a:	797b      	ldrb	r3, [r7, #5]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d012      	beq.n	8002c96 <OLED_DrawPoint+0x72>
 8002c70:	79fa      	ldrb	r2, [r7, #7]
 8002c72:	7bbb      	ldrb	r3, [r7, #14]
 8002c74:	4917      	ldr	r1, [pc, #92]	; (8002cd4 <OLED_DrawPoint+0xb0>)
 8002c76:	00d2      	lsls	r2, r2, #3
 8002c78:	440a      	add	r2, r1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	7818      	ldrb	r0, [r3, #0]
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	7bbb      	ldrb	r3, [r7, #14]
 8002c82:	7bf9      	ldrb	r1, [r7, #15]
 8002c84:	4301      	orrs	r1, r0
 8002c86:	b2c8      	uxtb	r0, r1
 8002c88:	4912      	ldr	r1, [pc, #72]	; (8002cd4 <OLED_DrawPoint+0xb0>)
 8002c8a:	00d2      	lsls	r2, r2, #3
 8002c8c:	440a      	add	r2, r1
 8002c8e:	4413      	add	r3, r2
 8002c90:	4602      	mov	r2, r0
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e018      	b.n	8002cc8 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8002c96:	79fa      	ldrb	r2, [r7, #7]
 8002c98:	7bbb      	ldrb	r3, [r7, #14]
 8002c9a:	490e      	ldr	r1, [pc, #56]	; (8002cd4 <OLED_DrawPoint+0xb0>)
 8002c9c:	00d2      	lsls	r2, r2, #3
 8002c9e:	440a      	add	r2, r1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b25a      	sxtb	r2, r3
 8002ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b259      	sxtb	r1, r3
 8002cb2:	79fa      	ldrb	r2, [r7, #7]
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	b2c8      	uxtb	r0, r1
 8002cb8:	4906      	ldr	r1, [pc, #24]	; (8002cd4 <OLED_DrawPoint+0xb0>)
 8002cba:	00d2      	lsls	r2, r2, #3
 8002cbc:	440a      	add	r2, r1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e000      	b.n	8002cc8 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8002cc6:	bf00      	nop
}
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	200006e8 	.word	0x200006e8

08002cd8 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4604      	mov	r4, r0
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	71fb      	strb	r3, [r7, #7]
 8002cea:	4603      	mov	r3, r0
 8002cec:	71bb      	strb	r3, [r7, #6]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	717b      	strb	r3, [r7, #5]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8002cf6:	79bb      	ldrb	r3, [r7, #6]
 8002cf8:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8002cfa:	797b      	ldrb	r3, [r7, #5]
 8002cfc:	3b20      	subs	r3, #32
 8002cfe:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	73bb      	strb	r3, [r7, #14]
 8002d04:	e04d      	b.n	8002da2 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8002d06:	793b      	ldrb	r3, [r7, #4]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	d10b      	bne.n	8002d24 <OLED_ShowChar+0x4c>
 8002d0c:	797a      	ldrb	r2, [r7, #5]
 8002d0e:	7bb9      	ldrb	r1, [r7, #14]
 8002d10:	4828      	ldr	r0, [pc, #160]	; (8002db4 <OLED_ShowChar+0xdc>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4403      	add	r3, r0
 8002d1c:	440b      	add	r3, r1
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e007      	b.n	8002d34 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8002d24:	797a      	ldrb	r2, [r7, #5]
 8002d26:	7bbb      	ldrb	r3, [r7, #14]
 8002d28:	4923      	ldr	r1, [pc, #140]	; (8002db8 <OLED_ShowChar+0xe0>)
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	440a      	add	r2, r1
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	737b      	strb	r3, [r7, #13]
 8002d38:	e02d      	b.n	8002d96 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da07      	bge.n	8002d52 <OLED_ShowChar+0x7a>
 8002d42:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d46:	79b9      	ldrb	r1, [r7, #6]
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff6a 	bl	8002c24 <OLED_DrawPoint>
 8002d50:	e00c      	b.n	8002d6c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8002d52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	79b9      	ldrb	r1, [r7, #6]
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ff5c 	bl	8002c24 <OLED_DrawPoint>
			temp<<=1;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
			y++;
 8002d72:	79bb      	ldrb	r3, [r7, #6]
 8002d74:	3301      	adds	r3, #1
 8002d76:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8002d78:	79ba      	ldrb	r2, [r7, #6]
 8002d7a:	7b3b      	ldrb	r3, [r7, #12]
 8002d7c:	1ad2      	subs	r2, r2, r3
 8002d7e:	793b      	ldrb	r3, [r7, #4]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d105      	bne.n	8002d90 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8002d84:	7b3b      	ldrb	r3, [r7, #12]
 8002d86:	71bb      	strb	r3, [r7, #6]
				x++;
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	71fb      	strb	r3, [r7, #7]
				break;
 8002d8e:	e005      	b.n	8002d9c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8002d90:	7b7b      	ldrb	r3, [r7, #13]
 8002d92:	3301      	adds	r3, #1
 8002d94:	737b      	strb	r3, [r7, #13]
 8002d96:	7b7b      	ldrb	r3, [r7, #13]
 8002d98:	2b07      	cmp	r3, #7
 8002d9a:	d9ce      	bls.n	8002d3a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8002d9c:	7bbb      	ldrb	r3, [r7, #14]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	73bb      	strb	r3, [r7, #14]
 8002da2:	7bba      	ldrb	r2, [r7, #14]
 8002da4:	793b      	ldrb	r3, [r7, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d3ad      	bcc.n	8002d06 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	0800b44c 	.word	0x0800b44c
 8002db8:	0800b8c0 	.word	0x0800b8c0

08002dbc <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	603a      	str	r2, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8002dcc:	e01f      	b.n	8002e0e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b7a      	cmp	r3, #122	; 0x7a
 8002dd2:	d904      	bls.n	8002dde <OLED_ShowString+0x22>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	71fb      	strb	r3, [r7, #7]
 8002dd8:	79bb      	ldrb	r3, [r7, #6]
 8002dda:	3310      	adds	r3, #16
 8002ddc:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8002dde:	79bb      	ldrb	r3, [r7, #6]
 8002de0:	2b3a      	cmp	r3, #58	; 0x3a
 8002de2:	d905      	bls.n	8002df0 <OLED_ShowString+0x34>
 8002de4:	2300      	movs	r3, #0
 8002de6:	71fb      	strb	r3, [r7, #7]
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	71bb      	strb	r3, [r7, #6]
 8002dec:	f7ff fef4 	bl	8002bd8 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	79b9      	ldrb	r1, [r7, #6]
 8002df6:	79f8      	ldrb	r0, [r7, #7]
 8002df8:	2301      	movs	r3, #1
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	f7ff ff6b 	bl	8002cd8 <OLED_ShowChar>
        x+=8;
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	3308      	adds	r3, #8
 8002e06:	71fb      	strb	r3, [r7, #7]
        p++;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1db      	bne.n	8002dce <OLED_ShowString+0x12>
    }  
}	 
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <OLED_Init>:

void OLED_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8002e24:	f002 fb02 	bl	800542c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8002e28:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <OLED_Init+0x114>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a41      	ldr	r2, [pc, #260]	; (8002f34 <OLED_Init+0x114>)
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <OLED_Init+0x114>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a3e      	ldr	r2, [pc, #248]	; (8002f34 <OLED_Init+0x114>)
 8002e3a:	f023 0304 	bic.w	r3, r3, #4
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8002e40:	f002 fb08 	bl	8005454 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8002e44:	2200      	movs	r2, #0
 8002e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e4a:	483b      	ldr	r0, [pc, #236]	; (8002f38 <OLED_Init+0x118>)
 8002e4c:	f001 fae2 	bl	8004414 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002e50:	2064      	movs	r0, #100	; 0x64
 8002e52:	f000 fd19 	bl	8003888 <HAL_Delay>
	OLED_RST_Set();
 8002e56:	2201      	movs	r2, #1
 8002e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e5c:	4836      	ldr	r0, [pc, #216]	; (8002f38 <OLED_Init+0x118>)
 8002e5e:	f001 fad9 	bl	8004414 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8002e62:	2100      	movs	r1, #0
 8002e64:	20ae      	movs	r0, #174	; 0xae
 8002e66:	f7ff fe31 	bl	8002acc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	20d5      	movs	r0, #213	; 0xd5
 8002e6e:	f7ff fe2d 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8002e72:	2100      	movs	r1, #0
 8002e74:	2050      	movs	r0, #80	; 0x50
 8002e76:	f7ff fe29 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	20a8      	movs	r0, #168	; 0xa8
 8002e7e:	f7ff fe25 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8002e82:	2100      	movs	r1, #0
 8002e84:	203f      	movs	r0, #63	; 0x3f
 8002e86:	f7ff fe21 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	20d3      	movs	r0, #211	; 0xd3
 8002e8e:	f7ff fe1d 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8002e92:	2100      	movs	r1, #0
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7ff fe19 	bl	8002acc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2040      	movs	r0, #64	; 0x40
 8002e9e:	f7ff fe15 	bl	8002acc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	208d      	movs	r0, #141	; 0x8d
 8002ea6:	f7ff fe11 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8002eaa:	2100      	movs	r1, #0
 8002eac:	2014      	movs	r0, #20
 8002eae:	f7ff fe0d 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2020      	movs	r0, #32
 8002eb6:	f7ff fe09 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8002eba:	2100      	movs	r1, #0
 8002ebc:	2002      	movs	r0, #2
 8002ebe:	f7ff fe05 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	20a1      	movs	r0, #161	; 0xa1
 8002ec6:	f7ff fe01 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8002eca:	2100      	movs	r1, #0
 8002ecc:	20c0      	movs	r0, #192	; 0xc0
 8002ece:	f7ff fdfd 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	20da      	movs	r0, #218	; 0xda
 8002ed6:	f7ff fdf9 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8002eda:	2100      	movs	r1, #0
 8002edc:	2012      	movs	r0, #18
 8002ede:	f7ff fdf5 	bl	8002acc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2081      	movs	r0, #129	; 0x81
 8002ee6:	f7ff fdf1 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8002eea:	2100      	movs	r1, #0
 8002eec:	20ef      	movs	r0, #239	; 0xef
 8002eee:	f7ff fded 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	20d9      	movs	r0, #217	; 0xd9
 8002ef6:	f7ff fde9 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8002efa:	2100      	movs	r1, #0
 8002efc:	20f1      	movs	r0, #241	; 0xf1
 8002efe:	f7ff fde5 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8002f02:	2100      	movs	r1, #0
 8002f04:	20db      	movs	r0, #219	; 0xdb
 8002f06:	f7ff fde1 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	2030      	movs	r0, #48	; 0x30
 8002f0e:	f7ff fddd 	bl	8002acc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8002f12:	2100      	movs	r1, #0
 8002f14:	20a4      	movs	r0, #164	; 0xa4
 8002f16:	f7ff fdd9 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	20a6      	movs	r0, #166	; 0xa6
 8002f1e:	f7ff fdd5 	bl	8002acc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8002f22:	2100      	movs	r1, #0
 8002f24:	20af      	movs	r0, #175	; 0xaf
 8002f26:	f7ff fdd1 	bl	8002acc <OLED_WR_Byte>
	OLED_Clear(); 
 8002f2a:	f7ff fe55 	bl	8002bd8 <OLED_Clear>
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020c00 	.word	0x40020c00

08002f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_MspInit+0x68>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <HAL_MspInit+0x68>)
 8002f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f50:	6453      	str	r3, [r2, #68]	; 0x44
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_MspInit+0x68>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_MspInit+0x68>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a0f      	ldr	r2, [pc, #60]	; (8002fa4 <HAL_MspInit+0x68>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_MspInit+0x68>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2005      	movs	r0, #5
 8002f80:	f000 ffe3 	bl	8003f4a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002f84:	2005      	movs	r0, #5
 8002f86:	f000 fffc 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	2005      	movs	r0, #5
 8002f90:	f000 ffdb 	bl	8003f4a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002f94:	2005      	movs	r0, #5
 8002f96:	f000 fff4 	bl	8003f82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800

08002fa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a17      	ldr	r2, [pc, #92]	; (8003024 <HAL_ADC_MspInit+0x7c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d127      	bne.n	800301a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	4b16      	ldr	r3, [pc, #88]	; (8003028 <HAL_ADC_MspInit+0x80>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4a15      	ldr	r2, [pc, #84]	; (8003028 <HAL_ADC_MspInit+0x80>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <HAL_ADC_MspInit+0x80>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_ADC_MspInit+0x80>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_ADC_MspInit+0x80>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_ADC_MspInit+0x80>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003002:	2301      	movs	r3, #1
 8003004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003006:	2303      	movs	r3, #3
 8003008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	4619      	mov	r1, r3
 8003014:	4805      	ldr	r0, [pc, #20]	; (800302c <HAL_ADC_MspInit+0x84>)
 8003016:	f001 f861 	bl	80040dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	; 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40012000 	.word	0x40012000
 8003028:	40023800 	.word	0x40023800
 800302c:	40020400 	.word	0x40020400

08003030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_I2C_MspInit+0x84>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d12c      	bne.n	80030ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_I2C_MspInit+0x88>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <HAL_I2C_MspInit+0x88>)
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_I2C_MspInit+0x88>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800306e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003074:	2312      	movs	r3, #18
 8003076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003080:	2304      	movs	r3, #4
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	4619      	mov	r1, r3
 800308a:	480c      	ldr	r0, [pc, #48]	; (80030bc <HAL_I2C_MspInit+0x8c>)
 800308c:	f001 f826 	bl	80040dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_I2C_MspInit+0x88>)
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_I2C_MspInit+0x88>)
 800309a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800309e:	6413      	str	r3, [r2, #64]	; 0x40
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_I2C_MspInit+0x88>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80030ac:	bf00      	nop
 80030ae:	3728      	adds	r7, #40	; 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40005800 	.word	0x40005800
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40020400 	.word	0x40020400

080030c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a29      	ldr	r2, [pc, #164]	; (8003174 <HAL_TIM_Base_MspInit+0xb4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a27      	ldr	r2, [pc, #156]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b25      	ldr	r3, [pc, #148]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80030ee:	e03a      	b.n	8003166 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a21      	ldr	r2, [pc, #132]	; (800317c <HAL_TIM_Base_MspInit+0xbc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]
}
 8003116:	e026      	b.n	8003166 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a18      	ldr	r2, [pc, #96]	; (8003180 <HAL_TIM_Base_MspInit+0xc0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10e      	bne.n	8003140 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a13      	ldr	r2, [pc, #76]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
}
 800313e:	e012      	b.n	8003166 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_TIM_Base_MspInit+0xc4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10d      	bne.n	8003166 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 8003154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <HAL_TIM_Base_MspInit+0xb8>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40010000 	.word	0x40010000
 8003178:	40023800 	.word	0x40023800
 800317c:	40000800 	.word	0x40000800
 8003180:	40010400 	.word	0x40010400
 8003184:	40001800 	.word	0x40001800

08003188 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 031c 	add.w	r3, r7, #28
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d153      	bne.n	8003252 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	4b43      	ldr	r3, [pc, #268]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a42      	ldr	r2, [pc, #264]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b40      	ldr	r3, [pc, #256]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b39      	ldr	r3, [pc, #228]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a34      	ldr	r2, [pc, #208]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320c:	2300      	movs	r3, #0
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003210:	2301      	movs	r3, #1
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	4619      	mov	r1, r3
 800321a:	4829      	ldr	r0, [pc, #164]	; (80032c0 <HAL_TIM_Encoder_MspInit+0x138>)
 800321c:	f000 ff5e 	bl	80040dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003220:	2308      	movs	r3, #8
 8003222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003230:	2301      	movs	r3, #1
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	4619      	mov	r1, r3
 800323a:	4822      	ldr	r0, [pc, #136]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800323c:	f000 ff4e 	bl	80040dc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003240:	2200      	movs	r2, #0
 8003242:	2100      	movs	r1, #0
 8003244:	201c      	movs	r0, #28
 8003246:	f000 fe80 	bl	8003f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800324a:	201c      	movs	r0, #28
 800324c:	f000 fe99 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003250:	e030      	b.n	80032b4 <HAL_TIM_Encoder_MspInit+0x12c>
  else if(htim_encoder->Instance==TIM5)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_TIM_Encoder_MspInit+0x140>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d12b      	bne.n	80032b4 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 8003266:	f043 0308 	orr.w	r3, r3, #8
 800326a:	6413      	str	r3, [r2, #64]	; 0x40
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6313      	str	r3, [r2, #48]	; 0x30
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_TIM_Encoder_MspInit+0x134>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003294:	2303      	movs	r3, #3
 8003296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032a4:	2302      	movs	r3, #2
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a8:	f107 031c 	add.w	r3, r7, #28
 80032ac:	4619      	mov	r1, r3
 80032ae:	4804      	ldr	r0, [pc, #16]	; (80032c0 <HAL_TIM_Encoder_MspInit+0x138>)
 80032b0:	f000 ff14 	bl	80040dc <HAL_GPIO_Init>
}
 80032b4:	bf00      	nop
 80032b6:	3730      	adds	r7, #48	; 0x30
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020000 	.word	0x40020000
 80032c4:	40020400 	.word	0x40020400
 80032c8:	40000c00 	.word	0x40000c00

080032cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a37      	ldr	r2, [pc, #220]	; (80033c8 <HAL_TIM_MspPostInit+0xfc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d11f      	bne.n	800332e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_TIM_MspPostInit+0x100>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a35      	ldr	r2, [pc, #212]	; (80033cc <HAL_TIM_MspPostInit+0x100>)
 80032f8:	f043 0310 	orr.w	r3, r3, #16
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b33      	ldr	r3, [pc, #204]	; (80033cc <HAL_TIM_MspPostInit+0x100>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = IN2_CO_Pin|IN1_CO_Pin|IN2_DO_Pin|IN1_DO_Pin;
 800330a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800330e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800331c:	2301      	movs	r3, #1
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4619      	mov	r1, r3
 8003326:	482a      	ldr	r0, [pc, #168]	; (80033d0 <HAL_TIM_MspPostInit+0x104>)
 8003328:	f000 fed8 	bl	80040dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800332c:	e048      	b.n	80033c0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM4)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <HAL_TIM_MspPostInit+0x108>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d11f      	bne.n	8003378 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <HAL_TIM_MspPostInit+0x100>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_TIM_MspPostInit+0x100>)
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	6313      	str	r3, [r2, #48]	; 0x30
 8003348:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_TIM_MspPostInit+0x100>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN2_A_PWM_Pin|IN1_A_PWM_Pin;
 8003354:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003366:	2302      	movs	r3, #2
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	4619      	mov	r1, r3
 8003370:	4819      	ldr	r0, [pc, #100]	; (80033d8 <HAL_TIM_MspPostInit+0x10c>)
 8003372:	f000 feb3 	bl	80040dc <HAL_GPIO_Init>
}
 8003376:	e023      	b.n	80033c0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM12)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a17      	ldr	r2, [pc, #92]	; (80033dc <HAL_TIM_MspPostInit+0x110>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d11e      	bne.n	80033c0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_TIM_MspPostInit+0x100>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <HAL_TIM_MspPostInit+0x100>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_TIM_MspPostInit+0x100>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800339e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80033a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2300      	movs	r3, #0
 80033ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80033b0:	2309      	movs	r3, #9
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	4619      	mov	r1, r3
 80033ba:	4807      	ldr	r0, [pc, #28]	; (80033d8 <HAL_TIM_MspPostInit+0x10c>)
 80033bc:	f000 fe8e 	bl	80040dc <HAL_GPIO_Init>
}
 80033c0:	bf00      	nop
 80033c2:	3728      	adds	r7, #40	; 0x28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40020400 	.word	0x40020400
 80033dc:	40001800 	.word	0x40001800

080033e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	; 0x30
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3e      	ldr	r2, [pc, #248]	; (80034f8 <HAL_UART_MspInit+0x118>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d144      	bne.n	800348c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_UART_MspInit+0x11c>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a3c      	ldr	r2, [pc, #240]	; (80034fc <HAL_UART_MspInit+0x11c>)
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_UART_MspInit+0x11c>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <HAL_UART_MspInit+0x11c>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	4a35      	ldr	r2, [pc, #212]	; (80034fc <HAL_UART_MspInit+0x11c>)
 8003428:	f043 0308 	orr.w	r3, r3, #8
 800342c:	6313      	str	r3, [r2, #48]	; 0x30
 800342e:	4b33      	ldr	r3, [pc, #204]	; (80034fc <HAL_UART_MspInit+0x11c>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800343a:	2320      	movs	r3, #32
 800343c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003446:	2303      	movs	r3, #3
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800344a:	2307      	movs	r3, #7
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800344e:	f107 031c 	add.w	r3, r7, #28
 8003452:	4619      	mov	r1, r3
 8003454:	482a      	ldr	r0, [pc, #168]	; (8003500 <HAL_UART_MspInit+0x120>)
 8003456:	f000 fe41 	bl	80040dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800345a:	2340      	movs	r3, #64	; 0x40
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003462:	2301      	movs	r3, #1
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003466:	2303      	movs	r3, #3
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800346a:	2307      	movs	r3, #7
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	4619      	mov	r1, r3
 8003474:	4822      	ldr	r0, [pc, #136]	; (8003500 <HAL_UART_MspInit+0x120>)
 8003476:	f000 fe31 	bl	80040dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	2100      	movs	r1, #0
 800347e:	2026      	movs	r0, #38	; 0x26
 8003480:	f000 fd63 	bl	8003f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003484:	2026      	movs	r0, #38	; 0x26
 8003486:	f000 fd7c 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800348a:	e031      	b.n	80034f0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <HAL_UART_MspInit+0x124>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d12c      	bne.n	80034f0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	4b18      	ldr	r3, [pc, #96]	; (80034fc <HAL_UART_MspInit+0x11c>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <HAL_UART_MspInit+0x11c>)
 80034a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <HAL_UART_MspInit+0x11c>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_UART_MspInit+0x11c>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_UART_MspInit+0x11c>)
 80034bc:	f043 0308 	orr.w	r3, r3, #8
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_UART_MspInit+0x11c>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034e0:	2307      	movs	r3, #7
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e4:	f107 031c 	add.w	r3, r7, #28
 80034e8:	4619      	mov	r1, r3
 80034ea:	4805      	ldr	r0, [pc, #20]	; (8003500 <HAL_UART_MspInit+0x120>)
 80034ec:	f000 fdf6 	bl	80040dc <HAL_GPIO_Init>
}
 80034f0:	bf00      	nop
 80034f2:	3730      	adds	r7, #48	; 0x30
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40004400 	.word	0x40004400
 80034fc:	40023800 	.word	0x40023800
 8003500:	40020c00 	.word	0x40020c00
 8003504:	40004800 	.word	0x40004800

08003508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800350c:	e7fe      	b.n	800350c <NMI_Handler+0x4>

0800350e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003512:	e7fe      	b.n	8003512 <HardFault_Handler+0x4>

08003514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003518:	e7fe      	b.n	8003518 <MemManage_Handler+0x4>

0800351a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800351e:	e7fe      	b.n	800351e <BusFault_Handler+0x4>

08003520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003524:	e7fe      	b.n	8003524 <UsageFault_Handler+0x4>

08003526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003526:	b480      	push	{r7}
 8003528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003542:	b480      	push	{r7}
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
//		tick = 0;
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
//	   }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003554:	f000 f978 	bl	8003848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}

0800355c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_PB_Pin);
 800356e:	2001      	movs	r0, #1
 8003570:	f000 ff84 	bl	800447c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003574:	bf00      	nop
 8003576:	bd80      	pop	{r7, pc}

08003578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <TIM2_IRQHandler+0x10>)
 800357e:	f002 fe2b 	bl	80061d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	2000030c 	.word	0x2000030c

0800358c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <USART2_IRQHandler+0x10>)
 8003592:	f003 fdb7 	bl	8007104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000474 	.word	0x20000474

080035a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
	return 1;
 80035a4:	2301      	movs	r3, #1
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <_kill>:

int _kill(int pid, int sig)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035ba:	f004 fcd7 	bl	8007f6c <__errno>
 80035be:	4603      	mov	r3, r0
 80035c0:	2216      	movs	r2, #22
 80035c2:	601a      	str	r2, [r3, #0]
	return -1;
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_exit>:

void _exit (int status)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ffe7 	bl	80035b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035e2:	e7fe      	b.n	80035e2 <_exit+0x12>

080035e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e00a      	b.n	800360c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035f6:	f3af 8000 	nop.w
 80035fa:	4601      	mov	r1, r0
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	60ba      	str	r2, [r7, #8]
 8003602:	b2ca      	uxtb	r2, r1
 8003604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3301      	adds	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	dbf0      	blt.n	80035f6 <_read+0x12>
	}

return len;
 8003614:	687b      	ldr	r3, [r7, #4]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e009      	b.n	8003644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	60ba      	str	r2, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	dbf1      	blt.n	8003630 <_write+0x12>
	}
	return len;
 800364c:	687b      	ldr	r3, [r7, #4]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_close>:

int _close(int file)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
	return -1;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800367e:	605a      	str	r2, [r3, #4]
	return 0;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_isatty>:

int _isatty(int file)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
	return 1;
 8003696:	2301      	movs	r3, #1
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
	return 0;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c8:	4a14      	ldr	r2, [pc, #80]	; (800371c <_sbrk+0x5c>)
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <_sbrk+0x60>)
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <_sbrk+0x64>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <_sbrk+0x64>)
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <_sbrk+0x68>)
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <_sbrk+0x64>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036f0:	f004 fc3c 	bl	8007f6c <__errno>
 80036f4:	4603      	mov	r3, r0
 80036f6:	220c      	movs	r2, #12
 80036f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	e009      	b.n	8003714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <_sbrk+0x64>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <_sbrk+0x64>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <_sbrk+0x64>)
 8003710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20020000 	.word	0x20020000
 8003720:	00000400 	.word	0x00000400
 8003724:	20000ae8 	.word	0x20000ae8
 8003728:	20000b00 	.word	0x20000b00

0800372c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <SystemInit+0x20>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <SystemInit+0x20>)
 8003738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800373c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003788 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003754:	480d      	ldr	r0, [pc, #52]	; (800378c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003756:	490e      	ldr	r1, [pc, #56]	; (8003790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003758:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800375a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800375c:	e002      	b.n	8003764 <LoopCopyDataInit>

0800375e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800375e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003762:	3304      	adds	r3, #4

08003764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003768:	d3f9      	bcc.n	800375e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800376c:	4c0b      	ldr	r4, [pc, #44]	; (800379c <LoopFillZerobss+0x26>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003770:	e001      	b.n	8003776 <LoopFillZerobss>

08003772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003774:	3204      	adds	r2, #4

08003776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003778:	d3fb      	bcc.n	8003772 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800377a:	f7ff ffd7 	bl	800372c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377e:	f004 fbfb 	bl	8007f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003782:	f7fe fc2b 	bl	8001fdc <main>
  bx  lr    
 8003786:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800378c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003790:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003794:	0800c328 	.word	0x0800c328
  ldr r2, =_sbss
 8003798:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800379c:	20000b00 	.word	0x20000b00

080037a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a0:	e7fe      	b.n	80037a0 <ADC_IRQHandler>
	...

080037a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <HAL_Init+0x40>)
 80037ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_Init+0x40>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_Init+0x40>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_Init+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <HAL_Init+0x40>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037cc:	2003      	movs	r0, #3
 80037ce:	f000 fbb1 	bl	8003f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d2:	200f      	movs	r0, #15
 80037d4:	f000 f808 	bl	80037e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7ff fbb0 	bl	8002f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_InitTick+0x54>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_InitTick+0x58>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fbc9 	bl	8003f9e <HAL_SYSTICK_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00e      	b.n	8003834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d80a      	bhi.n	8003832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381c:	2200      	movs	r2, #0
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	f000 fb91 	bl	8003f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003828:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_InitTick+0x5c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	2000001c 	.word	0x2000001c
 8003840:	20000024 	.word	0x20000024
 8003844:	20000020 	.word	0x20000020

08003848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x24>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_IncTick+0x24>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000024 	.word	0x20000024
 800386c:	20000aec 	.word	0x20000aec

08003870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000aec 	.word	0x20000aec

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff ffee 	bl	8003870 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_Delay+0x44>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffde 	bl	8003870 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000024 	.word	0x20000024

080038d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e033      	b.n	800394e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff fb5a 	bl	8002fa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	d118      	bne.n	8003940 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003916:	f023 0302 	bic.w	r3, r3, #2
 800391a:	f043 0202 	orr.w	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f93a 	bl	8003b9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	f043 0201 	orr.w	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40
 800393e:	e001      	b.n	8003944 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x1c>
 8003970:	2302      	movs	r3, #2
 8003972:	e105      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x228>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b09      	cmp	r3, #9
 8003982:	d925      	bls.n	80039d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68d9      	ldr	r1, [r3, #12]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	3b1e      	subs	r3, #30
 800399a:	2207      	movs	r2, #7
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43da      	mvns	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	400a      	ands	r2, r1
 80039a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68d9      	ldr	r1, [r3, #12]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	4618      	mov	r0, r3
 80039bc:	4603      	mov	r3, r0
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4403      	add	r3, r0
 80039c2:	3b1e      	subs	r3, #30
 80039c4:	409a      	lsls	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	e022      	b.n	8003a16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6919      	ldr	r1, [r3, #16]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	2207      	movs	r2, #7
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	400a      	ands	r2, r1
 80039f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6919      	ldr	r1, [r3, #16]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4618      	mov	r0, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4403      	add	r3, r0
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b06      	cmp	r3, #6
 8003a1c:	d824      	bhi.n	8003a68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3b05      	subs	r3, #5
 8003a30:	221f      	movs	r2, #31
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	3b05      	subs	r3, #5
 8003a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34
 8003a66:	e04c      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	d824      	bhi.n	8003aba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b23      	subs	r3, #35	; 0x23
 8003a82:	221f      	movs	r2, #31
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43da      	mvns	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	400a      	ands	r2, r1
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3b23      	subs	r3, #35	; 0x23
 8003aac:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab8:	e023      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	3b41      	subs	r3, #65	; 0x41
 8003acc:	221f      	movs	r2, #31
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	400a      	ands	r2, r1
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	3b41      	subs	r3, #65	; 0x41
 8003af6:	fa00 f203 	lsl.w	r2, r0, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <HAL_ADC_ConfigChannel+0x234>)
 8003b04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <HAL_ADC_ConfigChannel+0x238>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d109      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x1cc>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b12      	cmp	r3, #18
 8003b16:	d105      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <HAL_ADC_ConfigChannel+0x238>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d123      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x21e>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d003      	beq.n	8003b3e <HAL_ADC_ConfigChannel+0x1e6>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b11      	cmp	r3, #17
 8003b3c:	d11b      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d111      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b52:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <HAL_ADC_ConfigChannel+0x23c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <HAL_ADC_ConfigChannel+0x240>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	0c9a      	lsrs	r2, r3, #18
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b68:	e002      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f9      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40012300 	.word	0x40012300
 8003b90:	40012000 	.word	0x40012000
 8003b94:	2000001c 	.word	0x2000001c
 8003b98:	431bde83 	.word	0x431bde83

08003b9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ba4:	4b79      	ldr	r3, [pc, #484]	; (8003d8c <ADC_Init+0x1f0>)
 8003ba6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6899      	ldr	r1, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <ADC_Init+0x1f4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6899      	ldr	r1, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6899      	ldr	r1, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	e00f      	b.n	8003c9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0202 	bic.w	r2, r2, #2
 8003ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7e1b      	ldrb	r3, [r3, #24]
 8003cb4:	005a      	lsls	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01b      	beq.n	8003d00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ce6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	035a      	lsls	r2, r3, #13
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	e007      	b.n	8003d10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	051a      	lsls	r2, r3, #20
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6899      	ldr	r1, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d52:	025a      	lsls	r2, r3, #9
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6899      	ldr	r1, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	029a      	lsls	r2, r3, #10
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	40012300 	.word	0x40012300
 8003d90:	0f000001 	.word	0x0f000001

08003d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003db0:	4013      	ands	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc6:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	60d3      	str	r3, [r2, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <__NVIC_GetPriorityGrouping+0x18>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	f003 0307 	and.w	r3, r3, #7
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	db0b      	blt.n	8003e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	f003 021f 	and.w	r2, r3, #31
 8003e10:	4907      	ldr	r1, [pc, #28]	; (8003e30 <__NVIC_EnableIRQ+0x38>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2001      	movs	r0, #1
 8003e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e100 	.word	0xe000e100

08003e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	db0a      	blt.n	8003e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	490c      	ldr	r1, [pc, #48]	; (8003e80 <__NVIC_SetPriority+0x4c>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	0112      	lsls	r2, r2, #4
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	440b      	add	r3, r1
 8003e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e5c:	e00a      	b.n	8003e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4908      	ldr	r1, [pc, #32]	; (8003e84 <__NVIC_SetPriority+0x50>)
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	0112      	lsls	r2, r2, #4
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	440b      	add	r3, r1
 8003e72:	761a      	strb	r2, [r3, #24]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000e100 	.word	0xe000e100
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	bf28      	it	cs
 8003ea6:	2304      	movcs	r3, #4
 8003ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d902      	bls.n	8003eb8 <NVIC_EncodePriority+0x30>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3b03      	subs	r3, #3
 8003eb6:	e000      	b.n	8003eba <NVIC_EncodePriority+0x32>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	401a      	ands	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eda:	43d9      	mvns	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	4313      	orrs	r3, r2
         );
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f00:	d301      	bcc.n	8003f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f02:	2301      	movs	r3, #1
 8003f04:	e00f      	b.n	8003f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <SysTick_Config+0x40>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f0e:	210f      	movs	r1, #15
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	f7ff ff8e 	bl	8003e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <SysTick_Config+0x40>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <SysTick_Config+0x40>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000e010 	.word	0xe000e010

08003f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff29 	bl	8003d94 <__NVIC_SetPriorityGrouping>
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	4603      	mov	r3, r0
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f5c:	f7ff ff3e 	bl	8003ddc <__NVIC_GetPriorityGrouping>
 8003f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff8e 	bl	8003e88 <NVIC_EncodePriority>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff5d 	bl	8003e34 <__NVIC_SetPriority>
}
 8003f7a:	bf00      	nop
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff31 	bl	8003df8 <__NVIC_EnableIRQ>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ffa2 	bl	8003ef0 <SysTick_Config>
 8003fac:	4603      	mov	r3, r0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fc4:	f7ff fc54 	bl	8003870 <HAL_GetTick>
 8003fc8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d008      	beq.n	8003fe8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e052      	b.n	800408e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0216 	bic.w	r2, r2, #22
 8003ff6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004006:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <HAL_DMA_Abort+0x62>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0208 	bic.w	r2, r2, #8
 8004026:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004038:	e013      	b.n	8004062 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800403a:	f7ff fc19 	bl	8003870 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b05      	cmp	r3, #5
 8004046:	d90c      	bls.n	8004062 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2203      	movs	r2, #3
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e015      	b.n	800408e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e4      	bne.n	800403a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	223f      	movs	r2, #63	; 0x3f
 8004076:	409a      	lsls	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d004      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2280      	movs	r2, #128	; 0x80
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e00c      	b.n	80040ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2205      	movs	r2, #5
 80040b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	e16b      	b.n	80043d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f8:	2201      	movs	r2, #1
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	429a      	cmp	r2, r3
 8004112:	f040 815a 	bne.w	80043ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b01      	cmp	r3, #1
 8004120:	d005      	beq.n	800412e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800412a:	2b02      	cmp	r3, #2
 800412c:	d130      	bne.n	8004190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	2203      	movs	r2, #3
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4013      	ands	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004164:	2201      	movs	r2, #1
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 0201 	and.w	r2, r3, #1
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b03      	cmp	r3, #3
 800419a:	d017      	beq.n	80041cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	2203      	movs	r2, #3
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d123      	bne.n	8004220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	08da      	lsrs	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3208      	adds	r2, #8
 80041e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	220f      	movs	r2, #15
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	08da      	lsrs	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3208      	adds	r2, #8
 800421a:	69b9      	ldr	r1, [r7, #24]
 800421c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	2203      	movs	r2, #3
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0203 	and.w	r2, r3, #3
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80b4 	beq.w	80043ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	4b60      	ldr	r3, [pc, #384]	; (80043e8 <HAL_GPIO_Init+0x30c>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	4a5f      	ldr	r2, [pc, #380]	; (80043e8 <HAL_GPIO_Init+0x30c>)
 800426c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004270:	6453      	str	r3, [r2, #68]	; 0x44
 8004272:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_GPIO_Init+0x30c>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800427e:	4a5b      	ldr	r2, [pc, #364]	; (80043ec <HAL_GPIO_Init+0x310>)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3302      	adds	r3, #2
 8004286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a52      	ldr	r2, [pc, #328]	; (80043f0 <HAL_GPIO_Init+0x314>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d02b      	beq.n	8004302 <HAL_GPIO_Init+0x226>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a51      	ldr	r2, [pc, #324]	; (80043f4 <HAL_GPIO_Init+0x318>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d025      	beq.n	80042fe <HAL_GPIO_Init+0x222>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a50      	ldr	r2, [pc, #320]	; (80043f8 <HAL_GPIO_Init+0x31c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01f      	beq.n	80042fa <HAL_GPIO_Init+0x21e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4f      	ldr	r2, [pc, #316]	; (80043fc <HAL_GPIO_Init+0x320>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d019      	beq.n	80042f6 <HAL_GPIO_Init+0x21a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4e      	ldr	r2, [pc, #312]	; (8004400 <HAL_GPIO_Init+0x324>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_GPIO_Init+0x216>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a4d      	ldr	r2, [pc, #308]	; (8004404 <HAL_GPIO_Init+0x328>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00d      	beq.n	80042ee <HAL_GPIO_Init+0x212>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a4c      	ldr	r2, [pc, #304]	; (8004408 <HAL_GPIO_Init+0x32c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <HAL_GPIO_Init+0x20e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a4b      	ldr	r2, [pc, #300]	; (800440c <HAL_GPIO_Init+0x330>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d101      	bne.n	80042e6 <HAL_GPIO_Init+0x20a>
 80042e2:	2307      	movs	r3, #7
 80042e4:	e00e      	b.n	8004304 <HAL_GPIO_Init+0x228>
 80042e6:	2308      	movs	r3, #8
 80042e8:	e00c      	b.n	8004304 <HAL_GPIO_Init+0x228>
 80042ea:	2306      	movs	r3, #6
 80042ec:	e00a      	b.n	8004304 <HAL_GPIO_Init+0x228>
 80042ee:	2305      	movs	r3, #5
 80042f0:	e008      	b.n	8004304 <HAL_GPIO_Init+0x228>
 80042f2:	2304      	movs	r3, #4
 80042f4:	e006      	b.n	8004304 <HAL_GPIO_Init+0x228>
 80042f6:	2303      	movs	r3, #3
 80042f8:	e004      	b.n	8004304 <HAL_GPIO_Init+0x228>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e002      	b.n	8004304 <HAL_GPIO_Init+0x228>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <HAL_GPIO_Init+0x228>
 8004302:	2300      	movs	r3, #0
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	f002 0203 	and.w	r2, r2, #3
 800430a:	0092      	lsls	r2, r2, #2
 800430c:	4093      	lsls	r3, r2
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4313      	orrs	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004314:	4935      	ldr	r1, [pc, #212]	; (80043ec <HAL_GPIO_Init+0x310>)
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	089b      	lsrs	r3, r3, #2
 800431a:	3302      	adds	r3, #2
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004322:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_GPIO_Init+0x334>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	43db      	mvns	r3, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4013      	ands	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004346:	4a32      	ldr	r2, [pc, #200]	; (8004410 <HAL_GPIO_Init+0x334>)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800434c:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_GPIO_Init+0x334>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	43db      	mvns	r3, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004370:	4a27      	ldr	r2, [pc, #156]	; (8004410 <HAL_GPIO_Init+0x334>)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004376:	4b26      	ldr	r3, [pc, #152]	; (8004410 <HAL_GPIO_Init+0x334>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800439a:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_GPIO_Init+0x334>)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_GPIO_Init+0x334>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043c4:	4a12      	ldr	r2, [pc, #72]	; (8004410 <HAL_GPIO_Init+0x334>)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3301      	adds	r3, #1
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b0f      	cmp	r3, #15
 80043d4:	f67f ae90 	bls.w	80040f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	3724      	adds	r7, #36	; 0x24
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40013800 	.word	0x40013800
 80043f0:	40020000 	.word	0x40020000
 80043f4:	40020400 	.word	0x40020400
 80043f8:	40020800 	.word	0x40020800
 80043fc:	40020c00 	.word	0x40020c00
 8004400:	40021000 	.word	0x40021000
 8004404:	40021400 	.word	0x40021400
 8004408:	40021800 	.word	0x40021800
 800440c:	40021c00 	.word	0x40021c00
 8004410:	40013c00 	.word	0x40013c00

08004414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	807b      	strh	r3, [r7, #2]
 8004420:	4613      	mov	r3, r2
 8004422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004424:	787b      	ldrb	r3, [r7, #1]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800442a:	887a      	ldrh	r2, [r7, #2]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004430:	e003      	b.n	800443a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004432:	887b      	ldrh	r3, [r7, #2]
 8004434:	041a      	lsls	r2, r3, #16
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	619a      	str	r2, [r3, #24]
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004458:	887a      	ldrh	r2, [r7, #2]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4013      	ands	r3, r2
 800445e:	041a      	lsls	r2, r3, #16
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	43d9      	mvns	r1, r3
 8004464:	887b      	ldrh	r3, [r7, #2]
 8004466:	400b      	ands	r3, r1
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	619a      	str	r2, [r3, #24]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd fa0c 	bl	80018b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40013c00 	.word	0x40013c00

080044ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e12b      	b.n	8004716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fe fdac 	bl	8003030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800450e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004510:	f001 fc24 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8004514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4a81      	ldr	r2, [pc, #516]	; (8004720 <HAL_I2C_Init+0x274>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d807      	bhi.n	8004530 <HAL_I2C_Init+0x84>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a80      	ldr	r2, [pc, #512]	; (8004724 <HAL_I2C_Init+0x278>)
 8004524:	4293      	cmp	r3, r2
 8004526:	bf94      	ite	ls
 8004528:	2301      	movls	r3, #1
 800452a:	2300      	movhi	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e006      	b.n	800453e <HAL_I2C_Init+0x92>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a7d      	ldr	r2, [pc, #500]	; (8004728 <HAL_I2C_Init+0x27c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	bf94      	ite	ls
 8004538:	2301      	movls	r3, #1
 800453a:	2300      	movhi	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e0e7      	b.n	8004716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a78      	ldr	r2, [pc, #480]	; (800472c <HAL_I2C_Init+0x280>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	0c9b      	lsrs	r3, r3, #18
 8004550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a6a      	ldr	r2, [pc, #424]	; (8004720 <HAL_I2C_Init+0x274>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d802      	bhi.n	8004580 <HAL_I2C_Init+0xd4>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	3301      	adds	r3, #1
 800457e:	e009      	b.n	8004594 <HAL_I2C_Init+0xe8>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	4a69      	ldr	r2, [pc, #420]	; (8004730 <HAL_I2C_Init+0x284>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	099b      	lsrs	r3, r3, #6
 8004592:	3301      	adds	r3, #1
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	430b      	orrs	r3, r1
 800459a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	495c      	ldr	r1, [pc, #368]	; (8004720 <HAL_I2C_Init+0x274>)
 80045b0:	428b      	cmp	r3, r1
 80045b2:	d819      	bhi.n	80045e8 <HAL_I2C_Init+0x13c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1e59      	subs	r1, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fbb1 f3f3 	udiv	r3, r1, r3
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045c8:	400b      	ands	r3, r1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_I2C_Init+0x138>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1e59      	subs	r1, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045dc:	3301      	adds	r3, #1
 80045de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e2:	e051      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 80045e4:	2304      	movs	r3, #4
 80045e6:	e04f      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d111      	bne.n	8004614 <HAL_I2C_Init+0x168>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e58      	subs	r0, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	440b      	add	r3, r1
 80045fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004602:	3301      	adds	r3, #1
 8004604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e012      	b.n	800463a <HAL_I2C_Init+0x18e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	0099      	lsls	r1, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	fbb0 f3f3 	udiv	r3, r0, r3
 800462a:	3301      	adds	r3, #1
 800462c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_I2C_Init+0x196>
 800463e:	2301      	movs	r3, #1
 8004640:	e022      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <HAL_I2C_Init+0x1bc>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1e58      	subs	r0, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	440b      	add	r3, r1
 8004658:	fbb0 f3f3 	udiv	r3, r0, r3
 800465c:	3301      	adds	r3, #1
 800465e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004666:	e00f      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1e58      	subs	r0, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	0099      	lsls	r1, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	6809      	ldr	r1, [r1, #0]
 800468c:	4313      	orrs	r3, r2
 800468e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6911      	ldr	r1, [r2, #16]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68d2      	ldr	r2, [r2, #12]
 80046c2:	4311      	orrs	r1, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	000186a0 	.word	0x000186a0
 8004724:	001e847f 	.word	0x001e847f
 8004728:	003d08ff 	.word	0x003d08ff
 800472c:	431bde83 	.word	0x431bde83
 8004730:	10624dd3 	.word	0x10624dd3

08004734 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	4608      	mov	r0, r1
 800473e:	4611      	mov	r1, r2
 8004740:	461a      	mov	r2, r3
 8004742:	4603      	mov	r3, r0
 8004744:	817b      	strh	r3, [r7, #10]
 8004746:	460b      	mov	r3, r1
 8004748:	813b      	strh	r3, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800474e:	f7ff f88f 	bl	8003870 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b20      	cmp	r3, #32
 800475e:	f040 80d9 	bne.w	8004914 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	2319      	movs	r3, #25
 8004768:	2201      	movs	r2, #1
 800476a:	496d      	ldr	r1, [pc, #436]	; (8004920 <HAL_I2C_Mem_Write+0x1ec>)
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fc7f 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
 800477a:	e0cc      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_I2C_Mem_Write+0x56>
 8004786:	2302      	movs	r3, #2
 8004788:	e0c5      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	d007      	beq.n	80047b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2221      	movs	r2, #33	; 0x21
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2240      	movs	r2, #64	; 0x40
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a3a      	ldr	r2, [r7, #32]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a4d      	ldr	r2, [pc, #308]	; (8004924 <HAL_I2C_Mem_Write+0x1f0>)
 80047f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f2:	88f8      	ldrh	r0, [r7, #6]
 80047f4:	893a      	ldrh	r2, [r7, #8]
 80047f6:	8979      	ldrh	r1, [r7, #10]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	4603      	mov	r3, r0
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fab6 	bl	8004d74 <I2C_RequestMemoryWrite>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d052      	beq.n	80048b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e081      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fd00 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00d      	beq.n	800483e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	2b04      	cmp	r3, #4
 8004828:	d107      	bne.n	800483a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004838:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e06b      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11b      	bne.n	80048b4 <HAL_I2C_Mem_Write+0x180>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004880:	2b00      	cmp	r3, #0
 8004882:	d017      	beq.n	80048b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1aa      	bne.n	8004812 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fcec 	bl	800529e <I2C_WaitOnBTFFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d107      	bne.n	80048e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e016      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	e000      	b.n	8004916 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
  }
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	00100002 	.word	0x00100002
 8004924:	ffff0000 	.word	0xffff0000

08004928 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08c      	sub	sp, #48	; 0x30
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	461a      	mov	r2, r3
 8004936:	4603      	mov	r3, r0
 8004938:	817b      	strh	r3, [r7, #10]
 800493a:	460b      	mov	r3, r1
 800493c:	813b      	strh	r3, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004942:	f7fe ff95 	bl	8003870 <HAL_GetTick>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	f040 8208 	bne.w	8004d66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2319      	movs	r3, #25
 800495c:	2201      	movs	r2, #1
 800495e:	497b      	ldr	r1, [pc, #492]	; (8004b4c <HAL_I2C_Mem_Read+0x224>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fb85 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
 800496e:	e1fb      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_I2C_Mem_Read+0x56>
 800497a:	2302      	movs	r3, #2
 800497c:	e1f4      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d007      	beq.n	80049a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2222      	movs	r2, #34	; 0x22
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2240      	movs	r2, #64	; 0x40
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a5b      	ldr	r2, [pc, #364]	; (8004b50 <HAL_I2C_Mem_Read+0x228>)
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049e6:	88f8      	ldrh	r0, [r7, #6]
 80049e8:	893a      	ldrh	r2, [r7, #8]
 80049ea:	8979      	ldrh	r1, [r7, #10]
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4603      	mov	r3, r0
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fa52 	bl	8004ea0 <I2C_RequestMemoryRead>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1b0      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d113      	bne.n	8004a36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	623b      	str	r3, [r7, #32]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	623b      	str	r3, [r7, #32]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e184      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d11b      	bne.n	8004a76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e164      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d11b      	bne.n	8004ab6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	e144      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004acc:	e138      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	f200 80f1 	bhi.w	8004cba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d123      	bne.n	8004b28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fc1b 	bl	8005320 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e139      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b26:	e10b      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d14e      	bne.n	8004bce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	2200      	movs	r2, #0
 8004b38:	4906      	ldr	r1, [pc, #24]	; (8004b54 <HAL_I2C_Mem_Read+0x22c>)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fa98 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e10e      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
 8004b4a:	bf00      	nop
 8004b4c:	00100002 	.word	0x00100002
 8004b50:	ffff0000 	.word	0xffff0000
 8004b54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bcc:	e0b8      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4966      	ldr	r1, [pc, #408]	; (8004d70 <HAL_I2C_Mem_Read+0x448>)
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fa49 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0bf      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2200      	movs	r2, #0
 8004c32:	494f      	ldr	r1, [pc, #316]	; (8004d70 <HAL_I2C_Mem_Read+0x448>)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fa1b 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e091      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb8:	e042      	b.n	8004d40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fb2e 	bl	8005320 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e04c      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d118      	bne.n	8004d40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f47f aec2 	bne.w	8004ace <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e000      	b.n	8004d68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
  }
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	00010004 	.word	0x00010004

08004d74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	817b      	strh	r3, [r7, #10]
 8004d86:	460b      	mov	r3, r1
 8004d88:	813b      	strh	r3, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f960 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc4:	d103      	bne.n	8004dce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e05f      	b.n	8004e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dd2:	897b      	ldrh	r3, [r7, #10]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	492d      	ldr	r1, [pc, #180]	; (8004e9c <I2C_RequestMemoryWrite+0x128>)
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f998 	bl	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e04c      	b.n	8004e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	6a39      	ldr	r1, [r7, #32]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fa02 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d107      	bne.n	8004e36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e02b      	b.n	8004e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e40:	893b      	ldrh	r3, [r7, #8]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]
 8004e4a:	e021      	b.n	8004e90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e4c:	893b      	ldrh	r3, [r7, #8]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	6a39      	ldr	r1, [r7, #32]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f9dc 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d107      	bne.n	8004e82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e005      	b.n	8004e92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e86:	893b      	ldrh	r3, [r7, #8]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	00010002 	.word	0x00010002

08004ea0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	4608      	mov	r0, r1
 8004eaa:	4611      	mov	r1, r2
 8004eac:	461a      	mov	r2, r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	817b      	strh	r3, [r7, #10]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	813b      	strh	r3, [r7, #8]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8c2 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f00:	d103      	bne.n	8004f0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0aa      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	6a3a      	ldr	r2, [r7, #32]
 8004f22:	4952      	ldr	r1, [pc, #328]	; (800506c <I2C_RequestMemoryRead+0x1cc>)
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f8fa 	bl	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e097      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	6a39      	ldr	r1, [r7, #32]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f964 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d107      	bne.n	8004f72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e076      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d105      	bne.n	8004f88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f7c:	893b      	ldrh	r3, [r7, #8]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	611a      	str	r2, [r3, #16]
 8004f86:	e021      	b.n	8004fcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f88:	893b      	ldrh	r3, [r7, #8]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f98:	6a39      	ldr	r1, [r7, #32]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f93e 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d107      	bne.n	8004fbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e050      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc2:	893b      	ldrh	r3, [r7, #8]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fce:	6a39      	ldr	r1, [r7, #32]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f923 	bl	800521c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00d      	beq.n	8004ff8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d107      	bne.n	8004ff4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e035      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005006:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2200      	movs	r2, #0
 8005010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f82b 	bl	8005070 <I2C_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502e:	d103      	bne.n	8005038 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e013      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800503c:	897b      	ldrh	r3, [r7, #10]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	6a3a      	ldr	r2, [r7, #32]
 8005050:	4906      	ldr	r1, [pc, #24]	; (800506c <I2C_RequestMemoryRead+0x1cc>)
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f863 	bl	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	00010002 	.word	0x00010002

08005070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005080:	e025      	b.n	80050ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005088:	d021      	beq.n	80050ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508a:	f7fe fbf1 	bl	8003870 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d302      	bcc.n	80050a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d116      	bne.n	80050ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f043 0220 	orr.w	r2, r3, #32
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e023      	b.n	8005116 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d10d      	bne.n	80050f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	43da      	mvns	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	e00c      	b.n	800510e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	43da      	mvns	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4013      	ands	r3, r2
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	429a      	cmp	r2, r3
 8005112:	d0b6      	beq.n	8005082 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800512c:	e051      	b.n	80051d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513c:	d123      	bne.n	8005186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005156:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0204 	orr.w	r2, r3, #4
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e046      	b.n	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d021      	beq.n	80051d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7fe fb6f 	bl	8003870 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d116      	bne.n	80051d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e020      	b.n	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d10c      	bne.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	43da      	mvns	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf14      	ite	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	2300      	moveq	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	e00b      	b.n	800520e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	43da      	mvns	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d18d      	bne.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005228:	e02d      	b.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f8ce 	bl	80053cc <I2C_IsAcknowledgeFailed>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e02d      	b.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d021      	beq.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fe fb15 	bl	8003870 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d116      	bne.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e007      	b.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d1ca      	bne.n	800522a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052aa:	e02d      	b.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f88d 	bl	80053cc <I2C_IsAcknowledgeFailed>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e02d      	b.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d021      	beq.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c4:	f7fe fad4 	bl	8003870 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d302      	bcc.n	80052da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d116      	bne.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e007      	b.n	8005318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d1ca      	bne.n	80052ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800532c:	e042      	b.n	80053b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b10      	cmp	r3, #16
 800533a:	d119      	bne.n	8005370 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0210 	mvn.w	r2, #16
 8005344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e029      	b.n	80053c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005370:	f7fe fa7e 	bl	8003870 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d116      	bne.n	80053b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f043 0220 	orr.w	r2, r3, #32
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e007      	b.n	80053c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d1b5      	bne.n	800532e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e2:	d11b      	bne.n	800541c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	f043 0204 	orr.w	r2, r3, #4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_PWR_EnableBkUpAccess+0x20>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HAL_PWR_EnableBkUpAccess+0x24>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800543e:	687b      	ldr	r3, [r7, #4]
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	420e0020 	.word	0x420e0020
 8005450:	40007000 	.word	0x40007000

08005454 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <HAL_PWR_DisableBkUpAccess+0x20>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005466:	687b      	ldr	r3, [r7, #4]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	420e0020 	.word	0x420e0020
 8005478:	40007000 	.word	0x40007000

0800547c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e267      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d075      	beq.n	8005586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800549a:	4b88      	ldr	r3, [pc, #544]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d00c      	beq.n	80054c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a6:	4b85      	ldr	r3, [pc, #532]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d112      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b2:	4b82      	ldr	r3, [pc, #520]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054be:	d10b      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c0:	4b7e      	ldr	r3, [pc, #504]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05b      	beq.n	8005584 <HAL_RCC_OscConfig+0x108>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d157      	bne.n	8005584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e242      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e0:	d106      	bne.n	80054f0 <HAL_RCC_OscConfig+0x74>
 80054e2:	4b76      	ldr	r3, [pc, #472]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a75      	ldr	r2, [pc, #468]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e01d      	b.n	800552c <HAL_RCC_OscConfig+0xb0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f8:	d10c      	bne.n	8005514 <HAL_RCC_OscConfig+0x98>
 80054fa:	4b70      	ldr	r3, [pc, #448]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a6f      	ldr	r2, [pc, #444]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4b6d      	ldr	r3, [pc, #436]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a6c      	ldr	r2, [pc, #432]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800550c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	e00b      	b.n	800552c <HAL_RCC_OscConfig+0xb0>
 8005514:	4b69      	ldr	r3, [pc, #420]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a68      	ldr	r2, [pc, #416]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800551a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	4b66      	ldr	r3, [pc, #408]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a65      	ldr	r2, [pc, #404]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800552a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d013      	beq.n	800555c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005534:	f7fe f99c 	bl	8003870 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800553c:	f7fe f998 	bl	8003870 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b64      	cmp	r3, #100	; 0x64
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e207      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	4b5b      	ldr	r3, [pc, #364]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0xc0>
 800555a:	e014      	b.n	8005586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7fe f988 	bl	8003870 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005564:	f7fe f984 	bl	8003870 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b64      	cmp	r3, #100	; 0x64
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e1f3      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005576:	4b51      	ldr	r3, [pc, #324]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0xe8>
 8005582:	e000      	b.n	8005586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d063      	beq.n	800565a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005592:	4b4a      	ldr	r3, [pc, #296]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559e:	4b47      	ldr	r3, [pc, #284]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d11c      	bne.n	80055e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055aa:	4b44      	ldr	r3, [pc, #272]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d116      	bne.n	80055e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b6:	4b41      	ldr	r3, [pc, #260]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_RCC_OscConfig+0x152>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e1c7      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4937      	ldr	r1, [pc, #220]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e2:	e03a      	b.n	800565a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ec:	4b34      	ldr	r3, [pc, #208]	; (80056c0 <HAL_RCC_OscConfig+0x244>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f2:	f7fe f93d 	bl	8003870 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fa:	f7fe f939 	bl	8003870 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e1a8      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560c:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005618:	4b28      	ldr	r3, [pc, #160]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4925      	ldr	r1, [pc, #148]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
 800562c:	e015      	b.n	800565a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800562e:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <HAL_RCC_OscConfig+0x244>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fe f91c 	bl	8003870 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563c:	f7fe f918 	bl	8003870 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e187      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564e:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d036      	beq.n	80056d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <HAL_RCC_OscConfig+0x248>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fe f8fc 	bl	8003870 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567c:	f7fe f8f8 	bl	8003870 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e167      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x200>
 800569a:	e01b      	b.n	80056d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <HAL_RCC_OscConfig+0x248>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a2:	f7fe f8e5 	bl	8003870 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a8:	e00e      	b.n	80056c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056aa:	f7fe f8e1 	bl	8003870 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d907      	bls.n	80056c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e150      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
 80056bc:	40023800 	.word	0x40023800
 80056c0:	42470000 	.word	0x42470000
 80056c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c8:	4b88      	ldr	r3, [pc, #544]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80056ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ea      	bne.n	80056aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8097 	beq.w	8005810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e6:	4b81      	ldr	r3, [pc, #516]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	4b7d      	ldr	r3, [pc, #500]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	4a7c      	ldr	r2, [pc, #496]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	; 0x40
 8005702:	4b7a      	ldr	r3, [pc, #488]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	4b77      	ldr	r3, [pc, #476]	; (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d118      	bne.n	8005750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571e:	4b74      	ldr	r3, [pc, #464]	; (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a73      	ldr	r2, [pc, #460]	; (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800572a:	f7fe f8a1 	bl	8003870 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005732:	f7fe f89d 	bl	8003870 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e10c      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	4b6a      	ldr	r3, [pc, #424]	; (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x2ea>
 8005758:	4b64      	ldr	r3, [pc, #400]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4a63      	ldr	r2, [pc, #396]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6713      	str	r3, [r2, #112]	; 0x70
 8005764:	e01c      	b.n	80057a0 <HAL_RCC_OscConfig+0x324>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b05      	cmp	r3, #5
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0x30c>
 800576e:	4b5f      	ldr	r3, [pc, #380]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a5e      	ldr	r2, [pc, #376]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
 800577a:	4b5c      	ldr	r3, [pc, #368]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a5b      	ldr	r2, [pc, #364]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
 8005786:	e00b      	b.n	80057a0 <HAL_RCC_OscConfig+0x324>
 8005788:	4b58      	ldr	r3, [pc, #352]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578c:	4a57      	ldr	r2, [pc, #348]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	6713      	str	r3, [r2, #112]	; 0x70
 8005794:	4b55      	ldr	r3, [pc, #340]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	4a54      	ldr	r2, [pc, #336]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800579a:	f023 0304 	bic.w	r3, r3, #4
 800579e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fe f862 	bl	8003870 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ae:	e00a      	b.n	80057c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fe f85e 	bl	8003870 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e0cb      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c6:	4b49      	ldr	r3, [pc, #292]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ee      	beq.n	80057b0 <HAL_RCC_OscConfig+0x334>
 80057d2:	e014      	b.n	80057fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d4:	f7fe f84c 	bl	8003870 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057da:	e00a      	b.n	80057f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057dc:	f7fe f848 	bl	8003870 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e0b5      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f2:	4b3e      	ldr	r3, [pc, #248]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1ee      	bne.n	80057dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005804:	4b39      	ldr	r3, [pc, #228]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	4a38      	ldr	r2, [pc, #224]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80a1 	beq.w	800595c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800581a:	4b34      	ldr	r3, [pc, #208]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	2b08      	cmp	r3, #8
 8005824:	d05c      	beq.n	80058e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d141      	bne.n	80058b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582e:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <HAL_RCC_OscConfig+0x478>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005834:	f7fe f81c 	bl	8003870 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583c:	f7fe f818 	bl	8003870 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e087      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584e:	4b27      	ldr	r3, [pc, #156]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	3b01      	subs	r3, #1
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	061b      	lsls	r3, r3, #24
 800587e:	491b      	ldr	r1, [pc, #108]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005884:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <HAL_RCC_OscConfig+0x478>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588a:	f7fd fff1 	bl	8003870 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005892:	f7fd ffed 	bl	8003870 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e05c      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCC_OscConfig+0x416>
 80058b0:	e054      	b.n	800595c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <HAL_RCC_OscConfig+0x478>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fd ffda 	bl	8003870 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c0:	f7fd ffd6 	bl	8003870 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e045      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x444>
 80058de:	e03d      	b.n	800595c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e038      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
 80058ec:	40023800 	.word	0x40023800
 80058f0:	40007000 	.word	0x40007000
 80058f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058f8:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <HAL_RCC_OscConfig+0x4ec>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d028      	beq.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005910:	429a      	cmp	r2, r3
 8005912:	d121      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d11a      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800592e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005930:	4293      	cmp	r3, r2
 8005932:	d111      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	3b01      	subs	r3, #1
 8005942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d107      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40023800 	.word	0x40023800

0800596c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0cc      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005980:	4b68      	ldr	r3, [pc, #416]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d90c      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b65      	ldr	r3, [pc, #404]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b63      	ldr	r3, [pc, #396]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0b8      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d020      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c0:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a58      	ldr	r2, [pc, #352]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d8:	4b53      	ldr	r3, [pc, #332]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4a52      	ldr	r2, [pc, #328]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e4:	4b50      	ldr	r3, [pc, #320]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	494d      	ldr	r1, [pc, #308]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d044      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0a:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d119      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e07f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d003      	beq.n	8005a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d107      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2a:	4b3f      	ldr	r3, [pc, #252]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e06f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3a:	4b3b      	ldr	r3, [pc, #236]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e067      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a4a:	4b37      	ldr	r3, [pc, #220]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f023 0203 	bic.w	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4934      	ldr	r1, [pc, #208]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a5c:	f7fd ff08 	bl	8003870 <HAL_GetTick>
 8005a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a62:	e00a      	b.n	8005a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a64:	f7fd ff04 	bl	8003870 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e04f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a7a:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 020c 	and.w	r2, r3, #12
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d1eb      	bne.n	8005a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a8c:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d20c      	bcs.n	8005ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9a:	4b22      	ldr	r3, [pc, #136]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e032      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac0:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4916      	ldr	r1, [pc, #88]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ade:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	490e      	ldr	r1, [pc, #56]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005af2:	f000 f821 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	490a      	ldr	r1, [pc, #40]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005b04:	5ccb      	ldrb	r3, [r1, r3]
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <HAL_RCC_ClockConfig+0x1c8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fd fe68 	bl	80037e8 <HAL_InitTick>

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40023c00 	.word	0x40023c00
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	0800beb0 	.word	0x0800beb0
 8005b30:	2000001c 	.word	0x2000001c
 8005b34:	20000020 	.word	0x20000020

08005b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b3c:	b094      	sub	sp, #80	; 0x50
 8005b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	647b      	str	r3, [r7, #68]	; 0x44
 8005b44:	2300      	movs	r3, #0
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b48:	2300      	movs	r3, #0
 8005b4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b50:	4b79      	ldr	r3, [pc, #484]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 030c 	and.w	r3, r3, #12
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d00d      	beq.n	8005b78 <HAL_RCC_GetSysClockFreq+0x40>
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	f200 80e1 	bhi.w	8005d24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x34>
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d003      	beq.n	8005b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b6a:	e0db      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b6c:	4b73      	ldr	r3, [pc, #460]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b70:	e0db      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b72:	4b73      	ldr	r3, [pc, #460]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b76:	e0d8      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b78:	4b6f      	ldr	r3, [pc, #444]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b82:	4b6d      	ldr	r3, [pc, #436]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d063      	beq.n	8005c56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b8e:	4b6a      	ldr	r3, [pc, #424]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	099b      	lsrs	r3, r3, #6
 8005b94:	2200      	movs	r2, #0
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005baa:	4622      	mov	r2, r4
 8005bac:	462b      	mov	r3, r5
 8005bae:	f04f 0000 	mov.w	r0, #0
 8005bb2:	f04f 0100 	mov.w	r1, #0
 8005bb6:	0159      	lsls	r1, r3, #5
 8005bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bbc:	0150      	lsls	r0, r2, #5
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	1a51      	subs	r1, r2, r1
 8005bc6:	6139      	str	r1, [r7, #16]
 8005bc8:	4629      	mov	r1, r5
 8005bca:	eb63 0301 	sbc.w	r3, r3, r1
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bdc:	4659      	mov	r1, fp
 8005bde:	018b      	lsls	r3, r1, #6
 8005be0:	4651      	mov	r1, sl
 8005be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005be6:	4651      	mov	r1, sl
 8005be8:	018a      	lsls	r2, r1, #6
 8005bea:	4651      	mov	r1, sl
 8005bec:	ebb2 0801 	subs.w	r8, r2, r1
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	eb63 0901 	sbc.w	r9, r3, r1
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c0a:	4690      	mov	r8, r2
 8005c0c:	4699      	mov	r9, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	eb18 0303 	adds.w	r3, r8, r3
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	462b      	mov	r3, r5
 8005c18:	eb49 0303 	adc.w	r3, r9, r3
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	024b      	lsls	r3, r1, #9
 8005c2e:	4621      	mov	r1, r4
 8005c30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c34:	4621      	mov	r1, r4
 8005c36:	024a      	lsls	r2, r1, #9
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3e:	2200      	movs	r2, #0
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c48:	f7fa fffe 	bl	8000c48 <__aeabi_uldivmod>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4613      	mov	r3, r2
 8005c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c54:	e058      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c56:	4b38      	ldr	r3, [pc, #224]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	099b      	lsrs	r3, r3, #6
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	4611      	mov	r1, r2
 8005c62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c66:	623b      	str	r3, [r7, #32]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	f04f 0000 	mov.w	r0, #0
 8005c78:	f04f 0100 	mov.w	r1, #0
 8005c7c:	0159      	lsls	r1, r3, #5
 8005c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c82:	0150      	lsls	r0, r2, #5
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4641      	mov	r1, r8
 8005c8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c8e:	4649      	mov	r1, r9
 8005c90:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ca0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ca4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ca8:	ebb2 040a 	subs.w	r4, r2, sl
 8005cac:	eb63 050b 	sbc.w	r5, r3, fp
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	00eb      	lsls	r3, r5, #3
 8005cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cbe:	00e2      	lsls	r2, r4, #3
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	461d      	mov	r5, r3
 8005cc4:	4643      	mov	r3, r8
 8005cc6:	18e3      	adds	r3, r4, r3
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	464b      	mov	r3, r9
 8005ccc:	eb45 0303 	adc.w	r3, r5, r3
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cde:	4629      	mov	r1, r5
 8005ce0:	028b      	lsls	r3, r1, #10
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ce8:	4621      	mov	r1, r4
 8005cea:	028a      	lsls	r2, r1, #10
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	61fa      	str	r2, [r7, #28]
 8005cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cfc:	f7fa ffa4 	bl	8000c48 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4613      	mov	r3, r2
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	3301      	adds	r3, #1
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d22:	e002      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3750      	adds	r7, #80	; 0x50
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	00f42400 	.word	0x00f42400
 8005d40:	007a1200 	.word	0x007a1200

08005d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	2000001c 	.word	0x2000001c

08005d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d60:	f7ff fff0 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	0a9b      	lsrs	r3, r3, #10
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	4903      	ldr	r1, [pc, #12]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d72:	5ccb      	ldrb	r3, [r1, r3]
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	0800bec0 	.word	0x0800bec0

08005d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d88:	f7ff ffdc 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	0b5b      	lsrs	r3, r3, #13
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	4903      	ldr	r1, [pc, #12]	; (8005da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d9a:	5ccb      	ldrb	r3, [r1, r3]
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40023800 	.word	0x40023800
 8005da8:	0800bec0 	.word	0x0800bec0

08005dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e041      	b.n	8005e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fd f974 	bl	80030c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f000 fcb8 	bl	8006760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e041      	b.n	8005ee0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f839 	bl	8005ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f000 fc69 	bl	8006760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d109      	bne.n	8005f20 <HAL_TIM_PWM_Start+0x24>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e022      	b.n	8005f66 <HAL_TIM_PWM_Start+0x6a>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d109      	bne.n	8005f3a <HAL_TIM_PWM_Start+0x3e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	bf14      	ite	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	2300      	moveq	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	e015      	b.n	8005f66 <HAL_TIM_PWM_Start+0x6a>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d109      	bne.n	8005f54 <HAL_TIM_PWM_Start+0x58>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	bf14      	ite	ne
 8005f4c:	2301      	movne	r3, #1
 8005f4e:	2300      	moveq	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e008      	b.n	8005f66 <HAL_TIM_PWM_Start+0x6a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	bf14      	ite	ne
 8005f60:	2301      	movne	r3, #1
 8005f62:	2300      	moveq	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e07c      	b.n	8006068 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_PWM_Start+0x82>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f7c:	e013      	b.n	8005fa6 <HAL_TIM_PWM_Start+0xaa>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d104      	bne.n	8005f8e <HAL_TIM_PWM_Start+0x92>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f8c:	e00b      	b.n	8005fa6 <HAL_TIM_PWM_Start+0xaa>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_PWM_Start+0xa2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f9c:	e003      	b.n	8005fa6 <HAL_TIM_PWM_Start+0xaa>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2201      	movs	r2, #1
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fec0 	bl	8006d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a2d      	ldr	r2, [pc, #180]	; (8006070 <HAL_TIM_PWM_Start+0x174>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_TIM_PWM_Start+0xcc>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a2c      	ldr	r2, [pc, #176]	; (8006074 <HAL_TIM_PWM_Start+0x178>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d101      	bne.n	8005fcc <HAL_TIM_PWM_Start+0xd0>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <HAL_TIM_PWM_Start+0xd2>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_TIM_PWM_Start+0x174>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d022      	beq.n	8006032 <HAL_TIM_PWM_Start+0x136>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d01d      	beq.n	8006032 <HAL_TIM_PWM_Start+0x136>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_TIM_PWM_Start+0x17c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d018      	beq.n	8006032 <HAL_TIM_PWM_Start+0x136>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1d      	ldr	r2, [pc, #116]	; (800607c <HAL_TIM_PWM_Start+0x180>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_TIM_PWM_Start+0x136>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_TIM_PWM_Start+0x184>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00e      	beq.n	8006032 <HAL_TIM_PWM_Start+0x136>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a16      	ldr	r2, [pc, #88]	; (8006074 <HAL_TIM_PWM_Start+0x178>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_TIM_PWM_Start+0x136>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a18      	ldr	r2, [pc, #96]	; (8006084 <HAL_TIM_PWM_Start+0x188>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <HAL_TIM_PWM_Start+0x136>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a16      	ldr	r2, [pc, #88]	; (8006088 <HAL_TIM_PWM_Start+0x18c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d111      	bne.n	8006056 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b06      	cmp	r3, #6
 8006042:	d010      	beq.n	8006066 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006054:	e007      	b.n	8006066 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0201 	orr.w	r2, r2, #1
 8006064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40010000 	.word	0x40010000
 8006074:	40010400 	.word	0x40010400
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40014000 	.word	0x40014000
 8006088:	40001800 	.word	0x40001800

0800608c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e097      	b.n	80061d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d106      	bne.n	80060ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7fd f867 	bl	8003188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d0:	f023 0307 	bic.w	r3, r3, #7
 80060d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f000 fb3d 	bl	8006760 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	4313      	orrs	r3, r2
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800612c:	f023 030c 	bic.w	r3, r3, #12
 8006130:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800613c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	4313      	orrs	r3, r2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	011a      	lsls	r2, r3, #4
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	031b      	lsls	r3, r3, #12
 800615c:	4313      	orrs	r3, r2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800616a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006172:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	4313      	orrs	r3, r2
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0202 	mvn.w	r2, #2
 8006204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa81 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fa73 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fa84 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b04      	cmp	r3, #4
 8006240:	d122      	bne.n	8006288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b04      	cmp	r3, #4
 800624e:	d11b      	bne.n	8006288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0204 	mvn.w	r2, #4
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa57 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa49 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa5a 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b08      	cmp	r3, #8
 8006294:	d122      	bne.n	80062dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0208 	mvn.w	r2, #8
 80062ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2204      	movs	r2, #4
 80062b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa2d 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 80062c8:	e005      	b.n	80062d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa1f 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fa30 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d122      	bne.n	8006330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d11b      	bne.n	8006330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0210 	mvn.w	r2, #16
 8006300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2208      	movs	r2, #8
 8006306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fa03 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 800631c:	e005      	b.n	800632a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f9f5 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fa06 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d10e      	bne.n	800635c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b01      	cmp	r3, #1
 800634a:	d107      	bne.n	800635c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0201 	mvn.w	r2, #1
 8006354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9cf 	bl	80066fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d10e      	bne.n	8006388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006374:	2b80      	cmp	r3, #128	; 0x80
 8006376:	d107      	bne.n	8006388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fdd4 	bl	8006f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d10e      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b40      	cmp	r3, #64	; 0x40
 80063a2:	d107      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9cb 	bl	800674a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d10e      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d107      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0220 	mvn.w	r2, #32
 80063d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fd9e 	bl	8006f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006402:	2302      	movs	r3, #2
 8006404:	e0ae      	b.n	8006564 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b0c      	cmp	r3, #12
 8006412:	f200 809f 	bhi.w	8006554 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006451 	.word	0x08006451
 8006420:	08006555 	.word	0x08006555
 8006424:	08006555 	.word	0x08006555
 8006428:	08006555 	.word	0x08006555
 800642c:	08006491 	.word	0x08006491
 8006430:	08006555 	.word	0x08006555
 8006434:	08006555 	.word	0x08006555
 8006438:	08006555 	.word	0x08006555
 800643c:	080064d3 	.word	0x080064d3
 8006440:	08006555 	.word	0x08006555
 8006444:	08006555 	.word	0x08006555
 8006448:	08006555 	.word	0x08006555
 800644c:	08006513 	.word	0x08006513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fa22 	bl	80068a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0208 	orr.w	r2, r2, #8
 800646a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0204 	bic.w	r2, r2, #4
 800647a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6999      	ldr	r1, [r3, #24]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	619a      	str	r2, [r3, #24]
      break;
 800648e:	e064      	b.n	800655a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fa72 	bl	8006980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6999      	ldr	r1, [r3, #24]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	021a      	lsls	r2, r3, #8
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	619a      	str	r2, [r3, #24]
      break;
 80064d0:	e043      	b.n	800655a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fac7 	bl	8006a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0208 	orr.w	r2, r2, #8
 80064ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0204 	bic.w	r2, r2, #4
 80064fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69d9      	ldr	r1, [r3, #28]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	61da      	str	r2, [r3, #28]
      break;
 8006510:	e023      	b.n	800655a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fb1b 	bl	8006b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69d9      	ldr	r1, [r3, #28]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	021a      	lsls	r2, r3, #8
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	61da      	str	r2, [r3, #28]
      break;
 8006552:	e002      	b.n	800655a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
      break;
 8006558:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006562:	7dfb      	ldrb	r3, [r7, #23]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_TIM_ConfigClockSource+0x1c>
 8006584:	2302      	movs	r3, #2
 8006586:	e0b4      	b.n	80066f2 <HAL_TIM_ConfigClockSource+0x186>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c0:	d03e      	beq.n	8006640 <HAL_TIM_ConfigClockSource+0xd4>
 80065c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c6:	f200 8087 	bhi.w	80066d8 <HAL_TIM_ConfigClockSource+0x16c>
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	f000 8086 	beq.w	80066de <HAL_TIM_ConfigClockSource+0x172>
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	d87f      	bhi.n	80066d8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b70      	cmp	r3, #112	; 0x70
 80065da:	d01a      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0xa6>
 80065dc:	2b70      	cmp	r3, #112	; 0x70
 80065de:	d87b      	bhi.n	80066d8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e0:	2b60      	cmp	r3, #96	; 0x60
 80065e2:	d050      	beq.n	8006686 <HAL_TIM_ConfigClockSource+0x11a>
 80065e4:	2b60      	cmp	r3, #96	; 0x60
 80065e6:	d877      	bhi.n	80066d8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b50      	cmp	r3, #80	; 0x50
 80065ea:	d03c      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0xfa>
 80065ec:	2b50      	cmp	r3, #80	; 0x50
 80065ee:	d873      	bhi.n	80066d8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b40      	cmp	r3, #64	; 0x40
 80065f2:	d058      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x13a>
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d86f      	bhi.n	80066d8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b30      	cmp	r3, #48	; 0x30
 80065fa:	d064      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x15a>
 80065fc:	2b30      	cmp	r3, #48	; 0x30
 80065fe:	d86b      	bhi.n	80066d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b20      	cmp	r3, #32
 8006602:	d060      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006604:	2b20      	cmp	r3, #32
 8006606:	d867      	bhi.n	80066d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d05c      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x15a>
 800660c:	2b10      	cmp	r3, #16
 800660e:	d05a      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006610:	e062      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6899      	ldr	r1, [r3, #8]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f000 fb67 	bl	8006cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	609a      	str	r2, [r3, #8]
      break;
 800663e:	e04f      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	6899      	ldr	r1, [r3, #8]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f000 fb50 	bl	8006cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006662:	609a      	str	r2, [r3, #8]
      break;
 8006664:	e03c      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6859      	ldr	r1, [r3, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	461a      	mov	r2, r3
 8006674:	f000 fac4 	bl	8006c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2150      	movs	r1, #80	; 0x50
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fb1d 	bl	8006cbe <TIM_ITRx_SetConfig>
      break;
 8006684:	e02c      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6859      	ldr	r1, [r3, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	461a      	mov	r2, r3
 8006694:	f000 fae3 	bl	8006c5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2160      	movs	r1, #96	; 0x60
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fb0d 	bl	8006cbe <TIM_ITRx_SetConfig>
      break;
 80066a4:	e01c      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6818      	ldr	r0, [r3, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	6859      	ldr	r1, [r3, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	461a      	mov	r2, r3
 80066b4:	f000 faa4 	bl	8006c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2140      	movs	r1, #64	; 0x40
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fafd 	bl	8006cbe <TIM_ITRx_SetConfig>
      break;
 80066c4:	e00c      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f000 faf4 	bl	8006cbe <TIM_ITRx_SetConfig>
      break;
 80066d6:	e003      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	73fb      	strb	r3, [r7, #15]
      break;
 80066dc:	e000      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a40      	ldr	r2, [pc, #256]	; (8006874 <TIM_Base_SetConfig+0x114>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677e:	d00f      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a3d      	ldr	r2, [pc, #244]	; (8006878 <TIM_Base_SetConfig+0x118>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00b      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a3c      	ldr	r2, [pc, #240]	; (800687c <TIM_Base_SetConfig+0x11c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d007      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a3b      	ldr	r2, [pc, #236]	; (8006880 <TIM_Base_SetConfig+0x120>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a3a      	ldr	r2, [pc, #232]	; (8006884 <TIM_Base_SetConfig+0x124>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d108      	bne.n	80067b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a2f      	ldr	r2, [pc, #188]	; (8006874 <TIM_Base_SetConfig+0x114>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d02b      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c0:	d027      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a2c      	ldr	r2, [pc, #176]	; (8006878 <TIM_Base_SetConfig+0x118>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d023      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2b      	ldr	r2, [pc, #172]	; (800687c <TIM_Base_SetConfig+0x11c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01f      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a2a      	ldr	r2, [pc, #168]	; (8006880 <TIM_Base_SetConfig+0x120>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d01b      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a29      	ldr	r2, [pc, #164]	; (8006884 <TIM_Base_SetConfig+0x124>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d017      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a28      	ldr	r2, [pc, #160]	; (8006888 <TIM_Base_SetConfig+0x128>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a27      	ldr	r2, [pc, #156]	; (800688c <TIM_Base_SetConfig+0x12c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00f      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a26      	ldr	r2, [pc, #152]	; (8006890 <TIM_Base_SetConfig+0x130>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00b      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a25      	ldr	r2, [pc, #148]	; (8006894 <TIM_Base_SetConfig+0x134>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d007      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a24      	ldr	r2, [pc, #144]	; (8006898 <TIM_Base_SetConfig+0x138>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a23      	ldr	r2, [pc, #140]	; (800689c <TIM_Base_SetConfig+0x13c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d108      	bne.n	8006824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a0a      	ldr	r2, [pc, #40]	; (8006874 <TIM_Base_SetConfig+0x114>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_Base_SetConfig+0xf8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a0c      	ldr	r2, [pc, #48]	; (8006884 <TIM_Base_SetConfig+0x124>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d103      	bne.n	8006860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	615a      	str	r2, [r3, #20]
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40010000 	.word	0x40010000
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40010400 	.word	0x40010400
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800
 8006894:	40001800 	.word	0x40001800
 8006898:	40001c00 	.word	0x40001c00
 800689c:	40002000 	.word	0x40002000

080068a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f023 0201 	bic.w	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 0303 	bic.w	r3, r3, #3
 80068d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f023 0302 	bic.w	r3, r3, #2
 80068e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a20      	ldr	r2, [pc, #128]	; (8006978 <TIM_OC1_SetConfig+0xd8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d003      	beq.n	8006904 <TIM_OC1_SetConfig+0x64>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1f      	ldr	r2, [pc, #124]	; (800697c <TIM_OC1_SetConfig+0xdc>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d10c      	bne.n	800691e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f023 0308 	bic.w	r3, r3, #8
 800690a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f023 0304 	bic.w	r3, r3, #4
 800691c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a15      	ldr	r2, [pc, #84]	; (8006978 <TIM_OC1_SetConfig+0xd8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d003      	beq.n	800692e <TIM_OC1_SetConfig+0x8e>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <TIM_OC1_SetConfig+0xdc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d111      	bne.n	8006952 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800693c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	621a      	str	r2, [r3, #32]
}
 800696c:	bf00      	nop
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	40010000 	.word	0x40010000
 800697c:	40010400 	.word	0x40010400

08006980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	f023 0210 	bic.w	r2, r3, #16
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f023 0320 	bic.w	r3, r3, #32
 80069ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a22      	ldr	r2, [pc, #136]	; (8006a64 <TIM_OC2_SetConfig+0xe4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_OC2_SetConfig+0x68>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a21      	ldr	r2, [pc, #132]	; (8006a68 <TIM_OC2_SetConfig+0xe8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10d      	bne.n	8006a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a17      	ldr	r2, [pc, #92]	; (8006a64 <TIM_OC2_SetConfig+0xe4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC2_SetConfig+0x94>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a16      	ldr	r2, [pc, #88]	; (8006a68 <TIM_OC2_SetConfig+0xe8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d113      	bne.n	8006a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40010400 	.word	0x40010400

08006a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a21      	ldr	r2, [pc, #132]	; (8006b4c <TIM_OC3_SetConfig+0xe0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_OC3_SetConfig+0x66>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a20      	ldr	r2, [pc, #128]	; (8006b50 <TIM_OC3_SetConfig+0xe4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10d      	bne.n	8006aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a16      	ldr	r2, [pc, #88]	; (8006b4c <TIM_OC3_SetConfig+0xe0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC3_SetConfig+0x92>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a15      	ldr	r2, [pc, #84]	; (8006b50 <TIM_OC3_SetConfig+0xe4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d113      	bne.n	8006b26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	621a      	str	r2, [r3, #32]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40010400 	.word	0x40010400

08006b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	031b      	lsls	r3, r3, #12
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a12      	ldr	r2, [pc, #72]	; (8006bf8 <TIM_OC4_SetConfig+0xa4>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_OC4_SetConfig+0x68>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <TIM_OC4_SetConfig+0xa8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d109      	bne.n	8006bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	019b      	lsls	r3, r3, #6
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	621a      	str	r2, [r3, #32]
}
 8006bea:	bf00      	nop
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40010400 	.word	0x40010400

08006c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f023 0201 	bic.w	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 030a 	bic.w	r3, r3, #10
 8006c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f023 0210 	bic.w	r2, r3, #16
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	031b      	lsls	r3, r3, #12
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f043 0307 	orr.w	r3, r3, #7
 8006ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	609a      	str	r2, [r3, #8]
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	021a      	lsls	r2, r3, #8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	609a      	str	r2, [r3, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	2201      	movs	r2, #1
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1a      	ldr	r2, [r3, #32]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	401a      	ands	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1a      	ldr	r2, [r3, #32]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e05a      	b.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de4:	d01d      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1a      	ldr	r2, [pc, #104]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d10c      	bne.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40000c00 	.word	0x40000c00
 8006e6c:	40010400 	.word	0x40010400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40001800 	.word	0x40001800

08006e78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e03d      	b.n	8006f10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e03f      	b.n	8006fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7fc fa38 	bl	80033e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2224      	movs	r2, #36	; 0x24
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fd7b 	bl	8007a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695a      	ldr	r2, [r3, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b08a      	sub	sp, #40	; 0x28
 8006fe2:	af02      	add	r7, sp, #8
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	603b      	str	r3, [r7, #0]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d17c      	bne.n	80070f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_UART_Transmit+0x2c>
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e075      	b.n	80070fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_UART_Transmit+0x3e>
 8007018:	2302      	movs	r3, #2
 800701a:	e06e      	b.n	80070fa <HAL_UART_Transmit+0x11c>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2221      	movs	r2, #33	; 0x21
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007032:	f7fc fc1d 	bl	8003870 <HAL_GetTick>
 8007036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	88fa      	ldrh	r2, [r7, #6]
 800703c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	88fa      	ldrh	r2, [r7, #6]
 8007042:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704c:	d108      	bne.n	8007060 <HAL_UART_Transmit+0x82>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e003      	b.n	8007068 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007064:	2300      	movs	r3, #0
 8007066:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007070:	e02a      	b.n	80070c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2200      	movs	r2, #0
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 faf9 	bl	8007674 <UART_WaitOnFlagUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e036      	b.n	80070fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	3302      	adds	r3, #2
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	e007      	b.n	80070ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	3301      	adds	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1cf      	bne.n	8007072 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2200      	movs	r2, #0
 80070da:	2140      	movs	r1, #64	; 0x40
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 fac9 	bl	8007674 <UART_WaitOnFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e006      	b.n	80070fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e000      	b.n	80070fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070f8:	2302      	movs	r3, #2
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b0ba      	sub	sp, #232	; 0xe8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800712a:	2300      	movs	r3, #0
 800712c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007130:	2300      	movs	r3, #0
 8007132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10f      	bne.n	800716a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <HAL_UART_IRQHandler+0x66>
 8007156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fbd3 	bl	800790e <UART_Receive_IT>
      return;
 8007168:	e256      	b.n	8007618 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800716a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80de 	beq.w	8007330 <HAL_UART_IRQHandler+0x22c>
 8007174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007184:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 80d1 	beq.w	8007330 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <HAL_UART_IRQHandler+0xae>
 800719a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800719e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f043 0201 	orr.w	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <HAL_UART_IRQHandler+0xd2>
 80071be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	f043 0202 	orr.w	r2, r3, #2
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <HAL_UART_IRQHandler+0xf6>
 80071e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f043 0204 	orr.w	r2, r3, #4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d011      	beq.n	800722a <HAL_UART_IRQHandler+0x126>
 8007206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d105      	bne.n	800721e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	f043 0208 	orr.w	r2, r3, #8
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 81ed 	beq.w	800760e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d008      	beq.n	8007252 <HAL_UART_IRQHandler+0x14e>
 8007240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fb5e 	bl	800790e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	bf0c      	ite	eq
 8007260:	2301      	moveq	r3, #1
 8007262:	2300      	movne	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <HAL_UART_IRQHandler+0x17a>
 8007276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800727a:	2b00      	cmp	r3, #0
 800727c:	d04f      	beq.n	800731e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa66 	bl	8007750 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b40      	cmp	r3, #64	; 0x40
 8007290:	d141      	bne.n	8007316 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3314      	adds	r3, #20
 8007298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1d9      	bne.n	8007292 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d013      	beq.n	800730e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	4a7d      	ldr	r2, [pc, #500]	; (80074e0 <HAL_UART_IRQHandler+0x3dc>)
 80072ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fc fecf 	bl	8004096 <HAL_DMA_Abort_IT>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d016      	beq.n	800732c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730c:	e00e      	b.n	800732c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f99a 	bl	8007648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	e00a      	b.n	800732c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f996 	bl	8007648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	e006      	b.n	800732c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f992 	bl	8007648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800732a:	e170      	b.n	800760e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	bf00      	nop
    return;
 800732e:	e16e      	b.n	800760e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	2b01      	cmp	r3, #1
 8007336:	f040 814a 	bne.w	80075ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8143 	beq.w	80075ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 813c 	beq.w	80075ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007356:	2300      	movs	r3, #0
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60bb      	str	r3, [r7, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	60bb      	str	r3, [r7, #8]
 800736a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007376:	2b40      	cmp	r3, #64	; 0x40
 8007378:	f040 80b4 	bne.w	80074e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8140 	beq.w	8007612 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800739a:	429a      	cmp	r2, r3
 800739c:	f080 8139 	bcs.w	8007612 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b2:	f000 8088 	beq.w	80074c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	330c      	adds	r3, #12
 80073bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1d9      	bne.n	80073b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3314      	adds	r3, #20
 8007408:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3314      	adds	r3, #20
 8007422:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007426:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800742a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800742e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e1      	bne.n	8007402 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3314      	adds	r3, #20
 8007444:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800744e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3314      	adds	r3, #20
 800745e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007462:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007464:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e3      	bne.n	800743e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	330c      	adds	r3, #12
 800748a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007496:	f023 0310 	bic.w	r3, r3, #16
 800749a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80074aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e3      	bne.n	8007484 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fc fd78 	bl	8003fb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f8c0 	bl	800765c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074dc:	e099      	b.n	8007612 <HAL_UART_IRQHandler+0x50e>
 80074de:	bf00      	nop
 80074e0:	08007817 	.word	0x08007817
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 808b 	beq.w	8007616 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8086 	beq.w	8007616 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	330c      	adds	r3, #12
 8007510:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800751a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800752e:	647a      	str	r2, [r7, #68]	; 0x44
 8007530:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800753c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e3      	bne.n	800750a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3314      	adds	r3, #20
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	623b      	str	r3, [r7, #32]
   return(result);
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3314      	adds	r3, #20
 8007562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007566:	633a      	str	r2, [r7, #48]	; 0x30
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800756c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e3      	bne.n	8007542 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	330c      	adds	r3, #12
 800758e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	60fb      	str	r3, [r7, #12]
   return(result);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0310 	bic.w	r3, r3, #16
 800759e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	330c      	adds	r3, #12
 80075a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075ac:	61fa      	str	r2, [r7, #28]
 80075ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	69b9      	ldr	r1, [r7, #24]
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e3      	bne.n	8007588 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f848 	bl	800765c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075cc:	e023      	b.n	8007616 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d009      	beq.n	80075ee <HAL_UART_IRQHandler+0x4ea>
 80075da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f929 	bl	800783e <UART_Transmit_IT>
    return;
 80075ec:	e014      	b.n	8007618 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00e      	beq.n	8007618 <HAL_UART_IRQHandler+0x514>
 80075fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f969 	bl	80078de <UART_EndTransmit_IT>
    return;
 800760c:	e004      	b.n	8007618 <HAL_UART_IRQHandler+0x514>
    return;
 800760e:	bf00      	nop
 8007610:	e002      	b.n	8007618 <HAL_UART_IRQHandler+0x514>
      return;
 8007612:	bf00      	nop
 8007614:	e000      	b.n	8007618 <HAL_UART_IRQHandler+0x514>
      return;
 8007616:	bf00      	nop
  }
}
 8007618:	37e8      	adds	r7, #232	; 0xe8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop

08007620 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b090      	sub	sp, #64	; 0x40
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007684:	e050      	b.n	8007728 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d04c      	beq.n	8007728 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800768e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007694:	f7fc f8ec 	bl	8003870 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d241      	bcs.n	8007728 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	330c      	adds	r3, #12
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	330c      	adds	r3, #12
 80076c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076c4:	637a      	str	r2, [r7, #52]	; 0x34
 80076c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e5      	bne.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3314      	adds	r3, #20
 80076de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	613b      	str	r3, [r7, #16]
   return(result);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3314      	adds	r3, #20
 80076f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f8:	623a      	str	r2, [r7, #32]
 80076fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	69f9      	ldr	r1, [r7, #28]
 80076fe:	6a3a      	ldr	r2, [r7, #32]
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	61bb      	str	r3, [r7, #24]
   return(result);
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e5      	bne.n	80076d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2220      	movs	r2, #32
 8007718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e00f      	b.n	8007748 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4013      	ands	r3, r2
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	429a      	cmp	r2, r3
 8007736:	bf0c      	ite	eq
 8007738:	2301      	moveq	r3, #1
 800773a:	2300      	movne	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	461a      	mov	r2, r3
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	429a      	cmp	r2, r3
 8007744:	d09f      	beq.n	8007686 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3740      	adds	r7, #64	; 0x40
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007750:	b480      	push	{r7}
 8007752:	b095      	sub	sp, #84	; 0x54
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	330c      	adds	r3, #12
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800776e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	330c      	adds	r3, #12
 8007776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007778:	643a      	str	r2, [r7, #64]	; 0x40
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800777e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e5      	bne.n	8007758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3314      	adds	r3, #20
 8007792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	e853 3f00 	ldrex	r3, [r3]
 800779a:	61fb      	str	r3, [r7, #28]
   return(result);
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	f023 0301 	bic.w	r3, r3, #1
 80077a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3314      	adds	r3, #20
 80077aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b4:	e841 2300 	strex	r3, r2, [r1]
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e5      	bne.n	800778c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d119      	bne.n	80077fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f023 0310 	bic.w	r3, r3, #16
 80077de:	647b      	str	r3, [r7, #68]	; 0x44
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077e8:	61ba      	str	r2, [r7, #24]
 80077ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6979      	ldr	r1, [r7, #20]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	613b      	str	r3, [r7, #16]
   return(result);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e5      	bne.n	80077c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	631a      	str	r2, [r3, #48]	; 0x30
}
 800780a:	bf00      	nop
 800780c:	3754      	adds	r7, #84	; 0x54
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff ff09 	bl	8007648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b21      	cmp	r3, #33	; 0x21
 8007850:	d13e      	bne.n	80078d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785a:	d114      	bne.n	8007886 <UART_Transmit_IT+0x48>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d110      	bne.n	8007886 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007878:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	1c9a      	adds	r2, r3, #2
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	621a      	str	r2, [r3, #32]
 8007884:	e008      	b.n	8007898 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	1c59      	adds	r1, r3, #1
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6211      	str	r1, [r2, #32]
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	4619      	mov	r1, r3
 80078a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10f      	bne.n	80078cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e000      	b.n	80078d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078d0:	2302      	movs	r3, #2
  }
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fe8e 	bl	8007620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b08c      	sub	sp, #48	; 0x30
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b22      	cmp	r3, #34	; 0x22
 8007920:	f040 80ab 	bne.w	8007a7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792c:	d117      	bne.n	800795e <UART_Receive_IT+0x50>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d113      	bne.n	800795e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794c:	b29a      	uxth	r2, r3
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	1c9a      	adds	r2, r3, #2
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	629a      	str	r2, [r3, #40]	; 0x28
 800795c:	e026      	b.n	80079ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007970:	d007      	beq.n	8007982 <UART_Receive_IT+0x74>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10a      	bne.n	8007990 <UART_Receive_IT+0x82>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d106      	bne.n	8007990 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	b2da      	uxtb	r2, r3
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e008      	b.n	80079a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799c:	b2da      	uxtb	r2, r3
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4619      	mov	r1, r3
 80079ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d15a      	bne.n	8007a76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0220 	bic.w	r2, r2, #32
 80079ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695a      	ldr	r2, [r3, #20]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0201 	bic.w	r2, r2, #1
 80079ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d135      	bne.n	8007a6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	613b      	str	r3, [r7, #16]
   return(result);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f023 0310 	bic.w	r3, r3, #16
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	330c      	adds	r3, #12
 8007a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a26:	623a      	str	r2, [r7, #32]
 8007a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	69f9      	ldr	r1, [r7, #28]
 8007a2c:	6a3a      	ldr	r2, [r7, #32]
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e5      	bne.n	8007a06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0310 	and.w	r3, r3, #16
 8007a44:	2b10      	cmp	r3, #16
 8007a46:	d10a      	bne.n	8007a5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff fdf9 	bl	800765c <HAL_UARTEx_RxEventCallback>
 8007a6a:	e002      	b.n	8007a72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff fde1 	bl	8007634 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e002      	b.n	8007a7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e000      	b.n	8007a7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a7a:	2302      	movs	r3, #2
  }
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3730      	adds	r7, #48	; 0x30
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a88:	b0c0      	sub	sp, #256	; 0x100
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	68d9      	ldr	r1, [r3, #12]
 8007aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	ea40 0301 	orr.w	r3, r0, r1
 8007aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	431a      	orrs	r2, r3
 8007abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007adc:	f021 010c 	bic.w	r1, r1, #12
 8007ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007aea:	430b      	orrs	r3, r1
 8007aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afe:	6999      	ldr	r1, [r3, #24]
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	ea40 0301 	orr.w	r3, r0, r1
 8007b0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b8f      	ldr	r3, [pc, #572]	; (8007d50 <UART_SetConfig+0x2cc>)
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d005      	beq.n	8007b24 <UART_SetConfig+0xa0>
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b8d      	ldr	r3, [pc, #564]	; (8007d54 <UART_SetConfig+0x2d0>)
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d104      	bne.n	8007b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b24:	f7fe f92e 	bl	8005d84 <HAL_RCC_GetPCLK2Freq>
 8007b28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b2c:	e003      	b.n	8007b36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b2e:	f7fe f915 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8007b32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b40:	f040 810c 	bne.w	8007d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b56:	4622      	mov	r2, r4
 8007b58:	462b      	mov	r3, r5
 8007b5a:	1891      	adds	r1, r2, r2
 8007b5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b5e:	415b      	adcs	r3, r3
 8007b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b66:	4621      	mov	r1, r4
 8007b68:	eb12 0801 	adds.w	r8, r2, r1
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	eb43 0901 	adc.w	r9, r3, r1
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b86:	4690      	mov	r8, r2
 8007b88:	4699      	mov	r9, r3
 8007b8a:	4623      	mov	r3, r4
 8007b8c:	eb18 0303 	adds.w	r3, r8, r3
 8007b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b94:	462b      	mov	r3, r5
 8007b96:	eb49 0303 	adc.w	r3, r9, r3
 8007b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007baa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	18db      	adds	r3, r3, r3
 8007bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8007bb8:	4613      	mov	r3, r2
 8007bba:	eb42 0303 	adc.w	r3, r2, r3
 8007bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8007bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007bc8:	f7f9 f83e 	bl	8000c48 <__aeabi_uldivmod>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4b61      	ldr	r3, [pc, #388]	; (8007d58 <UART_SetConfig+0x2d4>)
 8007bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	011c      	lsls	r4, r3, #4
 8007bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007be4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007bec:	4642      	mov	r2, r8
 8007bee:	464b      	mov	r3, r9
 8007bf0:	1891      	adds	r1, r2, r2
 8007bf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bf4:	415b      	adcs	r3, r3
 8007bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8007c02:	4649      	mov	r1, r9
 8007c04:	eb43 0b01 	adc.w	fp, r3, r1
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	f04f 0300 	mov.w	r3, #0
 8007c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c1c:	4692      	mov	sl, r2
 8007c1e:	469b      	mov	fp, r3
 8007c20:	4643      	mov	r3, r8
 8007c22:	eb1a 0303 	adds.w	r3, sl, r3
 8007c26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8007c30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	18db      	adds	r3, r3, r3
 8007c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c4e:	4613      	mov	r3, r2
 8007c50:	eb42 0303 	adc.w	r3, r2, r3
 8007c54:	647b      	str	r3, [r7, #68]	; 0x44
 8007c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c5e:	f7f8 fff3 	bl	8000c48 <__aeabi_uldivmod>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	4b3b      	ldr	r3, [pc, #236]	; (8007d58 <UART_SetConfig+0x2d4>)
 8007c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	2264      	movs	r2, #100	; 0x64
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
 8007c76:	1acb      	subs	r3, r1, r3
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c7e:	4b36      	ldr	r3, [pc, #216]	; (8007d58 <UART_SetConfig+0x2d4>)
 8007c80:	fba3 2302 	umull	r2, r3, r3, r2
 8007c84:	095b      	lsrs	r3, r3, #5
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c8c:	441c      	add	r4, r3
 8007c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	1891      	adds	r1, r2, r2
 8007ca6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ca8:	415b      	adcs	r3, r3
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	1851      	adds	r1, r2, r1
 8007cb4:	6339      	str	r1, [r7, #48]	; 0x30
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	414b      	adcs	r3, r1
 8007cba:	637b      	str	r3, [r7, #52]	; 0x34
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007cc8:	4659      	mov	r1, fp
 8007cca:	00cb      	lsls	r3, r1, #3
 8007ccc:	4651      	mov	r1, sl
 8007cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cd2:	4651      	mov	r1, sl
 8007cd4:	00ca      	lsls	r2, r1, #3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4642      	mov	r2, r8
 8007cde:	189b      	adds	r3, r3, r2
 8007ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	460a      	mov	r2, r1
 8007ce8:	eb42 0303 	adc.w	r3, r2, r3
 8007cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d04:	460b      	mov	r3, r1
 8007d06:	18db      	adds	r3, r3, r3
 8007d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	eb42 0303 	adc.w	r3, r2, r3
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d1a:	f7f8 ff95 	bl	8000c48 <__aeabi_uldivmod>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <UART_SetConfig+0x2d4>)
 8007d24:	fba3 1302 	umull	r1, r3, r3, r2
 8007d28:	095b      	lsrs	r3, r3, #5
 8007d2a:	2164      	movs	r1, #100	; 0x64
 8007d2c:	fb01 f303 	mul.w	r3, r1, r3
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	3332      	adds	r3, #50	; 0x32
 8007d36:	4a08      	ldr	r2, [pc, #32]	; (8007d58 <UART_SetConfig+0x2d4>)
 8007d38:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	f003 0207 	and.w	r2, r3, #7
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4422      	add	r2, r4
 8007d4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d4c:	e105      	b.n	8007f5a <UART_SetConfig+0x4d6>
 8007d4e:	bf00      	nop
 8007d50:	40011000 	.word	0x40011000
 8007d54:	40011400 	.word	0x40011400
 8007d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d6e:	4642      	mov	r2, r8
 8007d70:	464b      	mov	r3, r9
 8007d72:	1891      	adds	r1, r2, r2
 8007d74:	6239      	str	r1, [r7, #32]
 8007d76:	415b      	adcs	r3, r3
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d7e:	4641      	mov	r1, r8
 8007d80:	1854      	adds	r4, r2, r1
 8007d82:	4649      	mov	r1, r9
 8007d84:	eb43 0501 	adc.w	r5, r3, r1
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	f04f 0300 	mov.w	r3, #0
 8007d90:	00eb      	lsls	r3, r5, #3
 8007d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d96:	00e2      	lsls	r2, r4, #3
 8007d98:	4614      	mov	r4, r2
 8007d9a:	461d      	mov	r5, r3
 8007d9c:	4643      	mov	r3, r8
 8007d9e:	18e3      	adds	r3, r4, r3
 8007da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007da4:	464b      	mov	r3, r9
 8007da6:	eb45 0303 	adc.w	r3, r5, r3
 8007daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dbe:	f04f 0200 	mov.w	r2, #0
 8007dc2:	f04f 0300 	mov.w	r3, #0
 8007dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007dca:	4629      	mov	r1, r5
 8007dcc:	008b      	lsls	r3, r1, #2
 8007dce:	4621      	mov	r1, r4
 8007dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	008a      	lsls	r2, r1, #2
 8007dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ddc:	f7f8 ff34 	bl	8000c48 <__aeabi_uldivmod>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4b60      	ldr	r3, [pc, #384]	; (8007f68 <UART_SetConfig+0x4e4>)
 8007de6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	011c      	lsls	r4, r3, #4
 8007dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007df8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	1891      	adds	r1, r2, r2
 8007e06:	61b9      	str	r1, [r7, #24]
 8007e08:	415b      	adcs	r3, r3
 8007e0a:	61fb      	str	r3, [r7, #28]
 8007e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e10:	4641      	mov	r1, r8
 8007e12:	1851      	adds	r1, r2, r1
 8007e14:	6139      	str	r1, [r7, #16]
 8007e16:	4649      	mov	r1, r9
 8007e18:	414b      	adcs	r3, r1
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e28:	4659      	mov	r1, fp
 8007e2a:	00cb      	lsls	r3, r1, #3
 8007e2c:	4651      	mov	r1, sl
 8007e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e32:	4651      	mov	r1, sl
 8007e34:	00ca      	lsls	r2, r1, #3
 8007e36:	4610      	mov	r0, r2
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	189b      	adds	r3, r3, r2
 8007e40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e44:	464b      	mov	r3, r9
 8007e46:	460a      	mov	r2, r1
 8007e48:	eb42 0303 	adc.w	r3, r2, r3
 8007e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e68:	4649      	mov	r1, r9
 8007e6a:	008b      	lsls	r3, r1, #2
 8007e6c:	4641      	mov	r1, r8
 8007e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e72:	4641      	mov	r1, r8
 8007e74:	008a      	lsls	r2, r1, #2
 8007e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e7a:	f7f8 fee5 	bl	8000c48 <__aeabi_uldivmod>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4b39      	ldr	r3, [pc, #228]	; (8007f68 <UART_SetConfig+0x4e4>)
 8007e84:	fba3 1302 	umull	r1, r3, r3, r2
 8007e88:	095b      	lsrs	r3, r3, #5
 8007e8a:	2164      	movs	r1, #100	; 0x64
 8007e8c:	fb01 f303 	mul.w	r3, r1, r3
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	3332      	adds	r3, #50	; 0x32
 8007e96:	4a34      	ldr	r2, [pc, #208]	; (8007f68 <UART_SetConfig+0x4e4>)
 8007e98:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ea2:	441c      	add	r4, r3
 8007ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8007eac:	677a      	str	r2, [r7, #116]	; 0x74
 8007eae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007eb2:	4642      	mov	r2, r8
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	1891      	adds	r1, r2, r2
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	415b      	adcs	r3, r3
 8007ebc:	60fb      	str	r3, [r7, #12]
 8007ebe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ec2:	4641      	mov	r1, r8
 8007ec4:	1851      	adds	r1, r2, r1
 8007ec6:	6039      	str	r1, [r7, #0]
 8007ec8:	4649      	mov	r1, r9
 8007eca:	414b      	adcs	r3, r1
 8007ecc:	607b      	str	r3, [r7, #4]
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	f04f 0300 	mov.w	r3, #0
 8007ed6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007eda:	4659      	mov	r1, fp
 8007edc:	00cb      	lsls	r3, r1, #3
 8007ede:	4651      	mov	r1, sl
 8007ee0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ee4:	4651      	mov	r1, sl
 8007ee6:	00ca      	lsls	r2, r1, #3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4619      	mov	r1, r3
 8007eec:	4603      	mov	r3, r0
 8007eee:	4642      	mov	r2, r8
 8007ef0:	189b      	adds	r3, r3, r2
 8007ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	eb42 0303 	adc.w	r3, r2, r3
 8007efc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	663b      	str	r3, [r7, #96]	; 0x60
 8007f08:	667a      	str	r2, [r7, #100]	; 0x64
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f16:	4649      	mov	r1, r9
 8007f18:	008b      	lsls	r3, r1, #2
 8007f1a:	4641      	mov	r1, r8
 8007f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f20:	4641      	mov	r1, r8
 8007f22:	008a      	lsls	r2, r1, #2
 8007f24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f28:	f7f8 fe8e 	bl	8000c48 <__aeabi_uldivmod>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <UART_SetConfig+0x4e4>)
 8007f32:	fba3 1302 	umull	r1, r3, r3, r2
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	2164      	movs	r1, #100	; 0x64
 8007f3a:	fb01 f303 	mul.w	r3, r1, r3
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	3332      	adds	r3, #50	; 0x32
 8007f44:	4a08      	ldr	r2, [pc, #32]	; (8007f68 <UART_SetConfig+0x4e4>)
 8007f46:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	f003 020f 	and.w	r2, r3, #15
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4422      	add	r2, r4
 8007f58:	609a      	str	r2, [r3, #8]
}
 8007f5a:	bf00      	nop
 8007f5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f60:	46bd      	mov	sp, r7
 8007f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f66:	bf00      	nop
 8007f68:	51eb851f 	.word	0x51eb851f

08007f6c <__errno>:
 8007f6c:	4b01      	ldr	r3, [pc, #4]	; (8007f74 <__errno+0x8>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000028 	.word	0x20000028

08007f78 <__libc_init_array>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4d0d      	ldr	r5, [pc, #52]	; (8007fb0 <__libc_init_array+0x38>)
 8007f7c:	4c0d      	ldr	r4, [pc, #52]	; (8007fb4 <__libc_init_array+0x3c>)
 8007f7e:	1b64      	subs	r4, r4, r5
 8007f80:	10a4      	asrs	r4, r4, #2
 8007f82:	2600      	movs	r6, #0
 8007f84:	42a6      	cmp	r6, r4
 8007f86:	d109      	bne.n	8007f9c <__libc_init_array+0x24>
 8007f88:	4d0b      	ldr	r5, [pc, #44]	; (8007fb8 <__libc_init_array+0x40>)
 8007f8a:	4c0c      	ldr	r4, [pc, #48]	; (8007fbc <__libc_init_array+0x44>)
 8007f8c:	f003 f986 	bl	800b29c <_init>
 8007f90:	1b64      	subs	r4, r4, r5
 8007f92:	10a4      	asrs	r4, r4, #2
 8007f94:	2600      	movs	r6, #0
 8007f96:	42a6      	cmp	r6, r4
 8007f98:	d105      	bne.n	8007fa6 <__libc_init_array+0x2e>
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa0:	4798      	blx	r3
 8007fa2:	3601      	adds	r6, #1
 8007fa4:	e7ee      	b.n	8007f84 <__libc_init_array+0xc>
 8007fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007faa:	4798      	blx	r3
 8007fac:	3601      	adds	r6, #1
 8007fae:	e7f2      	b.n	8007f96 <__libc_init_array+0x1e>
 8007fb0:	0800c320 	.word	0x0800c320
 8007fb4:	0800c320 	.word	0x0800c320
 8007fb8:	0800c320 	.word	0x0800c320
 8007fbc:	0800c324 	.word	0x0800c324

08007fc0 <memset>:
 8007fc0:	4402      	add	r2, r0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d100      	bne.n	8007fca <memset+0xa>
 8007fc8:	4770      	bx	lr
 8007fca:	f803 1b01 	strb.w	r1, [r3], #1
 8007fce:	e7f9      	b.n	8007fc4 <memset+0x4>

08007fd0 <__cvt>:
 8007fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	ec55 4b10 	vmov	r4, r5, d0
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	460e      	mov	r6, r1
 8007fdc:	4619      	mov	r1, r3
 8007fde:	462b      	mov	r3, r5
 8007fe0:	bfbb      	ittet	lt
 8007fe2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fe6:	461d      	movlt	r5, r3
 8007fe8:	2300      	movge	r3, #0
 8007fea:	232d      	movlt	r3, #45	; 0x2d
 8007fec:	700b      	strb	r3, [r1, #0]
 8007fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ff4:	4691      	mov	r9, r2
 8007ff6:	f023 0820 	bic.w	r8, r3, #32
 8007ffa:	bfbc      	itt	lt
 8007ffc:	4622      	movlt	r2, r4
 8007ffe:	4614      	movlt	r4, r2
 8008000:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008004:	d005      	beq.n	8008012 <__cvt+0x42>
 8008006:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800800a:	d100      	bne.n	800800e <__cvt+0x3e>
 800800c:	3601      	adds	r6, #1
 800800e:	2102      	movs	r1, #2
 8008010:	e000      	b.n	8008014 <__cvt+0x44>
 8008012:	2103      	movs	r1, #3
 8008014:	ab03      	add	r3, sp, #12
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	ab02      	add	r3, sp, #8
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	ec45 4b10 	vmov	d0, r4, r5
 8008020:	4653      	mov	r3, sl
 8008022:	4632      	mov	r2, r6
 8008024:	f000 fcf4 	bl	8008a10 <_dtoa_r>
 8008028:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800802c:	4607      	mov	r7, r0
 800802e:	d102      	bne.n	8008036 <__cvt+0x66>
 8008030:	f019 0f01 	tst.w	r9, #1
 8008034:	d022      	beq.n	800807c <__cvt+0xac>
 8008036:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800803a:	eb07 0906 	add.w	r9, r7, r6
 800803e:	d110      	bne.n	8008062 <__cvt+0x92>
 8008040:	783b      	ldrb	r3, [r7, #0]
 8008042:	2b30      	cmp	r3, #48	; 0x30
 8008044:	d10a      	bne.n	800805c <__cvt+0x8c>
 8008046:	2200      	movs	r2, #0
 8008048:	2300      	movs	r3, #0
 800804a:	4620      	mov	r0, r4
 800804c:	4629      	mov	r1, r5
 800804e:	f7f8 fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008052:	b918      	cbnz	r0, 800805c <__cvt+0x8c>
 8008054:	f1c6 0601 	rsb	r6, r6, #1
 8008058:	f8ca 6000 	str.w	r6, [sl]
 800805c:	f8da 3000 	ldr.w	r3, [sl]
 8008060:	4499      	add	r9, r3
 8008062:	2200      	movs	r2, #0
 8008064:	2300      	movs	r3, #0
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	f7f8 fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800806e:	b108      	cbz	r0, 8008074 <__cvt+0xa4>
 8008070:	f8cd 900c 	str.w	r9, [sp, #12]
 8008074:	2230      	movs	r2, #48	; 0x30
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	454b      	cmp	r3, r9
 800807a:	d307      	bcc.n	800808c <__cvt+0xbc>
 800807c:	9b03      	ldr	r3, [sp, #12]
 800807e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008080:	1bdb      	subs	r3, r3, r7
 8008082:	4638      	mov	r0, r7
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	b004      	add	sp, #16
 8008088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808c:	1c59      	adds	r1, r3, #1
 800808e:	9103      	str	r1, [sp, #12]
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	e7f0      	b.n	8008076 <__cvt+0xa6>

08008094 <__exponent>:
 8008094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008096:	4603      	mov	r3, r0
 8008098:	2900      	cmp	r1, #0
 800809a:	bfb8      	it	lt
 800809c:	4249      	neglt	r1, r1
 800809e:	f803 2b02 	strb.w	r2, [r3], #2
 80080a2:	bfb4      	ite	lt
 80080a4:	222d      	movlt	r2, #45	; 0x2d
 80080a6:	222b      	movge	r2, #43	; 0x2b
 80080a8:	2909      	cmp	r1, #9
 80080aa:	7042      	strb	r2, [r0, #1]
 80080ac:	dd2a      	ble.n	8008104 <__exponent+0x70>
 80080ae:	f10d 0407 	add.w	r4, sp, #7
 80080b2:	46a4      	mov	ip, r4
 80080b4:	270a      	movs	r7, #10
 80080b6:	46a6      	mov	lr, r4
 80080b8:	460a      	mov	r2, r1
 80080ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80080be:	fb07 1516 	mls	r5, r7, r6, r1
 80080c2:	3530      	adds	r5, #48	; 0x30
 80080c4:	2a63      	cmp	r2, #99	; 0x63
 80080c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80080ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080ce:	4631      	mov	r1, r6
 80080d0:	dcf1      	bgt.n	80080b6 <__exponent+0x22>
 80080d2:	3130      	adds	r1, #48	; 0x30
 80080d4:	f1ae 0502 	sub.w	r5, lr, #2
 80080d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080dc:	1c44      	adds	r4, r0, #1
 80080de:	4629      	mov	r1, r5
 80080e0:	4561      	cmp	r1, ip
 80080e2:	d30a      	bcc.n	80080fa <__exponent+0x66>
 80080e4:	f10d 0209 	add.w	r2, sp, #9
 80080e8:	eba2 020e 	sub.w	r2, r2, lr
 80080ec:	4565      	cmp	r5, ip
 80080ee:	bf88      	it	hi
 80080f0:	2200      	movhi	r2, #0
 80080f2:	4413      	add	r3, r2
 80080f4:	1a18      	subs	r0, r3, r0
 80080f6:	b003      	add	sp, #12
 80080f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008102:	e7ed      	b.n	80080e0 <__exponent+0x4c>
 8008104:	2330      	movs	r3, #48	; 0x30
 8008106:	3130      	adds	r1, #48	; 0x30
 8008108:	7083      	strb	r3, [r0, #2]
 800810a:	70c1      	strb	r1, [r0, #3]
 800810c:	1d03      	adds	r3, r0, #4
 800810e:	e7f1      	b.n	80080f4 <__exponent+0x60>

08008110 <_printf_float>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	ed2d 8b02 	vpush	{d8}
 8008118:	b08d      	sub	sp, #52	; 0x34
 800811a:	460c      	mov	r4, r1
 800811c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008120:	4616      	mov	r6, r2
 8008122:	461f      	mov	r7, r3
 8008124:	4605      	mov	r5, r0
 8008126:	f001 fa61 	bl	80095ec <_localeconv_r>
 800812a:	f8d0 a000 	ldr.w	sl, [r0]
 800812e:	4650      	mov	r0, sl
 8008130:	f7f8 f84e 	bl	80001d0 <strlen>
 8008134:	2300      	movs	r3, #0
 8008136:	930a      	str	r3, [sp, #40]	; 0x28
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	9305      	str	r3, [sp, #20]
 800813c:	f8d8 3000 	ldr.w	r3, [r8]
 8008140:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008144:	3307      	adds	r3, #7
 8008146:	f023 0307 	bic.w	r3, r3, #7
 800814a:	f103 0208 	add.w	r2, r3, #8
 800814e:	f8c8 2000 	str.w	r2, [r8]
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800815a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800815e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008162:	9307      	str	r3, [sp, #28]
 8008164:	f8cd 8018 	str.w	r8, [sp, #24]
 8008168:	ee08 0a10 	vmov	s16, r0
 800816c:	4b9f      	ldr	r3, [pc, #636]	; (80083ec <_printf_float+0x2dc>)
 800816e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008172:	f04f 32ff 	mov.w	r2, #4294967295
 8008176:	f7f8 fcd9 	bl	8000b2c <__aeabi_dcmpun>
 800817a:	bb88      	cbnz	r0, 80081e0 <_printf_float+0xd0>
 800817c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008180:	4b9a      	ldr	r3, [pc, #616]	; (80083ec <_printf_float+0x2dc>)
 8008182:	f04f 32ff 	mov.w	r2, #4294967295
 8008186:	f7f8 fcb3 	bl	8000af0 <__aeabi_dcmple>
 800818a:	bb48      	cbnz	r0, 80081e0 <_printf_float+0xd0>
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	4640      	mov	r0, r8
 8008192:	4649      	mov	r1, r9
 8008194:	f7f8 fca2 	bl	8000adc <__aeabi_dcmplt>
 8008198:	b110      	cbz	r0, 80081a0 <_printf_float+0x90>
 800819a:	232d      	movs	r3, #45	; 0x2d
 800819c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a0:	4b93      	ldr	r3, [pc, #588]	; (80083f0 <_printf_float+0x2e0>)
 80081a2:	4894      	ldr	r0, [pc, #592]	; (80083f4 <_printf_float+0x2e4>)
 80081a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081a8:	bf94      	ite	ls
 80081aa:	4698      	movls	r8, r3
 80081ac:	4680      	movhi	r8, r0
 80081ae:	2303      	movs	r3, #3
 80081b0:	6123      	str	r3, [r4, #16]
 80081b2:	9b05      	ldr	r3, [sp, #20]
 80081b4:	f023 0204 	bic.w	r2, r3, #4
 80081b8:	6022      	str	r2, [r4, #0]
 80081ba:	f04f 0900 	mov.w	r9, #0
 80081be:	9700      	str	r7, [sp, #0]
 80081c0:	4633      	mov	r3, r6
 80081c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80081c4:	4621      	mov	r1, r4
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f9d8 	bl	800857c <_printf_common>
 80081cc:	3001      	adds	r0, #1
 80081ce:	f040 8090 	bne.w	80082f2 <_printf_float+0x1e2>
 80081d2:	f04f 30ff 	mov.w	r0, #4294967295
 80081d6:	b00d      	add	sp, #52	; 0x34
 80081d8:	ecbd 8b02 	vpop	{d8}
 80081dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e0:	4642      	mov	r2, r8
 80081e2:	464b      	mov	r3, r9
 80081e4:	4640      	mov	r0, r8
 80081e6:	4649      	mov	r1, r9
 80081e8:	f7f8 fca0 	bl	8000b2c <__aeabi_dcmpun>
 80081ec:	b140      	cbz	r0, 8008200 <_printf_float+0xf0>
 80081ee:	464b      	mov	r3, r9
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bfbc      	itt	lt
 80081f4:	232d      	movlt	r3, #45	; 0x2d
 80081f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081fa:	487f      	ldr	r0, [pc, #508]	; (80083f8 <_printf_float+0x2e8>)
 80081fc:	4b7f      	ldr	r3, [pc, #508]	; (80083fc <_printf_float+0x2ec>)
 80081fe:	e7d1      	b.n	80081a4 <_printf_float+0x94>
 8008200:	6863      	ldr	r3, [r4, #4]
 8008202:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008206:	9206      	str	r2, [sp, #24]
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	d13f      	bne.n	800828c <_printf_float+0x17c>
 800820c:	2306      	movs	r3, #6
 800820e:	6063      	str	r3, [r4, #4]
 8008210:	9b05      	ldr	r3, [sp, #20]
 8008212:	6861      	ldr	r1, [r4, #4]
 8008214:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008218:	2300      	movs	r3, #0
 800821a:	9303      	str	r3, [sp, #12]
 800821c:	ab0a      	add	r3, sp, #40	; 0x28
 800821e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008222:	ab09      	add	r3, sp, #36	; 0x24
 8008224:	ec49 8b10 	vmov	d0, r8, r9
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	6022      	str	r2, [r4, #0]
 800822c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008230:	4628      	mov	r0, r5
 8008232:	f7ff fecd 	bl	8007fd0 <__cvt>
 8008236:	9b06      	ldr	r3, [sp, #24]
 8008238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800823a:	2b47      	cmp	r3, #71	; 0x47
 800823c:	4680      	mov	r8, r0
 800823e:	d108      	bne.n	8008252 <_printf_float+0x142>
 8008240:	1cc8      	adds	r0, r1, #3
 8008242:	db02      	blt.n	800824a <_printf_float+0x13a>
 8008244:	6863      	ldr	r3, [r4, #4]
 8008246:	4299      	cmp	r1, r3
 8008248:	dd41      	ble.n	80082ce <_printf_float+0x1be>
 800824a:	f1ab 0b02 	sub.w	fp, fp, #2
 800824e:	fa5f fb8b 	uxtb.w	fp, fp
 8008252:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008256:	d820      	bhi.n	800829a <_printf_float+0x18a>
 8008258:	3901      	subs	r1, #1
 800825a:	465a      	mov	r2, fp
 800825c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008260:	9109      	str	r1, [sp, #36]	; 0x24
 8008262:	f7ff ff17 	bl	8008094 <__exponent>
 8008266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008268:	1813      	adds	r3, r2, r0
 800826a:	2a01      	cmp	r2, #1
 800826c:	4681      	mov	r9, r0
 800826e:	6123      	str	r3, [r4, #16]
 8008270:	dc02      	bgt.n	8008278 <_printf_float+0x168>
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	07d2      	lsls	r2, r2, #31
 8008276:	d501      	bpl.n	800827c <_printf_float+0x16c>
 8008278:	3301      	adds	r3, #1
 800827a:	6123      	str	r3, [r4, #16]
 800827c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008280:	2b00      	cmp	r3, #0
 8008282:	d09c      	beq.n	80081be <_printf_float+0xae>
 8008284:	232d      	movs	r3, #45	; 0x2d
 8008286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800828a:	e798      	b.n	80081be <_printf_float+0xae>
 800828c:	9a06      	ldr	r2, [sp, #24]
 800828e:	2a47      	cmp	r2, #71	; 0x47
 8008290:	d1be      	bne.n	8008210 <_printf_float+0x100>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1bc      	bne.n	8008210 <_printf_float+0x100>
 8008296:	2301      	movs	r3, #1
 8008298:	e7b9      	b.n	800820e <_printf_float+0xfe>
 800829a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800829e:	d118      	bne.n	80082d2 <_printf_float+0x1c2>
 80082a0:	2900      	cmp	r1, #0
 80082a2:	6863      	ldr	r3, [r4, #4]
 80082a4:	dd0b      	ble.n	80082be <_printf_float+0x1ae>
 80082a6:	6121      	str	r1, [r4, #16]
 80082a8:	b913      	cbnz	r3, 80082b0 <_printf_float+0x1a0>
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	07d0      	lsls	r0, r2, #31
 80082ae:	d502      	bpl.n	80082b6 <_printf_float+0x1a6>
 80082b0:	3301      	adds	r3, #1
 80082b2:	440b      	add	r3, r1
 80082b4:	6123      	str	r3, [r4, #16]
 80082b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80082b8:	f04f 0900 	mov.w	r9, #0
 80082bc:	e7de      	b.n	800827c <_printf_float+0x16c>
 80082be:	b913      	cbnz	r3, 80082c6 <_printf_float+0x1b6>
 80082c0:	6822      	ldr	r2, [r4, #0]
 80082c2:	07d2      	lsls	r2, r2, #31
 80082c4:	d501      	bpl.n	80082ca <_printf_float+0x1ba>
 80082c6:	3302      	adds	r3, #2
 80082c8:	e7f4      	b.n	80082b4 <_printf_float+0x1a4>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e7f2      	b.n	80082b4 <_printf_float+0x1a4>
 80082ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d4:	4299      	cmp	r1, r3
 80082d6:	db05      	blt.n	80082e4 <_printf_float+0x1d4>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	6121      	str	r1, [r4, #16]
 80082dc:	07d8      	lsls	r0, r3, #31
 80082de:	d5ea      	bpl.n	80082b6 <_printf_float+0x1a6>
 80082e0:	1c4b      	adds	r3, r1, #1
 80082e2:	e7e7      	b.n	80082b4 <_printf_float+0x1a4>
 80082e4:	2900      	cmp	r1, #0
 80082e6:	bfd4      	ite	le
 80082e8:	f1c1 0202 	rsble	r2, r1, #2
 80082ec:	2201      	movgt	r2, #1
 80082ee:	4413      	add	r3, r2
 80082f0:	e7e0      	b.n	80082b4 <_printf_float+0x1a4>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	055a      	lsls	r2, r3, #21
 80082f6:	d407      	bmi.n	8008308 <_printf_float+0x1f8>
 80082f8:	6923      	ldr	r3, [r4, #16]
 80082fa:	4642      	mov	r2, r8
 80082fc:	4631      	mov	r1, r6
 80082fe:	4628      	mov	r0, r5
 8008300:	47b8      	blx	r7
 8008302:	3001      	adds	r0, #1
 8008304:	d12c      	bne.n	8008360 <_printf_float+0x250>
 8008306:	e764      	b.n	80081d2 <_printf_float+0xc2>
 8008308:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800830c:	f240 80e0 	bls.w	80084d0 <_printf_float+0x3c0>
 8008310:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008314:	2200      	movs	r2, #0
 8008316:	2300      	movs	r3, #0
 8008318:	f7f8 fbd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800831c:	2800      	cmp	r0, #0
 800831e:	d034      	beq.n	800838a <_printf_float+0x27a>
 8008320:	4a37      	ldr	r2, [pc, #220]	; (8008400 <_printf_float+0x2f0>)
 8008322:	2301      	movs	r3, #1
 8008324:	4631      	mov	r1, r6
 8008326:	4628      	mov	r0, r5
 8008328:	47b8      	blx	r7
 800832a:	3001      	adds	r0, #1
 800832c:	f43f af51 	beq.w	80081d2 <_printf_float+0xc2>
 8008330:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008334:	429a      	cmp	r2, r3
 8008336:	db02      	blt.n	800833e <_printf_float+0x22e>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	07d8      	lsls	r0, r3, #31
 800833c:	d510      	bpl.n	8008360 <_printf_float+0x250>
 800833e:	ee18 3a10 	vmov	r3, s16
 8008342:	4652      	mov	r2, sl
 8008344:	4631      	mov	r1, r6
 8008346:	4628      	mov	r0, r5
 8008348:	47b8      	blx	r7
 800834a:	3001      	adds	r0, #1
 800834c:	f43f af41 	beq.w	80081d2 <_printf_float+0xc2>
 8008350:	f04f 0800 	mov.w	r8, #0
 8008354:	f104 091a 	add.w	r9, r4, #26
 8008358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835a:	3b01      	subs	r3, #1
 800835c:	4543      	cmp	r3, r8
 800835e:	dc09      	bgt.n	8008374 <_printf_float+0x264>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	079b      	lsls	r3, r3, #30
 8008364:	f100 8105 	bmi.w	8008572 <_printf_float+0x462>
 8008368:	68e0      	ldr	r0, [r4, #12]
 800836a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800836c:	4298      	cmp	r0, r3
 800836e:	bfb8      	it	lt
 8008370:	4618      	movlt	r0, r3
 8008372:	e730      	b.n	80081d6 <_printf_float+0xc6>
 8008374:	2301      	movs	r3, #1
 8008376:	464a      	mov	r2, r9
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	f43f af27 	beq.w	80081d2 <_printf_float+0xc2>
 8008384:	f108 0801 	add.w	r8, r8, #1
 8008388:	e7e6      	b.n	8008358 <_printf_float+0x248>
 800838a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	dc39      	bgt.n	8008404 <_printf_float+0x2f4>
 8008390:	4a1b      	ldr	r2, [pc, #108]	; (8008400 <_printf_float+0x2f0>)
 8008392:	2301      	movs	r3, #1
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f af19 	beq.w	80081d2 <_printf_float+0xc2>
 80083a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083a4:	4313      	orrs	r3, r2
 80083a6:	d102      	bne.n	80083ae <_printf_float+0x29e>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	07d9      	lsls	r1, r3, #31
 80083ac:	d5d8      	bpl.n	8008360 <_printf_float+0x250>
 80083ae:	ee18 3a10 	vmov	r3, s16
 80083b2:	4652      	mov	r2, sl
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	f43f af09 	beq.w	80081d2 <_printf_float+0xc2>
 80083c0:	f04f 0900 	mov.w	r9, #0
 80083c4:	f104 0a1a 	add.w	sl, r4, #26
 80083c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ca:	425b      	negs	r3, r3
 80083cc:	454b      	cmp	r3, r9
 80083ce:	dc01      	bgt.n	80083d4 <_printf_float+0x2c4>
 80083d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d2:	e792      	b.n	80082fa <_printf_float+0x1ea>
 80083d4:	2301      	movs	r3, #1
 80083d6:	4652      	mov	r2, sl
 80083d8:	4631      	mov	r1, r6
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	f43f aef7 	beq.w	80081d2 <_printf_float+0xc2>
 80083e4:	f109 0901 	add.w	r9, r9, #1
 80083e8:	e7ee      	b.n	80083c8 <_printf_float+0x2b8>
 80083ea:	bf00      	nop
 80083ec:	7fefffff 	.word	0x7fefffff
 80083f0:	0800becc 	.word	0x0800becc
 80083f4:	0800bed0 	.word	0x0800bed0
 80083f8:	0800bed8 	.word	0x0800bed8
 80083fc:	0800bed4 	.word	0x0800bed4
 8008400:	0800bedc 	.word	0x0800bedc
 8008404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008406:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008408:	429a      	cmp	r2, r3
 800840a:	bfa8      	it	ge
 800840c:	461a      	movge	r2, r3
 800840e:	2a00      	cmp	r2, #0
 8008410:	4691      	mov	r9, r2
 8008412:	dc37      	bgt.n	8008484 <_printf_float+0x374>
 8008414:	f04f 0b00 	mov.w	fp, #0
 8008418:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800841c:	f104 021a 	add.w	r2, r4, #26
 8008420:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008422:	9305      	str	r3, [sp, #20]
 8008424:	eba3 0309 	sub.w	r3, r3, r9
 8008428:	455b      	cmp	r3, fp
 800842a:	dc33      	bgt.n	8008494 <_printf_float+0x384>
 800842c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008430:	429a      	cmp	r2, r3
 8008432:	db3b      	blt.n	80084ac <_printf_float+0x39c>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	07da      	lsls	r2, r3, #31
 8008438:	d438      	bmi.n	80084ac <_printf_float+0x39c>
 800843a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843c:	9a05      	ldr	r2, [sp, #20]
 800843e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008440:	1a9a      	subs	r2, r3, r2
 8008442:	eba3 0901 	sub.w	r9, r3, r1
 8008446:	4591      	cmp	r9, r2
 8008448:	bfa8      	it	ge
 800844a:	4691      	movge	r9, r2
 800844c:	f1b9 0f00 	cmp.w	r9, #0
 8008450:	dc35      	bgt.n	80084be <_printf_float+0x3ae>
 8008452:	f04f 0800 	mov.w	r8, #0
 8008456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800845a:	f104 0a1a 	add.w	sl, r4, #26
 800845e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008462:	1a9b      	subs	r3, r3, r2
 8008464:	eba3 0309 	sub.w	r3, r3, r9
 8008468:	4543      	cmp	r3, r8
 800846a:	f77f af79 	ble.w	8008360 <_printf_float+0x250>
 800846e:	2301      	movs	r3, #1
 8008470:	4652      	mov	r2, sl
 8008472:	4631      	mov	r1, r6
 8008474:	4628      	mov	r0, r5
 8008476:	47b8      	blx	r7
 8008478:	3001      	adds	r0, #1
 800847a:	f43f aeaa 	beq.w	80081d2 <_printf_float+0xc2>
 800847e:	f108 0801 	add.w	r8, r8, #1
 8008482:	e7ec      	b.n	800845e <_printf_float+0x34e>
 8008484:	4613      	mov	r3, r2
 8008486:	4631      	mov	r1, r6
 8008488:	4642      	mov	r2, r8
 800848a:	4628      	mov	r0, r5
 800848c:	47b8      	blx	r7
 800848e:	3001      	adds	r0, #1
 8008490:	d1c0      	bne.n	8008414 <_printf_float+0x304>
 8008492:	e69e      	b.n	80081d2 <_printf_float+0xc2>
 8008494:	2301      	movs	r3, #1
 8008496:	4631      	mov	r1, r6
 8008498:	4628      	mov	r0, r5
 800849a:	9205      	str	r2, [sp, #20]
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f ae97 	beq.w	80081d2 <_printf_float+0xc2>
 80084a4:	9a05      	ldr	r2, [sp, #20]
 80084a6:	f10b 0b01 	add.w	fp, fp, #1
 80084aa:	e7b9      	b.n	8008420 <_printf_float+0x310>
 80084ac:	ee18 3a10 	vmov	r3, s16
 80084b0:	4652      	mov	r2, sl
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	d1be      	bne.n	800843a <_printf_float+0x32a>
 80084bc:	e689      	b.n	80081d2 <_printf_float+0xc2>
 80084be:	9a05      	ldr	r2, [sp, #20]
 80084c0:	464b      	mov	r3, r9
 80084c2:	4442      	add	r2, r8
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	d1c1      	bne.n	8008452 <_printf_float+0x342>
 80084ce:	e680      	b.n	80081d2 <_printf_float+0xc2>
 80084d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d2:	2a01      	cmp	r2, #1
 80084d4:	dc01      	bgt.n	80084da <_printf_float+0x3ca>
 80084d6:	07db      	lsls	r3, r3, #31
 80084d8:	d538      	bpl.n	800854c <_printf_float+0x43c>
 80084da:	2301      	movs	r3, #1
 80084dc:	4642      	mov	r2, r8
 80084de:	4631      	mov	r1, r6
 80084e0:	4628      	mov	r0, r5
 80084e2:	47b8      	blx	r7
 80084e4:	3001      	adds	r0, #1
 80084e6:	f43f ae74 	beq.w	80081d2 <_printf_float+0xc2>
 80084ea:	ee18 3a10 	vmov	r3, s16
 80084ee:	4652      	mov	r2, sl
 80084f0:	4631      	mov	r1, r6
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b8      	blx	r7
 80084f6:	3001      	adds	r0, #1
 80084f8:	f43f ae6b 	beq.w	80081d2 <_printf_float+0xc2>
 80084fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008500:	2200      	movs	r2, #0
 8008502:	2300      	movs	r3, #0
 8008504:	f7f8 fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008508:	b9d8      	cbnz	r0, 8008542 <_printf_float+0x432>
 800850a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850c:	f108 0201 	add.w	r2, r8, #1
 8008510:	3b01      	subs	r3, #1
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	47b8      	blx	r7
 8008518:	3001      	adds	r0, #1
 800851a:	d10e      	bne.n	800853a <_printf_float+0x42a>
 800851c:	e659      	b.n	80081d2 <_printf_float+0xc2>
 800851e:	2301      	movs	r3, #1
 8008520:	4652      	mov	r2, sl
 8008522:	4631      	mov	r1, r6
 8008524:	4628      	mov	r0, r5
 8008526:	47b8      	blx	r7
 8008528:	3001      	adds	r0, #1
 800852a:	f43f ae52 	beq.w	80081d2 <_printf_float+0xc2>
 800852e:	f108 0801 	add.w	r8, r8, #1
 8008532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008534:	3b01      	subs	r3, #1
 8008536:	4543      	cmp	r3, r8
 8008538:	dcf1      	bgt.n	800851e <_printf_float+0x40e>
 800853a:	464b      	mov	r3, r9
 800853c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008540:	e6dc      	b.n	80082fc <_printf_float+0x1ec>
 8008542:	f04f 0800 	mov.w	r8, #0
 8008546:	f104 0a1a 	add.w	sl, r4, #26
 800854a:	e7f2      	b.n	8008532 <_printf_float+0x422>
 800854c:	2301      	movs	r3, #1
 800854e:	4642      	mov	r2, r8
 8008550:	e7df      	b.n	8008512 <_printf_float+0x402>
 8008552:	2301      	movs	r3, #1
 8008554:	464a      	mov	r2, r9
 8008556:	4631      	mov	r1, r6
 8008558:	4628      	mov	r0, r5
 800855a:	47b8      	blx	r7
 800855c:	3001      	adds	r0, #1
 800855e:	f43f ae38 	beq.w	80081d2 <_printf_float+0xc2>
 8008562:	f108 0801 	add.w	r8, r8, #1
 8008566:	68e3      	ldr	r3, [r4, #12]
 8008568:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800856a:	1a5b      	subs	r3, r3, r1
 800856c:	4543      	cmp	r3, r8
 800856e:	dcf0      	bgt.n	8008552 <_printf_float+0x442>
 8008570:	e6fa      	b.n	8008368 <_printf_float+0x258>
 8008572:	f04f 0800 	mov.w	r8, #0
 8008576:	f104 0919 	add.w	r9, r4, #25
 800857a:	e7f4      	b.n	8008566 <_printf_float+0x456>

0800857c <_printf_common>:
 800857c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008580:	4616      	mov	r6, r2
 8008582:	4699      	mov	r9, r3
 8008584:	688a      	ldr	r2, [r1, #8]
 8008586:	690b      	ldr	r3, [r1, #16]
 8008588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800858c:	4293      	cmp	r3, r2
 800858e:	bfb8      	it	lt
 8008590:	4613      	movlt	r3, r2
 8008592:	6033      	str	r3, [r6, #0]
 8008594:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008598:	4607      	mov	r7, r0
 800859a:	460c      	mov	r4, r1
 800859c:	b10a      	cbz	r2, 80085a2 <_printf_common+0x26>
 800859e:	3301      	adds	r3, #1
 80085a0:	6033      	str	r3, [r6, #0]
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	0699      	lsls	r1, r3, #26
 80085a6:	bf42      	ittt	mi
 80085a8:	6833      	ldrmi	r3, [r6, #0]
 80085aa:	3302      	addmi	r3, #2
 80085ac:	6033      	strmi	r3, [r6, #0]
 80085ae:	6825      	ldr	r5, [r4, #0]
 80085b0:	f015 0506 	ands.w	r5, r5, #6
 80085b4:	d106      	bne.n	80085c4 <_printf_common+0x48>
 80085b6:	f104 0a19 	add.w	sl, r4, #25
 80085ba:	68e3      	ldr	r3, [r4, #12]
 80085bc:	6832      	ldr	r2, [r6, #0]
 80085be:	1a9b      	subs	r3, r3, r2
 80085c0:	42ab      	cmp	r3, r5
 80085c2:	dc26      	bgt.n	8008612 <_printf_common+0x96>
 80085c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085c8:	1e13      	subs	r3, r2, #0
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	bf18      	it	ne
 80085ce:	2301      	movne	r3, #1
 80085d0:	0692      	lsls	r2, r2, #26
 80085d2:	d42b      	bmi.n	800862c <_printf_common+0xb0>
 80085d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085d8:	4649      	mov	r1, r9
 80085da:	4638      	mov	r0, r7
 80085dc:	47c0      	blx	r8
 80085de:	3001      	adds	r0, #1
 80085e0:	d01e      	beq.n	8008620 <_printf_common+0xa4>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	68e5      	ldr	r5, [r4, #12]
 80085e6:	6832      	ldr	r2, [r6, #0]
 80085e8:	f003 0306 	and.w	r3, r3, #6
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	bf08      	it	eq
 80085f0:	1aad      	subeq	r5, r5, r2
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	6922      	ldr	r2, [r4, #16]
 80085f6:	bf0c      	ite	eq
 80085f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085fc:	2500      	movne	r5, #0
 80085fe:	4293      	cmp	r3, r2
 8008600:	bfc4      	itt	gt
 8008602:	1a9b      	subgt	r3, r3, r2
 8008604:	18ed      	addgt	r5, r5, r3
 8008606:	2600      	movs	r6, #0
 8008608:	341a      	adds	r4, #26
 800860a:	42b5      	cmp	r5, r6
 800860c:	d11a      	bne.n	8008644 <_printf_common+0xc8>
 800860e:	2000      	movs	r0, #0
 8008610:	e008      	b.n	8008624 <_printf_common+0xa8>
 8008612:	2301      	movs	r3, #1
 8008614:	4652      	mov	r2, sl
 8008616:	4649      	mov	r1, r9
 8008618:	4638      	mov	r0, r7
 800861a:	47c0      	blx	r8
 800861c:	3001      	adds	r0, #1
 800861e:	d103      	bne.n	8008628 <_printf_common+0xac>
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008628:	3501      	adds	r5, #1
 800862a:	e7c6      	b.n	80085ba <_printf_common+0x3e>
 800862c:	18e1      	adds	r1, r4, r3
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	2030      	movs	r0, #48	; 0x30
 8008632:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008636:	4422      	add	r2, r4
 8008638:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800863c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008640:	3302      	adds	r3, #2
 8008642:	e7c7      	b.n	80085d4 <_printf_common+0x58>
 8008644:	2301      	movs	r3, #1
 8008646:	4622      	mov	r2, r4
 8008648:	4649      	mov	r1, r9
 800864a:	4638      	mov	r0, r7
 800864c:	47c0      	blx	r8
 800864e:	3001      	adds	r0, #1
 8008650:	d0e6      	beq.n	8008620 <_printf_common+0xa4>
 8008652:	3601      	adds	r6, #1
 8008654:	e7d9      	b.n	800860a <_printf_common+0x8e>
	...

08008658 <_printf_i>:
 8008658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800865c:	7e0f      	ldrb	r7, [r1, #24]
 800865e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008660:	2f78      	cmp	r7, #120	; 0x78
 8008662:	4691      	mov	r9, r2
 8008664:	4680      	mov	r8, r0
 8008666:	460c      	mov	r4, r1
 8008668:	469a      	mov	sl, r3
 800866a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800866e:	d807      	bhi.n	8008680 <_printf_i+0x28>
 8008670:	2f62      	cmp	r7, #98	; 0x62
 8008672:	d80a      	bhi.n	800868a <_printf_i+0x32>
 8008674:	2f00      	cmp	r7, #0
 8008676:	f000 80d8 	beq.w	800882a <_printf_i+0x1d2>
 800867a:	2f58      	cmp	r7, #88	; 0x58
 800867c:	f000 80a3 	beq.w	80087c6 <_printf_i+0x16e>
 8008680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008688:	e03a      	b.n	8008700 <_printf_i+0xa8>
 800868a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800868e:	2b15      	cmp	r3, #21
 8008690:	d8f6      	bhi.n	8008680 <_printf_i+0x28>
 8008692:	a101      	add	r1, pc, #4	; (adr r1, 8008698 <_printf_i+0x40>)
 8008694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008698:	080086f1 	.word	0x080086f1
 800869c:	08008705 	.word	0x08008705
 80086a0:	08008681 	.word	0x08008681
 80086a4:	08008681 	.word	0x08008681
 80086a8:	08008681 	.word	0x08008681
 80086ac:	08008681 	.word	0x08008681
 80086b0:	08008705 	.word	0x08008705
 80086b4:	08008681 	.word	0x08008681
 80086b8:	08008681 	.word	0x08008681
 80086bc:	08008681 	.word	0x08008681
 80086c0:	08008681 	.word	0x08008681
 80086c4:	08008811 	.word	0x08008811
 80086c8:	08008735 	.word	0x08008735
 80086cc:	080087f3 	.word	0x080087f3
 80086d0:	08008681 	.word	0x08008681
 80086d4:	08008681 	.word	0x08008681
 80086d8:	08008833 	.word	0x08008833
 80086dc:	08008681 	.word	0x08008681
 80086e0:	08008735 	.word	0x08008735
 80086e4:	08008681 	.word	0x08008681
 80086e8:	08008681 	.word	0x08008681
 80086ec:	080087fb 	.word	0x080087fb
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	1d1a      	adds	r2, r3, #4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	602a      	str	r2, [r5, #0]
 80086f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008700:	2301      	movs	r3, #1
 8008702:	e0a3      	b.n	800884c <_printf_i+0x1f4>
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	6829      	ldr	r1, [r5, #0]
 8008708:	0606      	lsls	r6, r0, #24
 800870a:	f101 0304 	add.w	r3, r1, #4
 800870e:	d50a      	bpl.n	8008726 <_printf_i+0xce>
 8008710:	680e      	ldr	r6, [r1, #0]
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	2e00      	cmp	r6, #0
 8008716:	da03      	bge.n	8008720 <_printf_i+0xc8>
 8008718:	232d      	movs	r3, #45	; 0x2d
 800871a:	4276      	negs	r6, r6
 800871c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008720:	485e      	ldr	r0, [pc, #376]	; (800889c <_printf_i+0x244>)
 8008722:	230a      	movs	r3, #10
 8008724:	e019      	b.n	800875a <_printf_i+0x102>
 8008726:	680e      	ldr	r6, [r1, #0]
 8008728:	602b      	str	r3, [r5, #0]
 800872a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800872e:	bf18      	it	ne
 8008730:	b236      	sxthne	r6, r6
 8008732:	e7ef      	b.n	8008714 <_printf_i+0xbc>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	6820      	ldr	r0, [r4, #0]
 8008738:	1d19      	adds	r1, r3, #4
 800873a:	6029      	str	r1, [r5, #0]
 800873c:	0601      	lsls	r1, r0, #24
 800873e:	d501      	bpl.n	8008744 <_printf_i+0xec>
 8008740:	681e      	ldr	r6, [r3, #0]
 8008742:	e002      	b.n	800874a <_printf_i+0xf2>
 8008744:	0646      	lsls	r6, r0, #25
 8008746:	d5fb      	bpl.n	8008740 <_printf_i+0xe8>
 8008748:	881e      	ldrh	r6, [r3, #0]
 800874a:	4854      	ldr	r0, [pc, #336]	; (800889c <_printf_i+0x244>)
 800874c:	2f6f      	cmp	r7, #111	; 0x6f
 800874e:	bf0c      	ite	eq
 8008750:	2308      	moveq	r3, #8
 8008752:	230a      	movne	r3, #10
 8008754:	2100      	movs	r1, #0
 8008756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800875a:	6865      	ldr	r5, [r4, #4]
 800875c:	60a5      	str	r5, [r4, #8]
 800875e:	2d00      	cmp	r5, #0
 8008760:	bfa2      	ittt	ge
 8008762:	6821      	ldrge	r1, [r4, #0]
 8008764:	f021 0104 	bicge.w	r1, r1, #4
 8008768:	6021      	strge	r1, [r4, #0]
 800876a:	b90e      	cbnz	r6, 8008770 <_printf_i+0x118>
 800876c:	2d00      	cmp	r5, #0
 800876e:	d04d      	beq.n	800880c <_printf_i+0x1b4>
 8008770:	4615      	mov	r5, r2
 8008772:	fbb6 f1f3 	udiv	r1, r6, r3
 8008776:	fb03 6711 	mls	r7, r3, r1, r6
 800877a:	5dc7      	ldrb	r7, [r0, r7]
 800877c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008780:	4637      	mov	r7, r6
 8008782:	42bb      	cmp	r3, r7
 8008784:	460e      	mov	r6, r1
 8008786:	d9f4      	bls.n	8008772 <_printf_i+0x11a>
 8008788:	2b08      	cmp	r3, #8
 800878a:	d10b      	bne.n	80087a4 <_printf_i+0x14c>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	07de      	lsls	r6, r3, #31
 8008790:	d508      	bpl.n	80087a4 <_printf_i+0x14c>
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	6861      	ldr	r1, [r4, #4]
 8008796:	4299      	cmp	r1, r3
 8008798:	bfde      	ittt	le
 800879a:	2330      	movle	r3, #48	; 0x30
 800879c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087a4:	1b52      	subs	r2, r2, r5
 80087a6:	6122      	str	r2, [r4, #16]
 80087a8:	f8cd a000 	str.w	sl, [sp]
 80087ac:	464b      	mov	r3, r9
 80087ae:	aa03      	add	r2, sp, #12
 80087b0:	4621      	mov	r1, r4
 80087b2:	4640      	mov	r0, r8
 80087b4:	f7ff fee2 	bl	800857c <_printf_common>
 80087b8:	3001      	adds	r0, #1
 80087ba:	d14c      	bne.n	8008856 <_printf_i+0x1fe>
 80087bc:	f04f 30ff 	mov.w	r0, #4294967295
 80087c0:	b004      	add	sp, #16
 80087c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c6:	4835      	ldr	r0, [pc, #212]	; (800889c <_printf_i+0x244>)
 80087c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087cc:	6829      	ldr	r1, [r5, #0]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80087d4:	6029      	str	r1, [r5, #0]
 80087d6:	061d      	lsls	r5, r3, #24
 80087d8:	d514      	bpl.n	8008804 <_printf_i+0x1ac>
 80087da:	07df      	lsls	r7, r3, #31
 80087dc:	bf44      	itt	mi
 80087de:	f043 0320 	orrmi.w	r3, r3, #32
 80087e2:	6023      	strmi	r3, [r4, #0]
 80087e4:	b91e      	cbnz	r6, 80087ee <_printf_i+0x196>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	f023 0320 	bic.w	r3, r3, #32
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	2310      	movs	r3, #16
 80087f0:	e7b0      	b.n	8008754 <_printf_i+0xfc>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	f043 0320 	orr.w	r3, r3, #32
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	2378      	movs	r3, #120	; 0x78
 80087fc:	4828      	ldr	r0, [pc, #160]	; (80088a0 <_printf_i+0x248>)
 80087fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008802:	e7e3      	b.n	80087cc <_printf_i+0x174>
 8008804:	0659      	lsls	r1, r3, #25
 8008806:	bf48      	it	mi
 8008808:	b2b6      	uxthmi	r6, r6
 800880a:	e7e6      	b.n	80087da <_printf_i+0x182>
 800880c:	4615      	mov	r5, r2
 800880e:	e7bb      	b.n	8008788 <_printf_i+0x130>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	6826      	ldr	r6, [r4, #0]
 8008814:	6961      	ldr	r1, [r4, #20]
 8008816:	1d18      	adds	r0, r3, #4
 8008818:	6028      	str	r0, [r5, #0]
 800881a:	0635      	lsls	r5, r6, #24
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	d501      	bpl.n	8008824 <_printf_i+0x1cc>
 8008820:	6019      	str	r1, [r3, #0]
 8008822:	e002      	b.n	800882a <_printf_i+0x1d2>
 8008824:	0670      	lsls	r0, r6, #25
 8008826:	d5fb      	bpl.n	8008820 <_printf_i+0x1c8>
 8008828:	8019      	strh	r1, [r3, #0]
 800882a:	2300      	movs	r3, #0
 800882c:	6123      	str	r3, [r4, #16]
 800882e:	4615      	mov	r5, r2
 8008830:	e7ba      	b.n	80087a8 <_printf_i+0x150>
 8008832:	682b      	ldr	r3, [r5, #0]
 8008834:	1d1a      	adds	r2, r3, #4
 8008836:	602a      	str	r2, [r5, #0]
 8008838:	681d      	ldr	r5, [r3, #0]
 800883a:	6862      	ldr	r2, [r4, #4]
 800883c:	2100      	movs	r1, #0
 800883e:	4628      	mov	r0, r5
 8008840:	f7f7 fcce 	bl	80001e0 <memchr>
 8008844:	b108      	cbz	r0, 800884a <_printf_i+0x1f2>
 8008846:	1b40      	subs	r0, r0, r5
 8008848:	6060      	str	r0, [r4, #4]
 800884a:	6863      	ldr	r3, [r4, #4]
 800884c:	6123      	str	r3, [r4, #16]
 800884e:	2300      	movs	r3, #0
 8008850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008854:	e7a8      	b.n	80087a8 <_printf_i+0x150>
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	462a      	mov	r2, r5
 800885a:	4649      	mov	r1, r9
 800885c:	4640      	mov	r0, r8
 800885e:	47d0      	blx	sl
 8008860:	3001      	adds	r0, #1
 8008862:	d0ab      	beq.n	80087bc <_printf_i+0x164>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	079b      	lsls	r3, r3, #30
 8008868:	d413      	bmi.n	8008892 <_printf_i+0x23a>
 800886a:	68e0      	ldr	r0, [r4, #12]
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	4298      	cmp	r0, r3
 8008870:	bfb8      	it	lt
 8008872:	4618      	movlt	r0, r3
 8008874:	e7a4      	b.n	80087c0 <_printf_i+0x168>
 8008876:	2301      	movs	r3, #1
 8008878:	4632      	mov	r2, r6
 800887a:	4649      	mov	r1, r9
 800887c:	4640      	mov	r0, r8
 800887e:	47d0      	blx	sl
 8008880:	3001      	adds	r0, #1
 8008882:	d09b      	beq.n	80087bc <_printf_i+0x164>
 8008884:	3501      	adds	r5, #1
 8008886:	68e3      	ldr	r3, [r4, #12]
 8008888:	9903      	ldr	r1, [sp, #12]
 800888a:	1a5b      	subs	r3, r3, r1
 800888c:	42ab      	cmp	r3, r5
 800888e:	dcf2      	bgt.n	8008876 <_printf_i+0x21e>
 8008890:	e7eb      	b.n	800886a <_printf_i+0x212>
 8008892:	2500      	movs	r5, #0
 8008894:	f104 0619 	add.w	r6, r4, #25
 8008898:	e7f5      	b.n	8008886 <_printf_i+0x22e>
 800889a:	bf00      	nop
 800889c:	0800bede 	.word	0x0800bede
 80088a0:	0800beef 	.word	0x0800beef

080088a4 <siprintf>:
 80088a4:	b40e      	push	{r1, r2, r3}
 80088a6:	b500      	push	{lr}
 80088a8:	b09c      	sub	sp, #112	; 0x70
 80088aa:	ab1d      	add	r3, sp, #116	; 0x74
 80088ac:	9002      	str	r0, [sp, #8]
 80088ae:	9006      	str	r0, [sp, #24]
 80088b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088b4:	4809      	ldr	r0, [pc, #36]	; (80088dc <siprintf+0x38>)
 80088b6:	9107      	str	r1, [sp, #28]
 80088b8:	9104      	str	r1, [sp, #16]
 80088ba:	4909      	ldr	r1, [pc, #36]	; (80088e0 <siprintf+0x3c>)
 80088bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c0:	9105      	str	r1, [sp, #20]
 80088c2:	6800      	ldr	r0, [r0, #0]
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	a902      	add	r1, sp, #8
 80088c8:	f001 fb80 	bl	8009fcc <_svfiprintf_r>
 80088cc:	9b02      	ldr	r3, [sp, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	b01c      	add	sp, #112	; 0x70
 80088d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088d8:	b003      	add	sp, #12
 80088da:	4770      	bx	lr
 80088dc:	20000028 	.word	0x20000028
 80088e0:	ffff0208 	.word	0xffff0208

080088e4 <strcpy>:
 80088e4:	4603      	mov	r3, r0
 80088e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ea:	f803 2b01 	strb.w	r2, [r3], #1
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	d1f9      	bne.n	80088e6 <strcpy+0x2>
 80088f2:	4770      	bx	lr

080088f4 <quorem>:
 80088f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	6903      	ldr	r3, [r0, #16]
 80088fa:	690c      	ldr	r4, [r1, #16]
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	4607      	mov	r7, r0
 8008900:	f2c0 8081 	blt.w	8008a06 <quorem+0x112>
 8008904:	3c01      	subs	r4, #1
 8008906:	f101 0814 	add.w	r8, r1, #20
 800890a:	f100 0514 	add.w	r5, r0, #20
 800890e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800891c:	3301      	adds	r3, #1
 800891e:	429a      	cmp	r2, r3
 8008920:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008924:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008928:	fbb2 f6f3 	udiv	r6, r2, r3
 800892c:	d331      	bcc.n	8008992 <quorem+0x9e>
 800892e:	f04f 0e00 	mov.w	lr, #0
 8008932:	4640      	mov	r0, r8
 8008934:	46ac      	mov	ip, r5
 8008936:	46f2      	mov	sl, lr
 8008938:	f850 2b04 	ldr.w	r2, [r0], #4
 800893c:	b293      	uxth	r3, r2
 800893e:	fb06 e303 	mla	r3, r6, r3, lr
 8008942:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008946:	b29b      	uxth	r3, r3
 8008948:	ebaa 0303 	sub.w	r3, sl, r3
 800894c:	f8dc a000 	ldr.w	sl, [ip]
 8008950:	0c12      	lsrs	r2, r2, #16
 8008952:	fa13 f38a 	uxtah	r3, r3, sl
 8008956:	fb06 e202 	mla	r2, r6, r2, lr
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008962:	b292      	uxth	r2, r2
 8008964:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800896c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008970:	4581      	cmp	r9, r0
 8008972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008976:	f84c 3b04 	str.w	r3, [ip], #4
 800897a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800897e:	d2db      	bcs.n	8008938 <quorem+0x44>
 8008980:	f855 300b 	ldr.w	r3, [r5, fp]
 8008984:	b92b      	cbnz	r3, 8008992 <quorem+0x9e>
 8008986:	9b01      	ldr	r3, [sp, #4]
 8008988:	3b04      	subs	r3, #4
 800898a:	429d      	cmp	r5, r3
 800898c:	461a      	mov	r2, r3
 800898e:	d32e      	bcc.n	80089ee <quorem+0xfa>
 8008990:	613c      	str	r4, [r7, #16]
 8008992:	4638      	mov	r0, r7
 8008994:	f001 f8c6 	bl	8009b24 <__mcmp>
 8008998:	2800      	cmp	r0, #0
 800899a:	db24      	blt.n	80089e6 <quorem+0xf2>
 800899c:	3601      	adds	r6, #1
 800899e:	4628      	mov	r0, r5
 80089a0:	f04f 0c00 	mov.w	ip, #0
 80089a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80089a8:	f8d0 e000 	ldr.w	lr, [r0]
 80089ac:	b293      	uxth	r3, r2
 80089ae:	ebac 0303 	sub.w	r3, ip, r3
 80089b2:	0c12      	lsrs	r2, r2, #16
 80089b4:	fa13 f38e 	uxtah	r3, r3, lr
 80089b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089c6:	45c1      	cmp	r9, r8
 80089c8:	f840 3b04 	str.w	r3, [r0], #4
 80089cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089d0:	d2e8      	bcs.n	80089a4 <quorem+0xb0>
 80089d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089da:	b922      	cbnz	r2, 80089e6 <quorem+0xf2>
 80089dc:	3b04      	subs	r3, #4
 80089de:	429d      	cmp	r5, r3
 80089e0:	461a      	mov	r2, r3
 80089e2:	d30a      	bcc.n	80089fa <quorem+0x106>
 80089e4:	613c      	str	r4, [r7, #16]
 80089e6:	4630      	mov	r0, r6
 80089e8:	b003      	add	sp, #12
 80089ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ee:	6812      	ldr	r2, [r2, #0]
 80089f0:	3b04      	subs	r3, #4
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d1cc      	bne.n	8008990 <quorem+0x9c>
 80089f6:	3c01      	subs	r4, #1
 80089f8:	e7c7      	b.n	800898a <quorem+0x96>
 80089fa:	6812      	ldr	r2, [r2, #0]
 80089fc:	3b04      	subs	r3, #4
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	d1f0      	bne.n	80089e4 <quorem+0xf0>
 8008a02:	3c01      	subs	r4, #1
 8008a04:	e7eb      	b.n	80089de <quorem+0xea>
 8008a06:	2000      	movs	r0, #0
 8008a08:	e7ee      	b.n	80089e8 <quorem+0xf4>
 8008a0a:	0000      	movs	r0, r0
 8008a0c:	0000      	movs	r0, r0
	...

08008a10 <_dtoa_r>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	ed2d 8b04 	vpush	{d8-d9}
 8008a18:	ec57 6b10 	vmov	r6, r7, d0
 8008a1c:	b093      	sub	sp, #76	; 0x4c
 8008a1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a24:	9106      	str	r1, [sp, #24]
 8008a26:	ee10 aa10 	vmov	sl, s0
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a30:	46bb      	mov	fp, r7
 8008a32:	b975      	cbnz	r5, 8008a52 <_dtoa_r+0x42>
 8008a34:	2010      	movs	r0, #16
 8008a36:	f000 fddd 	bl	80095f4 <malloc>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	6260      	str	r0, [r4, #36]	; 0x24
 8008a3e:	b920      	cbnz	r0, 8008a4a <_dtoa_r+0x3a>
 8008a40:	4ba7      	ldr	r3, [pc, #668]	; (8008ce0 <_dtoa_r+0x2d0>)
 8008a42:	21ea      	movs	r1, #234	; 0xea
 8008a44:	48a7      	ldr	r0, [pc, #668]	; (8008ce4 <_dtoa_r+0x2d4>)
 8008a46:	f001 fbd1 	bl	800a1ec <__assert_func>
 8008a4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a4e:	6005      	str	r5, [r0, #0]
 8008a50:	60c5      	str	r5, [r0, #12]
 8008a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a54:	6819      	ldr	r1, [r3, #0]
 8008a56:	b151      	cbz	r1, 8008a6e <_dtoa_r+0x5e>
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	604a      	str	r2, [r1, #4]
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4093      	lsls	r3, r2
 8008a60:	608b      	str	r3, [r1, #8]
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fe1c 	bl	80096a0 <_Bfree>
 8008a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	1e3b      	subs	r3, r7, #0
 8008a70:	bfaa      	itet	ge
 8008a72:	2300      	movge	r3, #0
 8008a74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a78:	f8c8 3000 	strge.w	r3, [r8]
 8008a7c:	4b9a      	ldr	r3, [pc, #616]	; (8008ce8 <_dtoa_r+0x2d8>)
 8008a7e:	bfbc      	itt	lt
 8008a80:	2201      	movlt	r2, #1
 8008a82:	f8c8 2000 	strlt.w	r2, [r8]
 8008a86:	ea33 030b 	bics.w	r3, r3, fp
 8008a8a:	d11b      	bne.n	8008ac4 <_dtoa_r+0xb4>
 8008a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a98:	4333      	orrs	r3, r6
 8008a9a:	f000 8592 	beq.w	80095c2 <_dtoa_r+0xbb2>
 8008a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aa0:	b963      	cbnz	r3, 8008abc <_dtoa_r+0xac>
 8008aa2:	4b92      	ldr	r3, [pc, #584]	; (8008cec <_dtoa_r+0x2dc>)
 8008aa4:	e022      	b.n	8008aec <_dtoa_r+0xdc>
 8008aa6:	4b92      	ldr	r3, [pc, #584]	; (8008cf0 <_dtoa_r+0x2e0>)
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	9801      	ldr	r0, [sp, #4]
 8008ab2:	b013      	add	sp, #76	; 0x4c
 8008ab4:	ecbd 8b04 	vpop	{d8-d9}
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	4b8b      	ldr	r3, [pc, #556]	; (8008cec <_dtoa_r+0x2dc>)
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	3303      	adds	r3, #3
 8008ac2:	e7f3      	b.n	8008aac <_dtoa_r+0x9c>
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	4650      	mov	r0, sl
 8008aca:	4659      	mov	r1, fp
 8008acc:	f7f7 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ad0:	ec4b ab19 	vmov	d9, sl, fp
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	b158      	cbz	r0, 8008af0 <_dtoa_r+0xe0>
 8008ad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ada:	2301      	movs	r3, #1
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 856b 	beq.w	80095bc <_dtoa_r+0xbac>
 8008ae6:	4883      	ldr	r0, [pc, #524]	; (8008cf4 <_dtoa_r+0x2e4>)
 8008ae8:	6018      	str	r0, [r3, #0]
 8008aea:	1e43      	subs	r3, r0, #1
 8008aec:	9301      	str	r3, [sp, #4]
 8008aee:	e7df      	b.n	8008ab0 <_dtoa_r+0xa0>
 8008af0:	ec4b ab10 	vmov	d0, sl, fp
 8008af4:	aa10      	add	r2, sp, #64	; 0x40
 8008af6:	a911      	add	r1, sp, #68	; 0x44
 8008af8:	4620      	mov	r0, r4
 8008afa:	f001 f8b9 	bl	8009c70 <__d2b>
 8008afe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008b02:	ee08 0a10 	vmov	s16, r0
 8008b06:	2d00      	cmp	r5, #0
 8008b08:	f000 8084 	beq.w	8008c14 <_dtoa_r+0x204>
 8008b0c:	ee19 3a90 	vmov	r3, s19
 8008b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b18:	4656      	mov	r6, sl
 8008b1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008b26:	4b74      	ldr	r3, [pc, #464]	; (8008cf8 <_dtoa_r+0x2e8>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	f7f7 fbab 	bl	8000288 <__aeabi_dsub>
 8008b32:	a365      	add	r3, pc, #404	; (adr r3, 8008cc8 <_dtoa_r+0x2b8>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fd5e 	bl	80005f8 <__aeabi_dmul>
 8008b3c:	a364      	add	r3, pc, #400	; (adr r3, 8008cd0 <_dtoa_r+0x2c0>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f7f7 fba3 	bl	800028c <__adddf3>
 8008b46:	4606      	mov	r6, r0
 8008b48:	4628      	mov	r0, r5
 8008b4a:	460f      	mov	r7, r1
 8008b4c:	f7f7 fcea 	bl	8000524 <__aeabi_i2d>
 8008b50:	a361      	add	r3, pc, #388	; (adr r3, 8008cd8 <_dtoa_r+0x2c8>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f7f7 fd4f 	bl	80005f8 <__aeabi_dmul>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4639      	mov	r1, r7
 8008b62:	f7f7 fb93 	bl	800028c <__adddf3>
 8008b66:	4606      	mov	r6, r0
 8008b68:	460f      	mov	r7, r1
 8008b6a:	f7f7 fff5 	bl	8000b58 <__aeabi_d2iz>
 8008b6e:	2200      	movs	r2, #0
 8008b70:	9000      	str	r0, [sp, #0]
 8008b72:	2300      	movs	r3, #0
 8008b74:	4630      	mov	r0, r6
 8008b76:	4639      	mov	r1, r7
 8008b78:	f7f7 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8008b7c:	b150      	cbz	r0, 8008b94 <_dtoa_r+0x184>
 8008b7e:	9800      	ldr	r0, [sp, #0]
 8008b80:	f7f7 fcd0 	bl	8000524 <__aeabi_i2d>
 8008b84:	4632      	mov	r2, r6
 8008b86:	463b      	mov	r3, r7
 8008b88:	f7f7 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b8c:	b910      	cbnz	r0, 8008b94 <_dtoa_r+0x184>
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	9b00      	ldr	r3, [sp, #0]
 8008b96:	2b16      	cmp	r3, #22
 8008b98:	d85a      	bhi.n	8008c50 <_dtoa_r+0x240>
 8008b9a:	9a00      	ldr	r2, [sp, #0]
 8008b9c:	4b57      	ldr	r3, [pc, #348]	; (8008cfc <_dtoa_r+0x2ec>)
 8008b9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	ec51 0b19 	vmov	r0, r1, d9
 8008baa:	f7f7 ff97 	bl	8000adc <__aeabi_dcmplt>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d050      	beq.n	8008c54 <_dtoa_r+0x244>
 8008bb2:	9b00      	ldr	r3, [sp, #0]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bbe:	1b5d      	subs	r5, r3, r5
 8008bc0:	1e6b      	subs	r3, r5, #1
 8008bc2:	9305      	str	r3, [sp, #20]
 8008bc4:	bf45      	ittet	mi
 8008bc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bca:	9304      	strmi	r3, [sp, #16]
 8008bcc:	2300      	movpl	r3, #0
 8008bce:	2300      	movmi	r3, #0
 8008bd0:	bf4c      	ite	mi
 8008bd2:	9305      	strmi	r3, [sp, #20]
 8008bd4:	9304      	strpl	r3, [sp, #16]
 8008bd6:	9b00      	ldr	r3, [sp, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	db3d      	blt.n	8008c58 <_dtoa_r+0x248>
 8008bdc:	9b05      	ldr	r3, [sp, #20]
 8008bde:	9a00      	ldr	r2, [sp, #0]
 8008be0:	920a      	str	r2, [sp, #40]	; 0x28
 8008be2:	4413      	add	r3, r2
 8008be4:	9305      	str	r3, [sp, #20]
 8008be6:	2300      	movs	r3, #0
 8008be8:	9307      	str	r3, [sp, #28]
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	2b09      	cmp	r3, #9
 8008bee:	f200 8089 	bhi.w	8008d04 <_dtoa_r+0x2f4>
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	bfc4      	itt	gt
 8008bf6:	3b04      	subgt	r3, #4
 8008bf8:	9306      	strgt	r3, [sp, #24]
 8008bfa:	9b06      	ldr	r3, [sp, #24]
 8008bfc:	f1a3 0302 	sub.w	r3, r3, #2
 8008c00:	bfcc      	ite	gt
 8008c02:	2500      	movgt	r5, #0
 8008c04:	2501      	movle	r5, #1
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	f200 8087 	bhi.w	8008d1a <_dtoa_r+0x30a>
 8008c0c:	e8df f003 	tbb	[pc, r3]
 8008c10:	59383a2d 	.word	0x59383a2d
 8008c14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c18:	441d      	add	r5, r3
 8008c1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	bfc1      	itttt	gt
 8008c22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008c2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c32:	bfda      	itte	le
 8008c34:	f1c3 0320 	rsble	r3, r3, #32
 8008c38:	fa06 f003 	lslle.w	r0, r6, r3
 8008c3c:	4318      	orrgt	r0, r3
 8008c3e:	f7f7 fc61 	bl	8000504 <__aeabi_ui2d>
 8008c42:	2301      	movs	r3, #1
 8008c44:	4606      	mov	r6, r0
 8008c46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c4a:	3d01      	subs	r5, #1
 8008c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c4e:	e76a      	b.n	8008b26 <_dtoa_r+0x116>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e7b2      	b.n	8008bba <_dtoa_r+0x1aa>
 8008c54:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c56:	e7b1      	b.n	8008bbc <_dtoa_r+0x1ac>
 8008c58:	9b04      	ldr	r3, [sp, #16]
 8008c5a:	9a00      	ldr	r2, [sp, #0]
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	9304      	str	r3, [sp, #16]
 8008c60:	4253      	negs	r3, r2
 8008c62:	9307      	str	r3, [sp, #28]
 8008c64:	2300      	movs	r3, #0
 8008c66:	930a      	str	r3, [sp, #40]	; 0x28
 8008c68:	e7bf      	b.n	8008bea <_dtoa_r+0x1da>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9308      	str	r3, [sp, #32]
 8008c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dc55      	bgt.n	8008d20 <_dtoa_r+0x310>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c7e:	e00c      	b.n	8008c9a <_dtoa_r+0x28a>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e7f3      	b.n	8008c6c <_dtoa_r+0x25c>
 8008c84:	2300      	movs	r3, #0
 8008c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c88:	9308      	str	r3, [sp, #32]
 8008c8a:	9b00      	ldr	r3, [sp, #0]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	9302      	str	r3, [sp, #8]
 8008c90:	3301      	adds	r3, #1
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	9303      	str	r3, [sp, #12]
 8008c96:	bfb8      	it	lt
 8008c98:	2301      	movlt	r3, #1
 8008c9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	6042      	str	r2, [r0, #4]
 8008ca0:	2204      	movs	r2, #4
 8008ca2:	f102 0614 	add.w	r6, r2, #20
 8008ca6:	429e      	cmp	r6, r3
 8008ca8:	6841      	ldr	r1, [r0, #4]
 8008caa:	d93d      	bls.n	8008d28 <_dtoa_r+0x318>
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 fcb7 	bl	8009620 <_Balloc>
 8008cb2:	9001      	str	r0, [sp, #4]
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d13b      	bne.n	8008d30 <_dtoa_r+0x320>
 8008cb8:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <_dtoa_r+0x2f0>)
 8008cba:	4602      	mov	r2, r0
 8008cbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008cc0:	e6c0      	b.n	8008a44 <_dtoa_r+0x34>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7df      	b.n	8008c86 <_dtoa_r+0x276>
 8008cc6:	bf00      	nop
 8008cc8:	636f4361 	.word	0x636f4361
 8008ccc:	3fd287a7 	.word	0x3fd287a7
 8008cd0:	8b60c8b3 	.word	0x8b60c8b3
 8008cd4:	3fc68a28 	.word	0x3fc68a28
 8008cd8:	509f79fb 	.word	0x509f79fb
 8008cdc:	3fd34413 	.word	0x3fd34413
 8008ce0:	0800bf0d 	.word	0x0800bf0d
 8008ce4:	0800bf24 	.word	0x0800bf24
 8008ce8:	7ff00000 	.word	0x7ff00000
 8008cec:	0800bf09 	.word	0x0800bf09
 8008cf0:	0800bf00 	.word	0x0800bf00
 8008cf4:	0800bedd 	.word	0x0800bedd
 8008cf8:	3ff80000 	.word	0x3ff80000
 8008cfc:	0800c018 	.word	0x0800c018
 8008d00:	0800bf7f 	.word	0x0800bf7f
 8008d04:	2501      	movs	r5, #1
 8008d06:	2300      	movs	r3, #0
 8008d08:	9306      	str	r3, [sp, #24]
 8008d0a:	9508      	str	r5, [sp, #32]
 8008d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d14:	2200      	movs	r2, #0
 8008d16:	2312      	movs	r3, #18
 8008d18:	e7b0      	b.n	8008c7c <_dtoa_r+0x26c>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	9308      	str	r3, [sp, #32]
 8008d1e:	e7f5      	b.n	8008d0c <_dtoa_r+0x2fc>
 8008d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d26:	e7b8      	b.n	8008c9a <_dtoa_r+0x28a>
 8008d28:	3101      	adds	r1, #1
 8008d2a:	6041      	str	r1, [r0, #4]
 8008d2c:	0052      	lsls	r2, r2, #1
 8008d2e:	e7b8      	b.n	8008ca2 <_dtoa_r+0x292>
 8008d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d32:	9a01      	ldr	r2, [sp, #4]
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	2b0e      	cmp	r3, #14
 8008d3a:	f200 809d 	bhi.w	8008e78 <_dtoa_r+0x468>
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	f000 809a 	beq.w	8008e78 <_dtoa_r+0x468>
 8008d44:	9b00      	ldr	r3, [sp, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	dd32      	ble.n	8008db0 <_dtoa_r+0x3a0>
 8008d4a:	4ab7      	ldr	r2, [pc, #732]	; (8009028 <_dtoa_r+0x618>)
 8008d4c:	f003 030f 	and.w	r3, r3, #15
 8008d50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d58:	9b00      	ldr	r3, [sp, #0]
 8008d5a:	05d8      	lsls	r0, r3, #23
 8008d5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d60:	d516      	bpl.n	8008d90 <_dtoa_r+0x380>
 8008d62:	4bb2      	ldr	r3, [pc, #712]	; (800902c <_dtoa_r+0x61c>)
 8008d64:	ec51 0b19 	vmov	r0, r1, d9
 8008d68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d6c:	f7f7 fd6e 	bl	800084c <__aeabi_ddiv>
 8008d70:	f007 070f 	and.w	r7, r7, #15
 8008d74:	4682      	mov	sl, r0
 8008d76:	468b      	mov	fp, r1
 8008d78:	2503      	movs	r5, #3
 8008d7a:	4eac      	ldr	r6, [pc, #688]	; (800902c <_dtoa_r+0x61c>)
 8008d7c:	b957      	cbnz	r7, 8008d94 <_dtoa_r+0x384>
 8008d7e:	4642      	mov	r2, r8
 8008d80:	464b      	mov	r3, r9
 8008d82:	4650      	mov	r0, sl
 8008d84:	4659      	mov	r1, fp
 8008d86:	f7f7 fd61 	bl	800084c <__aeabi_ddiv>
 8008d8a:	4682      	mov	sl, r0
 8008d8c:	468b      	mov	fp, r1
 8008d8e:	e028      	b.n	8008de2 <_dtoa_r+0x3d2>
 8008d90:	2502      	movs	r5, #2
 8008d92:	e7f2      	b.n	8008d7a <_dtoa_r+0x36a>
 8008d94:	07f9      	lsls	r1, r7, #31
 8008d96:	d508      	bpl.n	8008daa <_dtoa_r+0x39a>
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008da0:	f7f7 fc2a 	bl	80005f8 <__aeabi_dmul>
 8008da4:	3501      	adds	r5, #1
 8008da6:	4680      	mov	r8, r0
 8008da8:	4689      	mov	r9, r1
 8008daa:	107f      	asrs	r7, r7, #1
 8008dac:	3608      	adds	r6, #8
 8008dae:	e7e5      	b.n	8008d7c <_dtoa_r+0x36c>
 8008db0:	f000 809b 	beq.w	8008eea <_dtoa_r+0x4da>
 8008db4:	9b00      	ldr	r3, [sp, #0]
 8008db6:	4f9d      	ldr	r7, [pc, #628]	; (800902c <_dtoa_r+0x61c>)
 8008db8:	425e      	negs	r6, r3
 8008dba:	4b9b      	ldr	r3, [pc, #620]	; (8009028 <_dtoa_r+0x618>)
 8008dbc:	f006 020f 	and.w	r2, r6, #15
 8008dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	ec51 0b19 	vmov	r0, r1, d9
 8008dcc:	f7f7 fc14 	bl	80005f8 <__aeabi_dmul>
 8008dd0:	1136      	asrs	r6, r6, #4
 8008dd2:	4682      	mov	sl, r0
 8008dd4:	468b      	mov	fp, r1
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2502      	movs	r5, #2
 8008dda:	2e00      	cmp	r6, #0
 8008ddc:	d17a      	bne.n	8008ed4 <_dtoa_r+0x4c4>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1d3      	bne.n	8008d8a <_dtoa_r+0x37a>
 8008de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8082 	beq.w	8008eee <_dtoa_r+0x4de>
 8008dea:	4b91      	ldr	r3, [pc, #580]	; (8009030 <_dtoa_r+0x620>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	4650      	mov	r0, sl
 8008df0:	4659      	mov	r1, fp
 8008df2:	f7f7 fe73 	bl	8000adc <__aeabi_dcmplt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d079      	beq.n	8008eee <_dtoa_r+0x4de>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d076      	beq.n	8008eee <_dtoa_r+0x4de>
 8008e00:	9b02      	ldr	r3, [sp, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dd36      	ble.n	8008e74 <_dtoa_r+0x464>
 8008e06:	9b00      	ldr	r3, [sp, #0]
 8008e08:	4650      	mov	r0, sl
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	1e5f      	subs	r7, r3, #1
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4b88      	ldr	r3, [pc, #544]	; (8009034 <_dtoa_r+0x624>)
 8008e12:	f7f7 fbf1 	bl	80005f8 <__aeabi_dmul>
 8008e16:	9e02      	ldr	r6, [sp, #8]
 8008e18:	4682      	mov	sl, r0
 8008e1a:	468b      	mov	fp, r1
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7f7 fb80 	bl	8000524 <__aeabi_i2d>
 8008e24:	4652      	mov	r2, sl
 8008e26:	465b      	mov	r3, fp
 8008e28:	f7f7 fbe6 	bl	80005f8 <__aeabi_dmul>
 8008e2c:	4b82      	ldr	r3, [pc, #520]	; (8009038 <_dtoa_r+0x628>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f7f7 fa2c 	bl	800028c <__adddf3>
 8008e34:	46d0      	mov	r8, sl
 8008e36:	46d9      	mov	r9, fp
 8008e38:	4682      	mov	sl, r0
 8008e3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	d158      	bne.n	8008ef4 <_dtoa_r+0x4e4>
 8008e42:	4b7e      	ldr	r3, [pc, #504]	; (800903c <_dtoa_r+0x62c>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	4640      	mov	r0, r8
 8008e48:	4649      	mov	r1, r9
 8008e4a:	f7f7 fa1d 	bl	8000288 <__aeabi_dsub>
 8008e4e:	4652      	mov	r2, sl
 8008e50:	465b      	mov	r3, fp
 8008e52:	4680      	mov	r8, r0
 8008e54:	4689      	mov	r9, r1
 8008e56:	f7f7 fe5f 	bl	8000b18 <__aeabi_dcmpgt>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f040 8295 	bne.w	800938a <_dtoa_r+0x97a>
 8008e60:	4652      	mov	r2, sl
 8008e62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e66:	4640      	mov	r0, r8
 8008e68:	4649      	mov	r1, r9
 8008e6a:	f7f7 fe37 	bl	8000adc <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f040 8289 	bne.w	8009386 <_dtoa_r+0x976>
 8008e74:	ec5b ab19 	vmov	sl, fp, d9
 8008e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f2c0 8148 	blt.w	8009110 <_dtoa_r+0x700>
 8008e80:	9a00      	ldr	r2, [sp, #0]
 8008e82:	2a0e      	cmp	r2, #14
 8008e84:	f300 8144 	bgt.w	8009110 <_dtoa_r+0x700>
 8008e88:	4b67      	ldr	r3, [pc, #412]	; (8009028 <_dtoa_r+0x618>)
 8008e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f280 80d5 	bge.w	8009044 <_dtoa_r+0x634>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f300 80d1 	bgt.w	8009044 <_dtoa_r+0x634>
 8008ea2:	f040 826f 	bne.w	8009384 <_dtoa_r+0x974>
 8008ea6:	4b65      	ldr	r3, [pc, #404]	; (800903c <_dtoa_r+0x62c>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	f7f7 fba3 	bl	80005f8 <__aeabi_dmul>
 8008eb2:	4652      	mov	r2, sl
 8008eb4:	465b      	mov	r3, fp
 8008eb6:	f7f7 fe25 	bl	8000b04 <__aeabi_dcmpge>
 8008eba:	9e03      	ldr	r6, [sp, #12]
 8008ebc:	4637      	mov	r7, r6
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f040 8245 	bne.w	800934e <_dtoa_r+0x93e>
 8008ec4:	9d01      	ldr	r5, [sp, #4]
 8008ec6:	2331      	movs	r3, #49	; 0x31
 8008ec8:	f805 3b01 	strb.w	r3, [r5], #1
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	e240      	b.n	8009356 <_dtoa_r+0x946>
 8008ed4:	07f2      	lsls	r2, r6, #31
 8008ed6:	d505      	bpl.n	8008ee4 <_dtoa_r+0x4d4>
 8008ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008edc:	f7f7 fb8c 	bl	80005f8 <__aeabi_dmul>
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	1076      	asrs	r6, r6, #1
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	e777      	b.n	8008dda <_dtoa_r+0x3ca>
 8008eea:	2502      	movs	r5, #2
 8008eec:	e779      	b.n	8008de2 <_dtoa_r+0x3d2>
 8008eee:	9f00      	ldr	r7, [sp, #0]
 8008ef0:	9e03      	ldr	r6, [sp, #12]
 8008ef2:	e794      	b.n	8008e1e <_dtoa_r+0x40e>
 8008ef4:	9901      	ldr	r1, [sp, #4]
 8008ef6:	4b4c      	ldr	r3, [pc, #304]	; (8009028 <_dtoa_r+0x618>)
 8008ef8:	4431      	add	r1, r6
 8008efa:	910d      	str	r1, [sp, #52]	; 0x34
 8008efc:	9908      	ldr	r1, [sp, #32]
 8008efe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f06:	2900      	cmp	r1, #0
 8008f08:	d043      	beq.n	8008f92 <_dtoa_r+0x582>
 8008f0a:	494d      	ldr	r1, [pc, #308]	; (8009040 <_dtoa_r+0x630>)
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	f7f7 fc9d 	bl	800084c <__aeabi_ddiv>
 8008f12:	4652      	mov	r2, sl
 8008f14:	465b      	mov	r3, fp
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	9d01      	ldr	r5, [sp, #4]
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	468b      	mov	fp, r1
 8008f20:	4649      	mov	r1, r9
 8008f22:	4640      	mov	r0, r8
 8008f24:	f7f7 fe18 	bl	8000b58 <__aeabi_d2iz>
 8008f28:	4606      	mov	r6, r0
 8008f2a:	f7f7 fafb 	bl	8000524 <__aeabi_i2d>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f7f7 f9a7 	bl	8000288 <__aeabi_dsub>
 8008f3a:	3630      	adds	r6, #48	; 0x30
 8008f3c:	f805 6b01 	strb.w	r6, [r5], #1
 8008f40:	4652      	mov	r2, sl
 8008f42:	465b      	mov	r3, fp
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	f7f7 fdc8 	bl	8000adc <__aeabi_dcmplt>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d163      	bne.n	8009018 <_dtoa_r+0x608>
 8008f50:	4642      	mov	r2, r8
 8008f52:	464b      	mov	r3, r9
 8008f54:	4936      	ldr	r1, [pc, #216]	; (8009030 <_dtoa_r+0x620>)
 8008f56:	2000      	movs	r0, #0
 8008f58:	f7f7 f996 	bl	8000288 <__aeabi_dsub>
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	465b      	mov	r3, fp
 8008f60:	f7f7 fdbc 	bl	8000adc <__aeabi_dcmplt>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f040 80b5 	bne.w	80090d4 <_dtoa_r+0x6c4>
 8008f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f6c:	429d      	cmp	r5, r3
 8008f6e:	d081      	beq.n	8008e74 <_dtoa_r+0x464>
 8008f70:	4b30      	ldr	r3, [pc, #192]	; (8009034 <_dtoa_r+0x624>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	4650      	mov	r0, sl
 8008f76:	4659      	mov	r1, fp
 8008f78:	f7f7 fb3e 	bl	80005f8 <__aeabi_dmul>
 8008f7c:	4b2d      	ldr	r3, [pc, #180]	; (8009034 <_dtoa_r+0x624>)
 8008f7e:	4682      	mov	sl, r0
 8008f80:	468b      	mov	fp, r1
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	2200      	movs	r2, #0
 8008f88:	f7f7 fb36 	bl	80005f8 <__aeabi_dmul>
 8008f8c:	4680      	mov	r8, r0
 8008f8e:	4689      	mov	r9, r1
 8008f90:	e7c6      	b.n	8008f20 <_dtoa_r+0x510>
 8008f92:	4650      	mov	r0, sl
 8008f94:	4659      	mov	r1, fp
 8008f96:	f7f7 fb2f 	bl	80005f8 <__aeabi_dmul>
 8008f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f9c:	9d01      	ldr	r5, [sp, #4]
 8008f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	468b      	mov	fp, r1
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	f7f7 fdd6 	bl	8000b58 <__aeabi_d2iz>
 8008fac:	4606      	mov	r6, r0
 8008fae:	f7f7 fab9 	bl	8000524 <__aeabi_i2d>
 8008fb2:	3630      	adds	r6, #48	; 0x30
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4640      	mov	r0, r8
 8008fba:	4649      	mov	r1, r9
 8008fbc:	f7f7 f964 	bl	8000288 <__aeabi_dsub>
 8008fc0:	f805 6b01 	strb.w	r6, [r5], #1
 8008fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	4680      	mov	r8, r0
 8008fca:	4689      	mov	r9, r1
 8008fcc:	f04f 0200 	mov.w	r2, #0
 8008fd0:	d124      	bne.n	800901c <_dtoa_r+0x60c>
 8008fd2:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <_dtoa_r+0x630>)
 8008fd4:	4650      	mov	r0, sl
 8008fd6:	4659      	mov	r1, fp
 8008fd8:	f7f7 f958 	bl	800028c <__adddf3>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	f7f7 fd98 	bl	8000b18 <__aeabi_dcmpgt>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d173      	bne.n	80090d4 <_dtoa_r+0x6c4>
 8008fec:	4652      	mov	r2, sl
 8008fee:	465b      	mov	r3, fp
 8008ff0:	4913      	ldr	r1, [pc, #76]	; (8009040 <_dtoa_r+0x630>)
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	f7f7 f948 	bl	8000288 <__aeabi_dsub>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	4649      	mov	r1, r9
 8009000:	f7f7 fd6c 	bl	8000adc <__aeabi_dcmplt>
 8009004:	2800      	cmp	r0, #0
 8009006:	f43f af35 	beq.w	8008e74 <_dtoa_r+0x464>
 800900a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800900c:	1e6b      	subs	r3, r5, #1
 800900e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009010:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009014:	2b30      	cmp	r3, #48	; 0x30
 8009016:	d0f8      	beq.n	800900a <_dtoa_r+0x5fa>
 8009018:	9700      	str	r7, [sp, #0]
 800901a:	e049      	b.n	80090b0 <_dtoa_r+0x6a0>
 800901c:	4b05      	ldr	r3, [pc, #20]	; (8009034 <_dtoa_r+0x624>)
 800901e:	f7f7 faeb 	bl	80005f8 <__aeabi_dmul>
 8009022:	4680      	mov	r8, r0
 8009024:	4689      	mov	r9, r1
 8009026:	e7bd      	b.n	8008fa4 <_dtoa_r+0x594>
 8009028:	0800c018 	.word	0x0800c018
 800902c:	0800bff0 	.word	0x0800bff0
 8009030:	3ff00000 	.word	0x3ff00000
 8009034:	40240000 	.word	0x40240000
 8009038:	401c0000 	.word	0x401c0000
 800903c:	40140000 	.word	0x40140000
 8009040:	3fe00000 	.word	0x3fe00000
 8009044:	9d01      	ldr	r5, [sp, #4]
 8009046:	4656      	mov	r6, sl
 8009048:	465f      	mov	r7, fp
 800904a:	4642      	mov	r2, r8
 800904c:	464b      	mov	r3, r9
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 fbfb 	bl	800084c <__aeabi_ddiv>
 8009056:	f7f7 fd7f 	bl	8000b58 <__aeabi_d2iz>
 800905a:	4682      	mov	sl, r0
 800905c:	f7f7 fa62 	bl	8000524 <__aeabi_i2d>
 8009060:	4642      	mov	r2, r8
 8009062:	464b      	mov	r3, r9
 8009064:	f7f7 fac8 	bl	80005f8 <__aeabi_dmul>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4630      	mov	r0, r6
 800906e:	4639      	mov	r1, r7
 8009070:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009074:	f7f7 f908 	bl	8000288 <__aeabi_dsub>
 8009078:	f805 6b01 	strb.w	r6, [r5], #1
 800907c:	9e01      	ldr	r6, [sp, #4]
 800907e:	9f03      	ldr	r7, [sp, #12]
 8009080:	1bae      	subs	r6, r5, r6
 8009082:	42b7      	cmp	r7, r6
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	d135      	bne.n	80090f6 <_dtoa_r+0x6e6>
 800908a:	f7f7 f8ff 	bl	800028c <__adddf3>
 800908e:	4642      	mov	r2, r8
 8009090:	464b      	mov	r3, r9
 8009092:	4606      	mov	r6, r0
 8009094:	460f      	mov	r7, r1
 8009096:	f7f7 fd3f 	bl	8000b18 <__aeabi_dcmpgt>
 800909a:	b9d0      	cbnz	r0, 80090d2 <_dtoa_r+0x6c2>
 800909c:	4642      	mov	r2, r8
 800909e:	464b      	mov	r3, r9
 80090a0:	4630      	mov	r0, r6
 80090a2:	4639      	mov	r1, r7
 80090a4:	f7f7 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80090a8:	b110      	cbz	r0, 80090b0 <_dtoa_r+0x6a0>
 80090aa:	f01a 0f01 	tst.w	sl, #1
 80090ae:	d110      	bne.n	80090d2 <_dtoa_r+0x6c2>
 80090b0:	4620      	mov	r0, r4
 80090b2:	ee18 1a10 	vmov	r1, s16
 80090b6:	f000 faf3 	bl	80096a0 <_Bfree>
 80090ba:	2300      	movs	r3, #0
 80090bc:	9800      	ldr	r0, [sp, #0]
 80090be:	702b      	strb	r3, [r5, #0]
 80090c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090c2:	3001      	adds	r0, #1
 80090c4:	6018      	str	r0, [r3, #0]
 80090c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f43f acf1 	beq.w	8008ab0 <_dtoa_r+0xa0>
 80090ce:	601d      	str	r5, [r3, #0]
 80090d0:	e4ee      	b.n	8008ab0 <_dtoa_r+0xa0>
 80090d2:	9f00      	ldr	r7, [sp, #0]
 80090d4:	462b      	mov	r3, r5
 80090d6:	461d      	mov	r5, r3
 80090d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090dc:	2a39      	cmp	r2, #57	; 0x39
 80090de:	d106      	bne.n	80090ee <_dtoa_r+0x6de>
 80090e0:	9a01      	ldr	r2, [sp, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d1f7      	bne.n	80090d6 <_dtoa_r+0x6c6>
 80090e6:	9901      	ldr	r1, [sp, #4]
 80090e8:	2230      	movs	r2, #48	; 0x30
 80090ea:	3701      	adds	r7, #1
 80090ec:	700a      	strb	r2, [r1, #0]
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	3201      	adds	r2, #1
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	e790      	b.n	8009018 <_dtoa_r+0x608>
 80090f6:	4ba6      	ldr	r3, [pc, #664]	; (8009390 <_dtoa_r+0x980>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	f7f7 fa7d 	bl	80005f8 <__aeabi_dmul>
 80090fe:	2200      	movs	r2, #0
 8009100:	2300      	movs	r3, #0
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	f7f7 fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800910a:	2800      	cmp	r0, #0
 800910c:	d09d      	beq.n	800904a <_dtoa_r+0x63a>
 800910e:	e7cf      	b.n	80090b0 <_dtoa_r+0x6a0>
 8009110:	9a08      	ldr	r2, [sp, #32]
 8009112:	2a00      	cmp	r2, #0
 8009114:	f000 80d7 	beq.w	80092c6 <_dtoa_r+0x8b6>
 8009118:	9a06      	ldr	r2, [sp, #24]
 800911a:	2a01      	cmp	r2, #1
 800911c:	f300 80ba 	bgt.w	8009294 <_dtoa_r+0x884>
 8009120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009122:	2a00      	cmp	r2, #0
 8009124:	f000 80b2 	beq.w	800928c <_dtoa_r+0x87c>
 8009128:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800912c:	9e07      	ldr	r6, [sp, #28]
 800912e:	9d04      	ldr	r5, [sp, #16]
 8009130:	9a04      	ldr	r2, [sp, #16]
 8009132:	441a      	add	r2, r3
 8009134:	9204      	str	r2, [sp, #16]
 8009136:	9a05      	ldr	r2, [sp, #20]
 8009138:	2101      	movs	r1, #1
 800913a:	441a      	add	r2, r3
 800913c:	4620      	mov	r0, r4
 800913e:	9205      	str	r2, [sp, #20]
 8009140:	f000 fb66 	bl	8009810 <__i2b>
 8009144:	4607      	mov	r7, r0
 8009146:	2d00      	cmp	r5, #0
 8009148:	dd0c      	ble.n	8009164 <_dtoa_r+0x754>
 800914a:	9b05      	ldr	r3, [sp, #20]
 800914c:	2b00      	cmp	r3, #0
 800914e:	dd09      	ble.n	8009164 <_dtoa_r+0x754>
 8009150:	42ab      	cmp	r3, r5
 8009152:	9a04      	ldr	r2, [sp, #16]
 8009154:	bfa8      	it	ge
 8009156:	462b      	movge	r3, r5
 8009158:	1ad2      	subs	r2, r2, r3
 800915a:	9204      	str	r2, [sp, #16]
 800915c:	9a05      	ldr	r2, [sp, #20]
 800915e:	1aed      	subs	r5, r5, r3
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	9305      	str	r3, [sp, #20]
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	b31b      	cbz	r3, 80091b0 <_dtoa_r+0x7a0>
 8009168:	9b08      	ldr	r3, [sp, #32]
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 80af 	beq.w	80092ce <_dtoa_r+0x8be>
 8009170:	2e00      	cmp	r6, #0
 8009172:	dd13      	ble.n	800919c <_dtoa_r+0x78c>
 8009174:	4639      	mov	r1, r7
 8009176:	4632      	mov	r2, r6
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fc09 	bl	8009990 <__pow5mult>
 800917e:	ee18 2a10 	vmov	r2, s16
 8009182:	4601      	mov	r1, r0
 8009184:	4607      	mov	r7, r0
 8009186:	4620      	mov	r0, r4
 8009188:	f000 fb58 	bl	800983c <__multiply>
 800918c:	ee18 1a10 	vmov	r1, s16
 8009190:	4680      	mov	r8, r0
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fa84 	bl	80096a0 <_Bfree>
 8009198:	ee08 8a10 	vmov	s16, r8
 800919c:	9b07      	ldr	r3, [sp, #28]
 800919e:	1b9a      	subs	r2, r3, r6
 80091a0:	d006      	beq.n	80091b0 <_dtoa_r+0x7a0>
 80091a2:	ee18 1a10 	vmov	r1, s16
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fbf2 	bl	8009990 <__pow5mult>
 80091ac:	ee08 0a10 	vmov	s16, r0
 80091b0:	2101      	movs	r1, #1
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 fb2c 	bl	8009810 <__i2b>
 80091b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	4606      	mov	r6, r0
 80091be:	f340 8088 	ble.w	80092d2 <_dtoa_r+0x8c2>
 80091c2:	461a      	mov	r2, r3
 80091c4:	4601      	mov	r1, r0
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 fbe2 	bl	8009990 <__pow5mult>
 80091cc:	9b06      	ldr	r3, [sp, #24]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	4606      	mov	r6, r0
 80091d2:	f340 8081 	ble.w	80092d8 <_dtoa_r+0x8c8>
 80091d6:	f04f 0800 	mov.w	r8, #0
 80091da:	6933      	ldr	r3, [r6, #16]
 80091dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091e0:	6918      	ldr	r0, [r3, #16]
 80091e2:	f000 fac5 	bl	8009770 <__hi0bits>
 80091e6:	f1c0 0020 	rsb	r0, r0, #32
 80091ea:	9b05      	ldr	r3, [sp, #20]
 80091ec:	4418      	add	r0, r3
 80091ee:	f010 001f 	ands.w	r0, r0, #31
 80091f2:	f000 8092 	beq.w	800931a <_dtoa_r+0x90a>
 80091f6:	f1c0 0320 	rsb	r3, r0, #32
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	f340 808a 	ble.w	8009314 <_dtoa_r+0x904>
 8009200:	f1c0 001c 	rsb	r0, r0, #28
 8009204:	9b04      	ldr	r3, [sp, #16]
 8009206:	4403      	add	r3, r0
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	9b05      	ldr	r3, [sp, #20]
 800920c:	4403      	add	r3, r0
 800920e:	4405      	add	r5, r0
 8009210:	9305      	str	r3, [sp, #20]
 8009212:	9b04      	ldr	r3, [sp, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	dd07      	ble.n	8009228 <_dtoa_r+0x818>
 8009218:	ee18 1a10 	vmov	r1, s16
 800921c:	461a      	mov	r2, r3
 800921e:	4620      	mov	r0, r4
 8009220:	f000 fc10 	bl	8009a44 <__lshift>
 8009224:	ee08 0a10 	vmov	s16, r0
 8009228:	9b05      	ldr	r3, [sp, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	dd05      	ble.n	800923a <_dtoa_r+0x82a>
 800922e:	4631      	mov	r1, r6
 8009230:	461a      	mov	r2, r3
 8009232:	4620      	mov	r0, r4
 8009234:	f000 fc06 	bl	8009a44 <__lshift>
 8009238:	4606      	mov	r6, r0
 800923a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800923c:	2b00      	cmp	r3, #0
 800923e:	d06e      	beq.n	800931e <_dtoa_r+0x90e>
 8009240:	ee18 0a10 	vmov	r0, s16
 8009244:	4631      	mov	r1, r6
 8009246:	f000 fc6d 	bl	8009b24 <__mcmp>
 800924a:	2800      	cmp	r0, #0
 800924c:	da67      	bge.n	800931e <_dtoa_r+0x90e>
 800924e:	9b00      	ldr	r3, [sp, #0]
 8009250:	3b01      	subs	r3, #1
 8009252:	ee18 1a10 	vmov	r1, s16
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	220a      	movs	r2, #10
 800925a:	2300      	movs	r3, #0
 800925c:	4620      	mov	r0, r4
 800925e:	f000 fa41 	bl	80096e4 <__multadd>
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	ee08 0a10 	vmov	s16, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 81b1 	beq.w	80095d0 <_dtoa_r+0xbc0>
 800926e:	2300      	movs	r3, #0
 8009270:	4639      	mov	r1, r7
 8009272:	220a      	movs	r2, #10
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fa35 	bl	80096e4 <__multadd>
 800927a:	9b02      	ldr	r3, [sp, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	4607      	mov	r7, r0
 8009280:	f300 808e 	bgt.w	80093a0 <_dtoa_r+0x990>
 8009284:	9b06      	ldr	r3, [sp, #24]
 8009286:	2b02      	cmp	r3, #2
 8009288:	dc51      	bgt.n	800932e <_dtoa_r+0x91e>
 800928a:	e089      	b.n	80093a0 <_dtoa_r+0x990>
 800928c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800928e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009292:	e74b      	b.n	800912c <_dtoa_r+0x71c>
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	1e5e      	subs	r6, r3, #1
 8009298:	9b07      	ldr	r3, [sp, #28]
 800929a:	42b3      	cmp	r3, r6
 800929c:	bfbf      	itttt	lt
 800929e:	9b07      	ldrlt	r3, [sp, #28]
 80092a0:	9607      	strlt	r6, [sp, #28]
 80092a2:	1af2      	sublt	r2, r6, r3
 80092a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80092a6:	bfb6      	itet	lt
 80092a8:	189b      	addlt	r3, r3, r2
 80092aa:	1b9e      	subge	r6, r3, r6
 80092ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	bfb8      	it	lt
 80092b2:	2600      	movlt	r6, #0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bfb7      	itett	lt
 80092b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80092bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80092c0:	1a9d      	sublt	r5, r3, r2
 80092c2:	2300      	movlt	r3, #0
 80092c4:	e734      	b.n	8009130 <_dtoa_r+0x720>
 80092c6:	9e07      	ldr	r6, [sp, #28]
 80092c8:	9d04      	ldr	r5, [sp, #16]
 80092ca:	9f08      	ldr	r7, [sp, #32]
 80092cc:	e73b      	b.n	8009146 <_dtoa_r+0x736>
 80092ce:	9a07      	ldr	r2, [sp, #28]
 80092d0:	e767      	b.n	80091a2 <_dtoa_r+0x792>
 80092d2:	9b06      	ldr	r3, [sp, #24]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	dc18      	bgt.n	800930a <_dtoa_r+0x8fa>
 80092d8:	f1ba 0f00 	cmp.w	sl, #0
 80092dc:	d115      	bne.n	800930a <_dtoa_r+0x8fa>
 80092de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092e2:	b993      	cbnz	r3, 800930a <_dtoa_r+0x8fa>
 80092e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092e8:	0d1b      	lsrs	r3, r3, #20
 80092ea:	051b      	lsls	r3, r3, #20
 80092ec:	b183      	cbz	r3, 8009310 <_dtoa_r+0x900>
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	3301      	adds	r3, #1
 80092f2:	9304      	str	r3, [sp, #16]
 80092f4:	9b05      	ldr	r3, [sp, #20]
 80092f6:	3301      	adds	r3, #1
 80092f8:	9305      	str	r3, [sp, #20]
 80092fa:	f04f 0801 	mov.w	r8, #1
 80092fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009300:	2b00      	cmp	r3, #0
 8009302:	f47f af6a 	bne.w	80091da <_dtoa_r+0x7ca>
 8009306:	2001      	movs	r0, #1
 8009308:	e76f      	b.n	80091ea <_dtoa_r+0x7da>
 800930a:	f04f 0800 	mov.w	r8, #0
 800930e:	e7f6      	b.n	80092fe <_dtoa_r+0x8ee>
 8009310:	4698      	mov	r8, r3
 8009312:	e7f4      	b.n	80092fe <_dtoa_r+0x8ee>
 8009314:	f43f af7d 	beq.w	8009212 <_dtoa_r+0x802>
 8009318:	4618      	mov	r0, r3
 800931a:	301c      	adds	r0, #28
 800931c:	e772      	b.n	8009204 <_dtoa_r+0x7f4>
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	dc37      	bgt.n	8009394 <_dtoa_r+0x984>
 8009324:	9b06      	ldr	r3, [sp, #24]
 8009326:	2b02      	cmp	r3, #2
 8009328:	dd34      	ble.n	8009394 <_dtoa_r+0x984>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	9302      	str	r3, [sp, #8]
 800932e:	9b02      	ldr	r3, [sp, #8]
 8009330:	b96b      	cbnz	r3, 800934e <_dtoa_r+0x93e>
 8009332:	4631      	mov	r1, r6
 8009334:	2205      	movs	r2, #5
 8009336:	4620      	mov	r0, r4
 8009338:	f000 f9d4 	bl	80096e4 <__multadd>
 800933c:	4601      	mov	r1, r0
 800933e:	4606      	mov	r6, r0
 8009340:	ee18 0a10 	vmov	r0, s16
 8009344:	f000 fbee 	bl	8009b24 <__mcmp>
 8009348:	2800      	cmp	r0, #0
 800934a:	f73f adbb 	bgt.w	8008ec4 <_dtoa_r+0x4b4>
 800934e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009350:	9d01      	ldr	r5, [sp, #4]
 8009352:	43db      	mvns	r3, r3
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	4631      	mov	r1, r6
 800935c:	4620      	mov	r0, r4
 800935e:	f000 f99f 	bl	80096a0 <_Bfree>
 8009362:	2f00      	cmp	r7, #0
 8009364:	f43f aea4 	beq.w	80090b0 <_dtoa_r+0x6a0>
 8009368:	f1b8 0f00 	cmp.w	r8, #0
 800936c:	d005      	beq.n	800937a <_dtoa_r+0x96a>
 800936e:	45b8      	cmp	r8, r7
 8009370:	d003      	beq.n	800937a <_dtoa_r+0x96a>
 8009372:	4641      	mov	r1, r8
 8009374:	4620      	mov	r0, r4
 8009376:	f000 f993 	bl	80096a0 <_Bfree>
 800937a:	4639      	mov	r1, r7
 800937c:	4620      	mov	r0, r4
 800937e:	f000 f98f 	bl	80096a0 <_Bfree>
 8009382:	e695      	b.n	80090b0 <_dtoa_r+0x6a0>
 8009384:	2600      	movs	r6, #0
 8009386:	4637      	mov	r7, r6
 8009388:	e7e1      	b.n	800934e <_dtoa_r+0x93e>
 800938a:	9700      	str	r7, [sp, #0]
 800938c:	4637      	mov	r7, r6
 800938e:	e599      	b.n	8008ec4 <_dtoa_r+0x4b4>
 8009390:	40240000 	.word	0x40240000
 8009394:	9b08      	ldr	r3, [sp, #32]
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 80ca 	beq.w	8009530 <_dtoa_r+0xb20>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	2d00      	cmp	r5, #0
 80093a2:	dd05      	ble.n	80093b0 <_dtoa_r+0x9a0>
 80093a4:	4639      	mov	r1, r7
 80093a6:	462a      	mov	r2, r5
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 fb4b 	bl	8009a44 <__lshift>
 80093ae:	4607      	mov	r7, r0
 80093b0:	f1b8 0f00 	cmp.w	r8, #0
 80093b4:	d05b      	beq.n	800946e <_dtoa_r+0xa5e>
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 f931 	bl	8009620 <_Balloc>
 80093be:	4605      	mov	r5, r0
 80093c0:	b928      	cbnz	r0, 80093ce <_dtoa_r+0x9be>
 80093c2:	4b87      	ldr	r3, [pc, #540]	; (80095e0 <_dtoa_r+0xbd0>)
 80093c4:	4602      	mov	r2, r0
 80093c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093ca:	f7ff bb3b 	b.w	8008a44 <_dtoa_r+0x34>
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	3202      	adds	r2, #2
 80093d2:	0092      	lsls	r2, r2, #2
 80093d4:	f107 010c 	add.w	r1, r7, #12
 80093d8:	300c      	adds	r0, #12
 80093da:	f000 f913 	bl	8009604 <memcpy>
 80093de:	2201      	movs	r2, #1
 80093e0:	4629      	mov	r1, r5
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fb2e 	bl	8009a44 <__lshift>
 80093e8:	9b01      	ldr	r3, [sp, #4]
 80093ea:	f103 0901 	add.w	r9, r3, #1
 80093ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093f2:	4413      	add	r3, r2
 80093f4:	9305      	str	r3, [sp, #20]
 80093f6:	f00a 0301 	and.w	r3, sl, #1
 80093fa:	46b8      	mov	r8, r7
 80093fc:	9304      	str	r3, [sp, #16]
 80093fe:	4607      	mov	r7, r0
 8009400:	4631      	mov	r1, r6
 8009402:	ee18 0a10 	vmov	r0, s16
 8009406:	f7ff fa75 	bl	80088f4 <quorem>
 800940a:	4641      	mov	r1, r8
 800940c:	9002      	str	r0, [sp, #8]
 800940e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009412:	ee18 0a10 	vmov	r0, s16
 8009416:	f000 fb85 	bl	8009b24 <__mcmp>
 800941a:	463a      	mov	r2, r7
 800941c:	9003      	str	r0, [sp, #12]
 800941e:	4631      	mov	r1, r6
 8009420:	4620      	mov	r0, r4
 8009422:	f000 fb9b 	bl	8009b5c <__mdiff>
 8009426:	68c2      	ldr	r2, [r0, #12]
 8009428:	f109 3bff 	add.w	fp, r9, #4294967295
 800942c:	4605      	mov	r5, r0
 800942e:	bb02      	cbnz	r2, 8009472 <_dtoa_r+0xa62>
 8009430:	4601      	mov	r1, r0
 8009432:	ee18 0a10 	vmov	r0, s16
 8009436:	f000 fb75 	bl	8009b24 <__mcmp>
 800943a:	4602      	mov	r2, r0
 800943c:	4629      	mov	r1, r5
 800943e:	4620      	mov	r0, r4
 8009440:	9207      	str	r2, [sp, #28]
 8009442:	f000 f92d 	bl	80096a0 <_Bfree>
 8009446:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800944a:	ea43 0102 	orr.w	r1, r3, r2
 800944e:	9b04      	ldr	r3, [sp, #16]
 8009450:	430b      	orrs	r3, r1
 8009452:	464d      	mov	r5, r9
 8009454:	d10f      	bne.n	8009476 <_dtoa_r+0xa66>
 8009456:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800945a:	d02a      	beq.n	80094b2 <_dtoa_r+0xaa2>
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	dd02      	ble.n	8009468 <_dtoa_r+0xa58>
 8009462:	9b02      	ldr	r3, [sp, #8]
 8009464:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009468:	f88b a000 	strb.w	sl, [fp]
 800946c:	e775      	b.n	800935a <_dtoa_r+0x94a>
 800946e:	4638      	mov	r0, r7
 8009470:	e7ba      	b.n	80093e8 <_dtoa_r+0x9d8>
 8009472:	2201      	movs	r2, #1
 8009474:	e7e2      	b.n	800943c <_dtoa_r+0xa2c>
 8009476:	9b03      	ldr	r3, [sp, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	db04      	blt.n	8009486 <_dtoa_r+0xa76>
 800947c:	9906      	ldr	r1, [sp, #24]
 800947e:	430b      	orrs	r3, r1
 8009480:	9904      	ldr	r1, [sp, #16]
 8009482:	430b      	orrs	r3, r1
 8009484:	d122      	bne.n	80094cc <_dtoa_r+0xabc>
 8009486:	2a00      	cmp	r2, #0
 8009488:	ddee      	ble.n	8009468 <_dtoa_r+0xa58>
 800948a:	ee18 1a10 	vmov	r1, s16
 800948e:	2201      	movs	r2, #1
 8009490:	4620      	mov	r0, r4
 8009492:	f000 fad7 	bl	8009a44 <__lshift>
 8009496:	4631      	mov	r1, r6
 8009498:	ee08 0a10 	vmov	s16, r0
 800949c:	f000 fb42 	bl	8009b24 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	dc03      	bgt.n	80094ac <_dtoa_r+0xa9c>
 80094a4:	d1e0      	bne.n	8009468 <_dtoa_r+0xa58>
 80094a6:	f01a 0f01 	tst.w	sl, #1
 80094aa:	d0dd      	beq.n	8009468 <_dtoa_r+0xa58>
 80094ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094b0:	d1d7      	bne.n	8009462 <_dtoa_r+0xa52>
 80094b2:	2339      	movs	r3, #57	; 0x39
 80094b4:	f88b 3000 	strb.w	r3, [fp]
 80094b8:	462b      	mov	r3, r5
 80094ba:	461d      	mov	r5, r3
 80094bc:	3b01      	subs	r3, #1
 80094be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094c2:	2a39      	cmp	r2, #57	; 0x39
 80094c4:	d071      	beq.n	80095aa <_dtoa_r+0xb9a>
 80094c6:	3201      	adds	r2, #1
 80094c8:	701a      	strb	r2, [r3, #0]
 80094ca:	e746      	b.n	800935a <_dtoa_r+0x94a>
 80094cc:	2a00      	cmp	r2, #0
 80094ce:	dd07      	ble.n	80094e0 <_dtoa_r+0xad0>
 80094d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094d4:	d0ed      	beq.n	80094b2 <_dtoa_r+0xaa2>
 80094d6:	f10a 0301 	add.w	r3, sl, #1
 80094da:	f88b 3000 	strb.w	r3, [fp]
 80094de:	e73c      	b.n	800935a <_dtoa_r+0x94a>
 80094e0:	9b05      	ldr	r3, [sp, #20]
 80094e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80094e6:	4599      	cmp	r9, r3
 80094e8:	d047      	beq.n	800957a <_dtoa_r+0xb6a>
 80094ea:	ee18 1a10 	vmov	r1, s16
 80094ee:	2300      	movs	r3, #0
 80094f0:	220a      	movs	r2, #10
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 f8f6 	bl	80096e4 <__multadd>
 80094f8:	45b8      	cmp	r8, r7
 80094fa:	ee08 0a10 	vmov	s16, r0
 80094fe:	f04f 0300 	mov.w	r3, #0
 8009502:	f04f 020a 	mov.w	r2, #10
 8009506:	4641      	mov	r1, r8
 8009508:	4620      	mov	r0, r4
 800950a:	d106      	bne.n	800951a <_dtoa_r+0xb0a>
 800950c:	f000 f8ea 	bl	80096e4 <__multadd>
 8009510:	4680      	mov	r8, r0
 8009512:	4607      	mov	r7, r0
 8009514:	f109 0901 	add.w	r9, r9, #1
 8009518:	e772      	b.n	8009400 <_dtoa_r+0x9f0>
 800951a:	f000 f8e3 	bl	80096e4 <__multadd>
 800951e:	4639      	mov	r1, r7
 8009520:	4680      	mov	r8, r0
 8009522:	2300      	movs	r3, #0
 8009524:	220a      	movs	r2, #10
 8009526:	4620      	mov	r0, r4
 8009528:	f000 f8dc 	bl	80096e4 <__multadd>
 800952c:	4607      	mov	r7, r0
 800952e:	e7f1      	b.n	8009514 <_dtoa_r+0xb04>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	9302      	str	r3, [sp, #8]
 8009534:	9d01      	ldr	r5, [sp, #4]
 8009536:	ee18 0a10 	vmov	r0, s16
 800953a:	4631      	mov	r1, r6
 800953c:	f7ff f9da 	bl	80088f4 <quorem>
 8009540:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	f805 ab01 	strb.w	sl, [r5], #1
 800954a:	1aea      	subs	r2, r5, r3
 800954c:	9b02      	ldr	r3, [sp, #8]
 800954e:	4293      	cmp	r3, r2
 8009550:	dd09      	ble.n	8009566 <_dtoa_r+0xb56>
 8009552:	ee18 1a10 	vmov	r1, s16
 8009556:	2300      	movs	r3, #0
 8009558:	220a      	movs	r2, #10
 800955a:	4620      	mov	r0, r4
 800955c:	f000 f8c2 	bl	80096e4 <__multadd>
 8009560:	ee08 0a10 	vmov	s16, r0
 8009564:	e7e7      	b.n	8009536 <_dtoa_r+0xb26>
 8009566:	9b02      	ldr	r3, [sp, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	bfc8      	it	gt
 800956c:	461d      	movgt	r5, r3
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	bfd8      	it	le
 8009572:	2501      	movle	r5, #1
 8009574:	441d      	add	r5, r3
 8009576:	f04f 0800 	mov.w	r8, #0
 800957a:	ee18 1a10 	vmov	r1, s16
 800957e:	2201      	movs	r2, #1
 8009580:	4620      	mov	r0, r4
 8009582:	f000 fa5f 	bl	8009a44 <__lshift>
 8009586:	4631      	mov	r1, r6
 8009588:	ee08 0a10 	vmov	s16, r0
 800958c:	f000 faca 	bl	8009b24 <__mcmp>
 8009590:	2800      	cmp	r0, #0
 8009592:	dc91      	bgt.n	80094b8 <_dtoa_r+0xaa8>
 8009594:	d102      	bne.n	800959c <_dtoa_r+0xb8c>
 8009596:	f01a 0f01 	tst.w	sl, #1
 800959a:	d18d      	bne.n	80094b8 <_dtoa_r+0xaa8>
 800959c:	462b      	mov	r3, r5
 800959e:	461d      	mov	r5, r3
 80095a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095a4:	2a30      	cmp	r2, #48	; 0x30
 80095a6:	d0fa      	beq.n	800959e <_dtoa_r+0xb8e>
 80095a8:	e6d7      	b.n	800935a <_dtoa_r+0x94a>
 80095aa:	9a01      	ldr	r2, [sp, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d184      	bne.n	80094ba <_dtoa_r+0xaaa>
 80095b0:	9b00      	ldr	r3, [sp, #0]
 80095b2:	3301      	adds	r3, #1
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	2331      	movs	r3, #49	; 0x31
 80095b8:	7013      	strb	r3, [r2, #0]
 80095ba:	e6ce      	b.n	800935a <_dtoa_r+0x94a>
 80095bc:	4b09      	ldr	r3, [pc, #36]	; (80095e4 <_dtoa_r+0xbd4>)
 80095be:	f7ff ba95 	b.w	8008aec <_dtoa_r+0xdc>
 80095c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f47f aa6e 	bne.w	8008aa6 <_dtoa_r+0x96>
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <_dtoa_r+0xbd8>)
 80095cc:	f7ff ba8e 	b.w	8008aec <_dtoa_r+0xdc>
 80095d0:	9b02      	ldr	r3, [sp, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	dcae      	bgt.n	8009534 <_dtoa_r+0xb24>
 80095d6:	9b06      	ldr	r3, [sp, #24]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	f73f aea8 	bgt.w	800932e <_dtoa_r+0x91e>
 80095de:	e7a9      	b.n	8009534 <_dtoa_r+0xb24>
 80095e0:	0800bf7f 	.word	0x0800bf7f
 80095e4:	0800bedc 	.word	0x0800bedc
 80095e8:	0800bf00 	.word	0x0800bf00

080095ec <_localeconv_r>:
 80095ec:	4800      	ldr	r0, [pc, #0]	; (80095f0 <_localeconv_r+0x4>)
 80095ee:	4770      	bx	lr
 80095f0:	2000017c 	.word	0x2000017c

080095f4 <malloc>:
 80095f4:	4b02      	ldr	r3, [pc, #8]	; (8009600 <malloc+0xc>)
 80095f6:	4601      	mov	r1, r0
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	f000 bc17 	b.w	8009e2c <_malloc_r>
 80095fe:	bf00      	nop
 8009600:	20000028 	.word	0x20000028

08009604 <memcpy>:
 8009604:	440a      	add	r2, r1
 8009606:	4291      	cmp	r1, r2
 8009608:	f100 33ff 	add.w	r3, r0, #4294967295
 800960c:	d100      	bne.n	8009610 <memcpy+0xc>
 800960e:	4770      	bx	lr
 8009610:	b510      	push	{r4, lr}
 8009612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800961a:	4291      	cmp	r1, r2
 800961c:	d1f9      	bne.n	8009612 <memcpy+0xe>
 800961e:	bd10      	pop	{r4, pc}

08009620 <_Balloc>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009624:	4604      	mov	r4, r0
 8009626:	460d      	mov	r5, r1
 8009628:	b976      	cbnz	r6, 8009648 <_Balloc+0x28>
 800962a:	2010      	movs	r0, #16
 800962c:	f7ff ffe2 	bl	80095f4 <malloc>
 8009630:	4602      	mov	r2, r0
 8009632:	6260      	str	r0, [r4, #36]	; 0x24
 8009634:	b920      	cbnz	r0, 8009640 <_Balloc+0x20>
 8009636:	4b18      	ldr	r3, [pc, #96]	; (8009698 <_Balloc+0x78>)
 8009638:	4818      	ldr	r0, [pc, #96]	; (800969c <_Balloc+0x7c>)
 800963a:	2166      	movs	r1, #102	; 0x66
 800963c:	f000 fdd6 	bl	800a1ec <__assert_func>
 8009640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009644:	6006      	str	r6, [r0, #0]
 8009646:	60c6      	str	r6, [r0, #12]
 8009648:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800964a:	68f3      	ldr	r3, [r6, #12]
 800964c:	b183      	cbz	r3, 8009670 <_Balloc+0x50>
 800964e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009656:	b9b8      	cbnz	r0, 8009688 <_Balloc+0x68>
 8009658:	2101      	movs	r1, #1
 800965a:	fa01 f605 	lsl.w	r6, r1, r5
 800965e:	1d72      	adds	r2, r6, #5
 8009660:	0092      	lsls	r2, r2, #2
 8009662:	4620      	mov	r0, r4
 8009664:	f000 fb60 	bl	8009d28 <_calloc_r>
 8009668:	b160      	cbz	r0, 8009684 <_Balloc+0x64>
 800966a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800966e:	e00e      	b.n	800968e <_Balloc+0x6e>
 8009670:	2221      	movs	r2, #33	; 0x21
 8009672:	2104      	movs	r1, #4
 8009674:	4620      	mov	r0, r4
 8009676:	f000 fb57 	bl	8009d28 <_calloc_r>
 800967a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800967c:	60f0      	str	r0, [r6, #12]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e4      	bne.n	800964e <_Balloc+0x2e>
 8009684:	2000      	movs	r0, #0
 8009686:	bd70      	pop	{r4, r5, r6, pc}
 8009688:	6802      	ldr	r2, [r0, #0]
 800968a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800968e:	2300      	movs	r3, #0
 8009690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009694:	e7f7      	b.n	8009686 <_Balloc+0x66>
 8009696:	bf00      	nop
 8009698:	0800bf0d 	.word	0x0800bf0d
 800969c:	0800bf90 	.word	0x0800bf90

080096a0 <_Bfree>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096a4:	4605      	mov	r5, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	b976      	cbnz	r6, 80096c8 <_Bfree+0x28>
 80096aa:	2010      	movs	r0, #16
 80096ac:	f7ff ffa2 	bl	80095f4 <malloc>
 80096b0:	4602      	mov	r2, r0
 80096b2:	6268      	str	r0, [r5, #36]	; 0x24
 80096b4:	b920      	cbnz	r0, 80096c0 <_Bfree+0x20>
 80096b6:	4b09      	ldr	r3, [pc, #36]	; (80096dc <_Bfree+0x3c>)
 80096b8:	4809      	ldr	r0, [pc, #36]	; (80096e0 <_Bfree+0x40>)
 80096ba:	218a      	movs	r1, #138	; 0x8a
 80096bc:	f000 fd96 	bl	800a1ec <__assert_func>
 80096c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096c4:	6006      	str	r6, [r0, #0]
 80096c6:	60c6      	str	r6, [r0, #12]
 80096c8:	b13c      	cbz	r4, 80096da <_Bfree+0x3a>
 80096ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096cc:	6862      	ldr	r2, [r4, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096d4:	6021      	str	r1, [r4, #0]
 80096d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096da:	bd70      	pop	{r4, r5, r6, pc}
 80096dc:	0800bf0d 	.word	0x0800bf0d
 80096e0:	0800bf90 	.word	0x0800bf90

080096e4 <__multadd>:
 80096e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e8:	690d      	ldr	r5, [r1, #16]
 80096ea:	4607      	mov	r7, r0
 80096ec:	460c      	mov	r4, r1
 80096ee:	461e      	mov	r6, r3
 80096f0:	f101 0c14 	add.w	ip, r1, #20
 80096f4:	2000      	movs	r0, #0
 80096f6:	f8dc 3000 	ldr.w	r3, [ip]
 80096fa:	b299      	uxth	r1, r3
 80096fc:	fb02 6101 	mla	r1, r2, r1, r6
 8009700:	0c1e      	lsrs	r6, r3, #16
 8009702:	0c0b      	lsrs	r3, r1, #16
 8009704:	fb02 3306 	mla	r3, r2, r6, r3
 8009708:	b289      	uxth	r1, r1
 800970a:	3001      	adds	r0, #1
 800970c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009710:	4285      	cmp	r5, r0
 8009712:	f84c 1b04 	str.w	r1, [ip], #4
 8009716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800971a:	dcec      	bgt.n	80096f6 <__multadd+0x12>
 800971c:	b30e      	cbz	r6, 8009762 <__multadd+0x7e>
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	42ab      	cmp	r3, r5
 8009722:	dc19      	bgt.n	8009758 <__multadd+0x74>
 8009724:	6861      	ldr	r1, [r4, #4]
 8009726:	4638      	mov	r0, r7
 8009728:	3101      	adds	r1, #1
 800972a:	f7ff ff79 	bl	8009620 <_Balloc>
 800972e:	4680      	mov	r8, r0
 8009730:	b928      	cbnz	r0, 800973e <__multadd+0x5a>
 8009732:	4602      	mov	r2, r0
 8009734:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <__multadd+0x84>)
 8009736:	480d      	ldr	r0, [pc, #52]	; (800976c <__multadd+0x88>)
 8009738:	21b5      	movs	r1, #181	; 0xb5
 800973a:	f000 fd57 	bl	800a1ec <__assert_func>
 800973e:	6922      	ldr	r2, [r4, #16]
 8009740:	3202      	adds	r2, #2
 8009742:	f104 010c 	add.w	r1, r4, #12
 8009746:	0092      	lsls	r2, r2, #2
 8009748:	300c      	adds	r0, #12
 800974a:	f7ff ff5b 	bl	8009604 <memcpy>
 800974e:	4621      	mov	r1, r4
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff ffa5 	bl	80096a0 <_Bfree>
 8009756:	4644      	mov	r4, r8
 8009758:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800975c:	3501      	adds	r5, #1
 800975e:	615e      	str	r6, [r3, #20]
 8009760:	6125      	str	r5, [r4, #16]
 8009762:	4620      	mov	r0, r4
 8009764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009768:	0800bf7f 	.word	0x0800bf7f
 800976c:	0800bf90 	.word	0x0800bf90

08009770 <__hi0bits>:
 8009770:	0c03      	lsrs	r3, r0, #16
 8009772:	041b      	lsls	r3, r3, #16
 8009774:	b9d3      	cbnz	r3, 80097ac <__hi0bits+0x3c>
 8009776:	0400      	lsls	r0, r0, #16
 8009778:	2310      	movs	r3, #16
 800977a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800977e:	bf04      	itt	eq
 8009780:	0200      	lsleq	r0, r0, #8
 8009782:	3308      	addeq	r3, #8
 8009784:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009788:	bf04      	itt	eq
 800978a:	0100      	lsleq	r0, r0, #4
 800978c:	3304      	addeq	r3, #4
 800978e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009792:	bf04      	itt	eq
 8009794:	0080      	lsleq	r0, r0, #2
 8009796:	3302      	addeq	r3, #2
 8009798:	2800      	cmp	r0, #0
 800979a:	db05      	blt.n	80097a8 <__hi0bits+0x38>
 800979c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097a0:	f103 0301 	add.w	r3, r3, #1
 80097a4:	bf08      	it	eq
 80097a6:	2320      	moveq	r3, #32
 80097a8:	4618      	mov	r0, r3
 80097aa:	4770      	bx	lr
 80097ac:	2300      	movs	r3, #0
 80097ae:	e7e4      	b.n	800977a <__hi0bits+0xa>

080097b0 <__lo0bits>:
 80097b0:	6803      	ldr	r3, [r0, #0]
 80097b2:	f013 0207 	ands.w	r2, r3, #7
 80097b6:	4601      	mov	r1, r0
 80097b8:	d00b      	beq.n	80097d2 <__lo0bits+0x22>
 80097ba:	07da      	lsls	r2, r3, #31
 80097bc:	d423      	bmi.n	8009806 <__lo0bits+0x56>
 80097be:	0798      	lsls	r0, r3, #30
 80097c0:	bf49      	itett	mi
 80097c2:	085b      	lsrmi	r3, r3, #1
 80097c4:	089b      	lsrpl	r3, r3, #2
 80097c6:	2001      	movmi	r0, #1
 80097c8:	600b      	strmi	r3, [r1, #0]
 80097ca:	bf5c      	itt	pl
 80097cc:	600b      	strpl	r3, [r1, #0]
 80097ce:	2002      	movpl	r0, #2
 80097d0:	4770      	bx	lr
 80097d2:	b298      	uxth	r0, r3
 80097d4:	b9a8      	cbnz	r0, 8009802 <__lo0bits+0x52>
 80097d6:	0c1b      	lsrs	r3, r3, #16
 80097d8:	2010      	movs	r0, #16
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	b90a      	cbnz	r2, 80097e2 <__lo0bits+0x32>
 80097de:	3008      	adds	r0, #8
 80097e0:	0a1b      	lsrs	r3, r3, #8
 80097e2:	071a      	lsls	r2, r3, #28
 80097e4:	bf04      	itt	eq
 80097e6:	091b      	lsreq	r3, r3, #4
 80097e8:	3004      	addeq	r0, #4
 80097ea:	079a      	lsls	r2, r3, #30
 80097ec:	bf04      	itt	eq
 80097ee:	089b      	lsreq	r3, r3, #2
 80097f0:	3002      	addeq	r0, #2
 80097f2:	07da      	lsls	r2, r3, #31
 80097f4:	d403      	bmi.n	80097fe <__lo0bits+0x4e>
 80097f6:	085b      	lsrs	r3, r3, #1
 80097f8:	f100 0001 	add.w	r0, r0, #1
 80097fc:	d005      	beq.n	800980a <__lo0bits+0x5a>
 80097fe:	600b      	str	r3, [r1, #0]
 8009800:	4770      	bx	lr
 8009802:	4610      	mov	r0, r2
 8009804:	e7e9      	b.n	80097da <__lo0bits+0x2a>
 8009806:	2000      	movs	r0, #0
 8009808:	4770      	bx	lr
 800980a:	2020      	movs	r0, #32
 800980c:	4770      	bx	lr
	...

08009810 <__i2b>:
 8009810:	b510      	push	{r4, lr}
 8009812:	460c      	mov	r4, r1
 8009814:	2101      	movs	r1, #1
 8009816:	f7ff ff03 	bl	8009620 <_Balloc>
 800981a:	4602      	mov	r2, r0
 800981c:	b928      	cbnz	r0, 800982a <__i2b+0x1a>
 800981e:	4b05      	ldr	r3, [pc, #20]	; (8009834 <__i2b+0x24>)
 8009820:	4805      	ldr	r0, [pc, #20]	; (8009838 <__i2b+0x28>)
 8009822:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009826:	f000 fce1 	bl	800a1ec <__assert_func>
 800982a:	2301      	movs	r3, #1
 800982c:	6144      	str	r4, [r0, #20]
 800982e:	6103      	str	r3, [r0, #16]
 8009830:	bd10      	pop	{r4, pc}
 8009832:	bf00      	nop
 8009834:	0800bf7f 	.word	0x0800bf7f
 8009838:	0800bf90 	.word	0x0800bf90

0800983c <__multiply>:
 800983c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	4691      	mov	r9, r2
 8009842:	690a      	ldr	r2, [r1, #16]
 8009844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009848:	429a      	cmp	r2, r3
 800984a:	bfb8      	it	lt
 800984c:	460b      	movlt	r3, r1
 800984e:	460c      	mov	r4, r1
 8009850:	bfbc      	itt	lt
 8009852:	464c      	movlt	r4, r9
 8009854:	4699      	movlt	r9, r3
 8009856:	6927      	ldr	r7, [r4, #16]
 8009858:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800985c:	68a3      	ldr	r3, [r4, #8]
 800985e:	6861      	ldr	r1, [r4, #4]
 8009860:	eb07 060a 	add.w	r6, r7, sl
 8009864:	42b3      	cmp	r3, r6
 8009866:	b085      	sub	sp, #20
 8009868:	bfb8      	it	lt
 800986a:	3101      	addlt	r1, #1
 800986c:	f7ff fed8 	bl	8009620 <_Balloc>
 8009870:	b930      	cbnz	r0, 8009880 <__multiply+0x44>
 8009872:	4602      	mov	r2, r0
 8009874:	4b44      	ldr	r3, [pc, #272]	; (8009988 <__multiply+0x14c>)
 8009876:	4845      	ldr	r0, [pc, #276]	; (800998c <__multiply+0x150>)
 8009878:	f240 115d 	movw	r1, #349	; 0x15d
 800987c:	f000 fcb6 	bl	800a1ec <__assert_func>
 8009880:	f100 0514 	add.w	r5, r0, #20
 8009884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009888:	462b      	mov	r3, r5
 800988a:	2200      	movs	r2, #0
 800988c:	4543      	cmp	r3, r8
 800988e:	d321      	bcc.n	80098d4 <__multiply+0x98>
 8009890:	f104 0314 	add.w	r3, r4, #20
 8009894:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009898:	f109 0314 	add.w	r3, r9, #20
 800989c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098a0:	9202      	str	r2, [sp, #8]
 80098a2:	1b3a      	subs	r2, r7, r4
 80098a4:	3a15      	subs	r2, #21
 80098a6:	f022 0203 	bic.w	r2, r2, #3
 80098aa:	3204      	adds	r2, #4
 80098ac:	f104 0115 	add.w	r1, r4, #21
 80098b0:	428f      	cmp	r7, r1
 80098b2:	bf38      	it	cc
 80098b4:	2204      	movcc	r2, #4
 80098b6:	9201      	str	r2, [sp, #4]
 80098b8:	9a02      	ldr	r2, [sp, #8]
 80098ba:	9303      	str	r3, [sp, #12]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d80c      	bhi.n	80098da <__multiply+0x9e>
 80098c0:	2e00      	cmp	r6, #0
 80098c2:	dd03      	ble.n	80098cc <__multiply+0x90>
 80098c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d05a      	beq.n	8009982 <__multiply+0x146>
 80098cc:	6106      	str	r6, [r0, #16]
 80098ce:	b005      	add	sp, #20
 80098d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d4:	f843 2b04 	str.w	r2, [r3], #4
 80098d8:	e7d8      	b.n	800988c <__multiply+0x50>
 80098da:	f8b3 a000 	ldrh.w	sl, [r3]
 80098de:	f1ba 0f00 	cmp.w	sl, #0
 80098e2:	d024      	beq.n	800992e <__multiply+0xf2>
 80098e4:	f104 0e14 	add.w	lr, r4, #20
 80098e8:	46a9      	mov	r9, r5
 80098ea:	f04f 0c00 	mov.w	ip, #0
 80098ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098f2:	f8d9 1000 	ldr.w	r1, [r9]
 80098f6:	fa1f fb82 	uxth.w	fp, r2
 80098fa:	b289      	uxth	r1, r1
 80098fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009900:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009904:	f8d9 2000 	ldr.w	r2, [r9]
 8009908:	4461      	add	r1, ip
 800990a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800990e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009916:	b289      	uxth	r1, r1
 8009918:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800991c:	4577      	cmp	r7, lr
 800991e:	f849 1b04 	str.w	r1, [r9], #4
 8009922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009926:	d8e2      	bhi.n	80098ee <__multiply+0xb2>
 8009928:	9a01      	ldr	r2, [sp, #4]
 800992a:	f845 c002 	str.w	ip, [r5, r2]
 800992e:	9a03      	ldr	r2, [sp, #12]
 8009930:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009934:	3304      	adds	r3, #4
 8009936:	f1b9 0f00 	cmp.w	r9, #0
 800993a:	d020      	beq.n	800997e <__multiply+0x142>
 800993c:	6829      	ldr	r1, [r5, #0]
 800993e:	f104 0c14 	add.w	ip, r4, #20
 8009942:	46ae      	mov	lr, r5
 8009944:	f04f 0a00 	mov.w	sl, #0
 8009948:	f8bc b000 	ldrh.w	fp, [ip]
 800994c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009950:	fb09 220b 	mla	r2, r9, fp, r2
 8009954:	4492      	add	sl, r2
 8009956:	b289      	uxth	r1, r1
 8009958:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800995c:	f84e 1b04 	str.w	r1, [lr], #4
 8009960:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009964:	f8be 1000 	ldrh.w	r1, [lr]
 8009968:	0c12      	lsrs	r2, r2, #16
 800996a:	fb09 1102 	mla	r1, r9, r2, r1
 800996e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009972:	4567      	cmp	r7, ip
 8009974:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009978:	d8e6      	bhi.n	8009948 <__multiply+0x10c>
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	50a9      	str	r1, [r5, r2]
 800997e:	3504      	adds	r5, #4
 8009980:	e79a      	b.n	80098b8 <__multiply+0x7c>
 8009982:	3e01      	subs	r6, #1
 8009984:	e79c      	b.n	80098c0 <__multiply+0x84>
 8009986:	bf00      	nop
 8009988:	0800bf7f 	.word	0x0800bf7f
 800998c:	0800bf90 	.word	0x0800bf90

08009990 <__pow5mult>:
 8009990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009994:	4615      	mov	r5, r2
 8009996:	f012 0203 	ands.w	r2, r2, #3
 800999a:	4606      	mov	r6, r0
 800999c:	460f      	mov	r7, r1
 800999e:	d007      	beq.n	80099b0 <__pow5mult+0x20>
 80099a0:	4c25      	ldr	r4, [pc, #148]	; (8009a38 <__pow5mult+0xa8>)
 80099a2:	3a01      	subs	r2, #1
 80099a4:	2300      	movs	r3, #0
 80099a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099aa:	f7ff fe9b 	bl	80096e4 <__multadd>
 80099ae:	4607      	mov	r7, r0
 80099b0:	10ad      	asrs	r5, r5, #2
 80099b2:	d03d      	beq.n	8009a30 <__pow5mult+0xa0>
 80099b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099b6:	b97c      	cbnz	r4, 80099d8 <__pow5mult+0x48>
 80099b8:	2010      	movs	r0, #16
 80099ba:	f7ff fe1b 	bl	80095f4 <malloc>
 80099be:	4602      	mov	r2, r0
 80099c0:	6270      	str	r0, [r6, #36]	; 0x24
 80099c2:	b928      	cbnz	r0, 80099d0 <__pow5mult+0x40>
 80099c4:	4b1d      	ldr	r3, [pc, #116]	; (8009a3c <__pow5mult+0xac>)
 80099c6:	481e      	ldr	r0, [pc, #120]	; (8009a40 <__pow5mult+0xb0>)
 80099c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099cc:	f000 fc0e 	bl	800a1ec <__assert_func>
 80099d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099d4:	6004      	str	r4, [r0, #0]
 80099d6:	60c4      	str	r4, [r0, #12]
 80099d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099e0:	b94c      	cbnz	r4, 80099f6 <__pow5mult+0x66>
 80099e2:	f240 2171 	movw	r1, #625	; 0x271
 80099e6:	4630      	mov	r0, r6
 80099e8:	f7ff ff12 	bl	8009810 <__i2b>
 80099ec:	2300      	movs	r3, #0
 80099ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80099f2:	4604      	mov	r4, r0
 80099f4:	6003      	str	r3, [r0, #0]
 80099f6:	f04f 0900 	mov.w	r9, #0
 80099fa:	07eb      	lsls	r3, r5, #31
 80099fc:	d50a      	bpl.n	8009a14 <__pow5mult+0x84>
 80099fe:	4639      	mov	r1, r7
 8009a00:	4622      	mov	r2, r4
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7ff ff1a 	bl	800983c <__multiply>
 8009a08:	4639      	mov	r1, r7
 8009a0a:	4680      	mov	r8, r0
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f7ff fe47 	bl	80096a0 <_Bfree>
 8009a12:	4647      	mov	r7, r8
 8009a14:	106d      	asrs	r5, r5, #1
 8009a16:	d00b      	beq.n	8009a30 <__pow5mult+0xa0>
 8009a18:	6820      	ldr	r0, [r4, #0]
 8009a1a:	b938      	cbnz	r0, 8009a2c <__pow5mult+0x9c>
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7ff ff0b 	bl	800983c <__multiply>
 8009a26:	6020      	str	r0, [r4, #0]
 8009a28:	f8c0 9000 	str.w	r9, [r0]
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	e7e4      	b.n	80099fa <__pow5mult+0x6a>
 8009a30:	4638      	mov	r0, r7
 8009a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a36:	bf00      	nop
 8009a38:	0800c0e0 	.word	0x0800c0e0
 8009a3c:	0800bf0d 	.word	0x0800bf0d
 8009a40:	0800bf90 	.word	0x0800bf90

08009a44 <__lshift>:
 8009a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a48:	460c      	mov	r4, r1
 8009a4a:	6849      	ldr	r1, [r1, #4]
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a52:	68a3      	ldr	r3, [r4, #8]
 8009a54:	4607      	mov	r7, r0
 8009a56:	4691      	mov	r9, r2
 8009a58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a5c:	f108 0601 	add.w	r6, r8, #1
 8009a60:	42b3      	cmp	r3, r6
 8009a62:	db0b      	blt.n	8009a7c <__lshift+0x38>
 8009a64:	4638      	mov	r0, r7
 8009a66:	f7ff fddb 	bl	8009620 <_Balloc>
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	b948      	cbnz	r0, 8009a82 <__lshift+0x3e>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	4b2a      	ldr	r3, [pc, #168]	; (8009b1c <__lshift+0xd8>)
 8009a72:	482b      	ldr	r0, [pc, #172]	; (8009b20 <__lshift+0xdc>)
 8009a74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a78:	f000 fbb8 	bl	800a1ec <__assert_func>
 8009a7c:	3101      	adds	r1, #1
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	e7ee      	b.n	8009a60 <__lshift+0x1c>
 8009a82:	2300      	movs	r3, #0
 8009a84:	f100 0114 	add.w	r1, r0, #20
 8009a88:	f100 0210 	add.w	r2, r0, #16
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	4553      	cmp	r3, sl
 8009a90:	db37      	blt.n	8009b02 <__lshift+0xbe>
 8009a92:	6920      	ldr	r0, [r4, #16]
 8009a94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a98:	f104 0314 	add.w	r3, r4, #20
 8009a9c:	f019 091f 	ands.w	r9, r9, #31
 8009aa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aa4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009aa8:	d02f      	beq.n	8009b0a <__lshift+0xc6>
 8009aaa:	f1c9 0e20 	rsb	lr, r9, #32
 8009aae:	468a      	mov	sl, r1
 8009ab0:	f04f 0c00 	mov.w	ip, #0
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	fa02 f209 	lsl.w	r2, r2, r9
 8009aba:	ea42 020c 	orr.w	r2, r2, ip
 8009abe:	f84a 2b04 	str.w	r2, [sl], #4
 8009ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac6:	4298      	cmp	r0, r3
 8009ac8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009acc:	d8f2      	bhi.n	8009ab4 <__lshift+0x70>
 8009ace:	1b03      	subs	r3, r0, r4
 8009ad0:	3b15      	subs	r3, #21
 8009ad2:	f023 0303 	bic.w	r3, r3, #3
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	f104 0215 	add.w	r2, r4, #21
 8009adc:	4290      	cmp	r0, r2
 8009ade:	bf38      	it	cc
 8009ae0:	2304      	movcc	r3, #4
 8009ae2:	f841 c003 	str.w	ip, [r1, r3]
 8009ae6:	f1bc 0f00 	cmp.w	ip, #0
 8009aea:	d001      	beq.n	8009af0 <__lshift+0xac>
 8009aec:	f108 0602 	add.w	r6, r8, #2
 8009af0:	3e01      	subs	r6, #1
 8009af2:	4638      	mov	r0, r7
 8009af4:	612e      	str	r6, [r5, #16]
 8009af6:	4621      	mov	r1, r4
 8009af8:	f7ff fdd2 	bl	80096a0 <_Bfree>
 8009afc:	4628      	mov	r0, r5
 8009afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b02:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b06:	3301      	adds	r3, #1
 8009b08:	e7c1      	b.n	8009a8e <__lshift+0x4a>
 8009b0a:	3904      	subs	r1, #4
 8009b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b10:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b14:	4298      	cmp	r0, r3
 8009b16:	d8f9      	bhi.n	8009b0c <__lshift+0xc8>
 8009b18:	e7ea      	b.n	8009af0 <__lshift+0xac>
 8009b1a:	bf00      	nop
 8009b1c:	0800bf7f 	.word	0x0800bf7f
 8009b20:	0800bf90 	.word	0x0800bf90

08009b24 <__mcmp>:
 8009b24:	b530      	push	{r4, r5, lr}
 8009b26:	6902      	ldr	r2, [r0, #16]
 8009b28:	690c      	ldr	r4, [r1, #16]
 8009b2a:	1b12      	subs	r2, r2, r4
 8009b2c:	d10e      	bne.n	8009b4c <__mcmp+0x28>
 8009b2e:	f100 0314 	add.w	r3, r0, #20
 8009b32:	3114      	adds	r1, #20
 8009b34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b44:	42a5      	cmp	r5, r4
 8009b46:	d003      	beq.n	8009b50 <__mcmp+0x2c>
 8009b48:	d305      	bcc.n	8009b56 <__mcmp+0x32>
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	bd30      	pop	{r4, r5, pc}
 8009b50:	4283      	cmp	r3, r0
 8009b52:	d3f3      	bcc.n	8009b3c <__mcmp+0x18>
 8009b54:	e7fa      	b.n	8009b4c <__mcmp+0x28>
 8009b56:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5a:	e7f7      	b.n	8009b4c <__mcmp+0x28>

08009b5c <__mdiff>:
 8009b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	460c      	mov	r4, r1
 8009b62:	4606      	mov	r6, r0
 8009b64:	4611      	mov	r1, r2
 8009b66:	4620      	mov	r0, r4
 8009b68:	4690      	mov	r8, r2
 8009b6a:	f7ff ffdb 	bl	8009b24 <__mcmp>
 8009b6e:	1e05      	subs	r5, r0, #0
 8009b70:	d110      	bne.n	8009b94 <__mdiff+0x38>
 8009b72:	4629      	mov	r1, r5
 8009b74:	4630      	mov	r0, r6
 8009b76:	f7ff fd53 	bl	8009620 <_Balloc>
 8009b7a:	b930      	cbnz	r0, 8009b8a <__mdiff+0x2e>
 8009b7c:	4b3a      	ldr	r3, [pc, #232]	; (8009c68 <__mdiff+0x10c>)
 8009b7e:	4602      	mov	r2, r0
 8009b80:	f240 2132 	movw	r1, #562	; 0x232
 8009b84:	4839      	ldr	r0, [pc, #228]	; (8009c6c <__mdiff+0x110>)
 8009b86:	f000 fb31 	bl	800a1ec <__assert_func>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b94:	bfa4      	itt	ge
 8009b96:	4643      	movge	r3, r8
 8009b98:	46a0      	movge	r8, r4
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ba0:	bfa6      	itte	ge
 8009ba2:	461c      	movge	r4, r3
 8009ba4:	2500      	movge	r5, #0
 8009ba6:	2501      	movlt	r5, #1
 8009ba8:	f7ff fd3a 	bl	8009620 <_Balloc>
 8009bac:	b920      	cbnz	r0, 8009bb8 <__mdiff+0x5c>
 8009bae:	4b2e      	ldr	r3, [pc, #184]	; (8009c68 <__mdiff+0x10c>)
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bb6:	e7e5      	b.n	8009b84 <__mdiff+0x28>
 8009bb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bbc:	6926      	ldr	r6, [r4, #16]
 8009bbe:	60c5      	str	r5, [r0, #12]
 8009bc0:	f104 0914 	add.w	r9, r4, #20
 8009bc4:	f108 0514 	add.w	r5, r8, #20
 8009bc8:	f100 0e14 	add.w	lr, r0, #20
 8009bcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009bd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009bd4:	f108 0210 	add.w	r2, r8, #16
 8009bd8:	46f2      	mov	sl, lr
 8009bda:	2100      	movs	r1, #0
 8009bdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009be0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009be4:	fa1f f883 	uxth.w	r8, r3
 8009be8:	fa11 f18b 	uxtah	r1, r1, fp
 8009bec:	0c1b      	lsrs	r3, r3, #16
 8009bee:	eba1 0808 	sub.w	r8, r1, r8
 8009bf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009bfa:	fa1f f888 	uxth.w	r8, r8
 8009bfe:	1419      	asrs	r1, r3, #16
 8009c00:	454e      	cmp	r6, r9
 8009c02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c06:	f84a 3b04 	str.w	r3, [sl], #4
 8009c0a:	d8e7      	bhi.n	8009bdc <__mdiff+0x80>
 8009c0c:	1b33      	subs	r3, r6, r4
 8009c0e:	3b15      	subs	r3, #21
 8009c10:	f023 0303 	bic.w	r3, r3, #3
 8009c14:	3304      	adds	r3, #4
 8009c16:	3415      	adds	r4, #21
 8009c18:	42a6      	cmp	r6, r4
 8009c1a:	bf38      	it	cc
 8009c1c:	2304      	movcc	r3, #4
 8009c1e:	441d      	add	r5, r3
 8009c20:	4473      	add	r3, lr
 8009c22:	469e      	mov	lr, r3
 8009c24:	462e      	mov	r6, r5
 8009c26:	4566      	cmp	r6, ip
 8009c28:	d30e      	bcc.n	8009c48 <__mdiff+0xec>
 8009c2a:	f10c 0203 	add.w	r2, ip, #3
 8009c2e:	1b52      	subs	r2, r2, r5
 8009c30:	f022 0203 	bic.w	r2, r2, #3
 8009c34:	3d03      	subs	r5, #3
 8009c36:	45ac      	cmp	ip, r5
 8009c38:	bf38      	it	cc
 8009c3a:	2200      	movcc	r2, #0
 8009c3c:	441a      	add	r2, r3
 8009c3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c42:	b17b      	cbz	r3, 8009c64 <__mdiff+0x108>
 8009c44:	6107      	str	r7, [r0, #16]
 8009c46:	e7a3      	b.n	8009b90 <__mdiff+0x34>
 8009c48:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c4c:	fa11 f288 	uxtah	r2, r1, r8
 8009c50:	1414      	asrs	r4, r2, #16
 8009c52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c56:	b292      	uxth	r2, r2
 8009c58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c5c:	f84e 2b04 	str.w	r2, [lr], #4
 8009c60:	1421      	asrs	r1, r4, #16
 8009c62:	e7e0      	b.n	8009c26 <__mdiff+0xca>
 8009c64:	3f01      	subs	r7, #1
 8009c66:	e7ea      	b.n	8009c3e <__mdiff+0xe2>
 8009c68:	0800bf7f 	.word	0x0800bf7f
 8009c6c:	0800bf90 	.word	0x0800bf90

08009c70 <__d2b>:
 8009c70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c74:	4689      	mov	r9, r1
 8009c76:	2101      	movs	r1, #1
 8009c78:	ec57 6b10 	vmov	r6, r7, d0
 8009c7c:	4690      	mov	r8, r2
 8009c7e:	f7ff fccf 	bl	8009620 <_Balloc>
 8009c82:	4604      	mov	r4, r0
 8009c84:	b930      	cbnz	r0, 8009c94 <__d2b+0x24>
 8009c86:	4602      	mov	r2, r0
 8009c88:	4b25      	ldr	r3, [pc, #148]	; (8009d20 <__d2b+0xb0>)
 8009c8a:	4826      	ldr	r0, [pc, #152]	; (8009d24 <__d2b+0xb4>)
 8009c8c:	f240 310a 	movw	r1, #778	; 0x30a
 8009c90:	f000 faac 	bl	800a1ec <__assert_func>
 8009c94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c9c:	bb35      	cbnz	r5, 8009cec <__d2b+0x7c>
 8009c9e:	2e00      	cmp	r6, #0
 8009ca0:	9301      	str	r3, [sp, #4]
 8009ca2:	d028      	beq.n	8009cf6 <__d2b+0x86>
 8009ca4:	4668      	mov	r0, sp
 8009ca6:	9600      	str	r6, [sp, #0]
 8009ca8:	f7ff fd82 	bl	80097b0 <__lo0bits>
 8009cac:	9900      	ldr	r1, [sp, #0]
 8009cae:	b300      	cbz	r0, 8009cf2 <__d2b+0x82>
 8009cb0:	9a01      	ldr	r2, [sp, #4]
 8009cb2:	f1c0 0320 	rsb	r3, r0, #32
 8009cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cba:	430b      	orrs	r3, r1
 8009cbc:	40c2      	lsrs	r2, r0
 8009cbe:	6163      	str	r3, [r4, #20]
 8009cc0:	9201      	str	r2, [sp, #4]
 8009cc2:	9b01      	ldr	r3, [sp, #4]
 8009cc4:	61a3      	str	r3, [r4, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bf14      	ite	ne
 8009cca:	2202      	movne	r2, #2
 8009ccc:	2201      	moveq	r2, #1
 8009cce:	6122      	str	r2, [r4, #16]
 8009cd0:	b1d5      	cbz	r5, 8009d08 <__d2b+0x98>
 8009cd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cd6:	4405      	add	r5, r0
 8009cd8:	f8c9 5000 	str.w	r5, [r9]
 8009cdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ce0:	f8c8 0000 	str.w	r0, [r8]
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	b003      	add	sp, #12
 8009ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cf0:	e7d5      	b.n	8009c9e <__d2b+0x2e>
 8009cf2:	6161      	str	r1, [r4, #20]
 8009cf4:	e7e5      	b.n	8009cc2 <__d2b+0x52>
 8009cf6:	a801      	add	r0, sp, #4
 8009cf8:	f7ff fd5a 	bl	80097b0 <__lo0bits>
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	6163      	str	r3, [r4, #20]
 8009d00:	2201      	movs	r2, #1
 8009d02:	6122      	str	r2, [r4, #16]
 8009d04:	3020      	adds	r0, #32
 8009d06:	e7e3      	b.n	8009cd0 <__d2b+0x60>
 8009d08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d10:	f8c9 0000 	str.w	r0, [r9]
 8009d14:	6918      	ldr	r0, [r3, #16]
 8009d16:	f7ff fd2b 	bl	8009770 <__hi0bits>
 8009d1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d1e:	e7df      	b.n	8009ce0 <__d2b+0x70>
 8009d20:	0800bf7f 	.word	0x0800bf7f
 8009d24:	0800bf90 	.word	0x0800bf90

08009d28 <_calloc_r>:
 8009d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d2a:	fba1 2402 	umull	r2, r4, r1, r2
 8009d2e:	b94c      	cbnz	r4, 8009d44 <_calloc_r+0x1c>
 8009d30:	4611      	mov	r1, r2
 8009d32:	9201      	str	r2, [sp, #4]
 8009d34:	f000 f87a 	bl	8009e2c <_malloc_r>
 8009d38:	9a01      	ldr	r2, [sp, #4]
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	b930      	cbnz	r0, 8009d4c <_calloc_r+0x24>
 8009d3e:	4628      	mov	r0, r5
 8009d40:	b003      	add	sp, #12
 8009d42:	bd30      	pop	{r4, r5, pc}
 8009d44:	220c      	movs	r2, #12
 8009d46:	6002      	str	r2, [r0, #0]
 8009d48:	2500      	movs	r5, #0
 8009d4a:	e7f8      	b.n	8009d3e <_calloc_r+0x16>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	f7fe f937 	bl	8007fc0 <memset>
 8009d52:	e7f4      	b.n	8009d3e <_calloc_r+0x16>

08009d54 <_free_r>:
 8009d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d56:	2900      	cmp	r1, #0
 8009d58:	d044      	beq.n	8009de4 <_free_r+0x90>
 8009d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d5e:	9001      	str	r0, [sp, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f1a1 0404 	sub.w	r4, r1, #4
 8009d66:	bfb8      	it	lt
 8009d68:	18e4      	addlt	r4, r4, r3
 8009d6a:	f000 fa9b 	bl	800a2a4 <__malloc_lock>
 8009d6e:	4a1e      	ldr	r2, [pc, #120]	; (8009de8 <_free_r+0x94>)
 8009d70:	9801      	ldr	r0, [sp, #4]
 8009d72:	6813      	ldr	r3, [r2, #0]
 8009d74:	b933      	cbnz	r3, 8009d84 <_free_r+0x30>
 8009d76:	6063      	str	r3, [r4, #4]
 8009d78:	6014      	str	r4, [r2, #0]
 8009d7a:	b003      	add	sp, #12
 8009d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d80:	f000 ba96 	b.w	800a2b0 <__malloc_unlock>
 8009d84:	42a3      	cmp	r3, r4
 8009d86:	d908      	bls.n	8009d9a <_free_r+0x46>
 8009d88:	6825      	ldr	r5, [r4, #0]
 8009d8a:	1961      	adds	r1, r4, r5
 8009d8c:	428b      	cmp	r3, r1
 8009d8e:	bf01      	itttt	eq
 8009d90:	6819      	ldreq	r1, [r3, #0]
 8009d92:	685b      	ldreq	r3, [r3, #4]
 8009d94:	1949      	addeq	r1, r1, r5
 8009d96:	6021      	streq	r1, [r4, #0]
 8009d98:	e7ed      	b.n	8009d76 <_free_r+0x22>
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	b10b      	cbz	r3, 8009da4 <_free_r+0x50>
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	d9fa      	bls.n	8009d9a <_free_r+0x46>
 8009da4:	6811      	ldr	r1, [r2, #0]
 8009da6:	1855      	adds	r5, r2, r1
 8009da8:	42a5      	cmp	r5, r4
 8009daa:	d10b      	bne.n	8009dc4 <_free_r+0x70>
 8009dac:	6824      	ldr	r4, [r4, #0]
 8009dae:	4421      	add	r1, r4
 8009db0:	1854      	adds	r4, r2, r1
 8009db2:	42a3      	cmp	r3, r4
 8009db4:	6011      	str	r1, [r2, #0]
 8009db6:	d1e0      	bne.n	8009d7a <_free_r+0x26>
 8009db8:	681c      	ldr	r4, [r3, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	6053      	str	r3, [r2, #4]
 8009dbe:	4421      	add	r1, r4
 8009dc0:	6011      	str	r1, [r2, #0]
 8009dc2:	e7da      	b.n	8009d7a <_free_r+0x26>
 8009dc4:	d902      	bls.n	8009dcc <_free_r+0x78>
 8009dc6:	230c      	movs	r3, #12
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	e7d6      	b.n	8009d7a <_free_r+0x26>
 8009dcc:	6825      	ldr	r5, [r4, #0]
 8009dce:	1961      	adds	r1, r4, r5
 8009dd0:	428b      	cmp	r3, r1
 8009dd2:	bf04      	itt	eq
 8009dd4:	6819      	ldreq	r1, [r3, #0]
 8009dd6:	685b      	ldreq	r3, [r3, #4]
 8009dd8:	6063      	str	r3, [r4, #4]
 8009dda:	bf04      	itt	eq
 8009ddc:	1949      	addeq	r1, r1, r5
 8009dde:	6021      	streq	r1, [r4, #0]
 8009de0:	6054      	str	r4, [r2, #4]
 8009de2:	e7ca      	b.n	8009d7a <_free_r+0x26>
 8009de4:	b003      	add	sp, #12
 8009de6:	bd30      	pop	{r4, r5, pc}
 8009de8:	20000af0 	.word	0x20000af0

08009dec <sbrk_aligned>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	4e0e      	ldr	r6, [pc, #56]	; (8009e28 <sbrk_aligned+0x3c>)
 8009df0:	460c      	mov	r4, r1
 8009df2:	6831      	ldr	r1, [r6, #0]
 8009df4:	4605      	mov	r5, r0
 8009df6:	b911      	cbnz	r1, 8009dfe <sbrk_aligned+0x12>
 8009df8:	f000 f9e8 	bl	800a1cc <_sbrk_r>
 8009dfc:	6030      	str	r0, [r6, #0]
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4628      	mov	r0, r5
 8009e02:	f000 f9e3 	bl	800a1cc <_sbrk_r>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	d00a      	beq.n	8009e20 <sbrk_aligned+0x34>
 8009e0a:	1cc4      	adds	r4, r0, #3
 8009e0c:	f024 0403 	bic.w	r4, r4, #3
 8009e10:	42a0      	cmp	r0, r4
 8009e12:	d007      	beq.n	8009e24 <sbrk_aligned+0x38>
 8009e14:	1a21      	subs	r1, r4, r0
 8009e16:	4628      	mov	r0, r5
 8009e18:	f000 f9d8 	bl	800a1cc <_sbrk_r>
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d101      	bne.n	8009e24 <sbrk_aligned+0x38>
 8009e20:	f04f 34ff 	mov.w	r4, #4294967295
 8009e24:	4620      	mov	r0, r4
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	20000af4 	.word	0x20000af4

08009e2c <_malloc_r>:
 8009e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e30:	1ccd      	adds	r5, r1, #3
 8009e32:	f025 0503 	bic.w	r5, r5, #3
 8009e36:	3508      	adds	r5, #8
 8009e38:	2d0c      	cmp	r5, #12
 8009e3a:	bf38      	it	cc
 8009e3c:	250c      	movcc	r5, #12
 8009e3e:	2d00      	cmp	r5, #0
 8009e40:	4607      	mov	r7, r0
 8009e42:	db01      	blt.n	8009e48 <_malloc_r+0x1c>
 8009e44:	42a9      	cmp	r1, r5
 8009e46:	d905      	bls.n	8009e54 <_malloc_r+0x28>
 8009e48:	230c      	movs	r3, #12
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	2600      	movs	r6, #0
 8009e4e:	4630      	mov	r0, r6
 8009e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e54:	4e2e      	ldr	r6, [pc, #184]	; (8009f10 <_malloc_r+0xe4>)
 8009e56:	f000 fa25 	bl	800a2a4 <__malloc_lock>
 8009e5a:	6833      	ldr	r3, [r6, #0]
 8009e5c:	461c      	mov	r4, r3
 8009e5e:	bb34      	cbnz	r4, 8009eae <_malloc_r+0x82>
 8009e60:	4629      	mov	r1, r5
 8009e62:	4638      	mov	r0, r7
 8009e64:	f7ff ffc2 	bl	8009dec <sbrk_aligned>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	d14d      	bne.n	8009f0a <_malloc_r+0xde>
 8009e6e:	6834      	ldr	r4, [r6, #0]
 8009e70:	4626      	mov	r6, r4
 8009e72:	2e00      	cmp	r6, #0
 8009e74:	d140      	bne.n	8009ef8 <_malloc_r+0xcc>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	4631      	mov	r1, r6
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	eb04 0803 	add.w	r8, r4, r3
 8009e80:	f000 f9a4 	bl	800a1cc <_sbrk_r>
 8009e84:	4580      	cmp	r8, r0
 8009e86:	d13a      	bne.n	8009efe <_malloc_r+0xd2>
 8009e88:	6821      	ldr	r1, [r4, #0]
 8009e8a:	3503      	adds	r5, #3
 8009e8c:	1a6d      	subs	r5, r5, r1
 8009e8e:	f025 0503 	bic.w	r5, r5, #3
 8009e92:	3508      	adds	r5, #8
 8009e94:	2d0c      	cmp	r5, #12
 8009e96:	bf38      	it	cc
 8009e98:	250c      	movcc	r5, #12
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	f7ff ffa5 	bl	8009dec <sbrk_aligned>
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	d02b      	beq.n	8009efe <_malloc_r+0xd2>
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	442b      	add	r3, r5
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	e00e      	b.n	8009ecc <_malloc_r+0xa0>
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	1b52      	subs	r2, r2, r5
 8009eb2:	d41e      	bmi.n	8009ef2 <_malloc_r+0xc6>
 8009eb4:	2a0b      	cmp	r2, #11
 8009eb6:	d916      	bls.n	8009ee6 <_malloc_r+0xba>
 8009eb8:	1961      	adds	r1, r4, r5
 8009eba:	42a3      	cmp	r3, r4
 8009ebc:	6025      	str	r5, [r4, #0]
 8009ebe:	bf18      	it	ne
 8009ec0:	6059      	strne	r1, [r3, #4]
 8009ec2:	6863      	ldr	r3, [r4, #4]
 8009ec4:	bf08      	it	eq
 8009ec6:	6031      	streq	r1, [r6, #0]
 8009ec8:	5162      	str	r2, [r4, r5]
 8009eca:	604b      	str	r3, [r1, #4]
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f104 060b 	add.w	r6, r4, #11
 8009ed2:	f000 f9ed 	bl	800a2b0 <__malloc_unlock>
 8009ed6:	f026 0607 	bic.w	r6, r6, #7
 8009eda:	1d23      	adds	r3, r4, #4
 8009edc:	1af2      	subs	r2, r6, r3
 8009ede:	d0b6      	beq.n	8009e4e <_malloc_r+0x22>
 8009ee0:	1b9b      	subs	r3, r3, r6
 8009ee2:	50a3      	str	r3, [r4, r2]
 8009ee4:	e7b3      	b.n	8009e4e <_malloc_r+0x22>
 8009ee6:	6862      	ldr	r2, [r4, #4]
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	bf0c      	ite	eq
 8009eec:	6032      	streq	r2, [r6, #0]
 8009eee:	605a      	strne	r2, [r3, #4]
 8009ef0:	e7ec      	b.n	8009ecc <_malloc_r+0xa0>
 8009ef2:	4623      	mov	r3, r4
 8009ef4:	6864      	ldr	r4, [r4, #4]
 8009ef6:	e7b2      	b.n	8009e5e <_malloc_r+0x32>
 8009ef8:	4634      	mov	r4, r6
 8009efa:	6876      	ldr	r6, [r6, #4]
 8009efc:	e7b9      	b.n	8009e72 <_malloc_r+0x46>
 8009efe:	230c      	movs	r3, #12
 8009f00:	603b      	str	r3, [r7, #0]
 8009f02:	4638      	mov	r0, r7
 8009f04:	f000 f9d4 	bl	800a2b0 <__malloc_unlock>
 8009f08:	e7a1      	b.n	8009e4e <_malloc_r+0x22>
 8009f0a:	6025      	str	r5, [r4, #0]
 8009f0c:	e7de      	b.n	8009ecc <_malloc_r+0xa0>
 8009f0e:	bf00      	nop
 8009f10:	20000af0 	.word	0x20000af0

08009f14 <__ssputs_r>:
 8009f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	688e      	ldr	r6, [r1, #8]
 8009f1a:	429e      	cmp	r6, r3
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	460c      	mov	r4, r1
 8009f20:	4690      	mov	r8, r2
 8009f22:	461f      	mov	r7, r3
 8009f24:	d838      	bhi.n	8009f98 <__ssputs_r+0x84>
 8009f26:	898a      	ldrh	r2, [r1, #12]
 8009f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f2c:	d032      	beq.n	8009f94 <__ssputs_r+0x80>
 8009f2e:	6825      	ldr	r5, [r4, #0]
 8009f30:	6909      	ldr	r1, [r1, #16]
 8009f32:	eba5 0901 	sub.w	r9, r5, r1
 8009f36:	6965      	ldr	r5, [r4, #20]
 8009f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f40:	3301      	adds	r3, #1
 8009f42:	444b      	add	r3, r9
 8009f44:	106d      	asrs	r5, r5, #1
 8009f46:	429d      	cmp	r5, r3
 8009f48:	bf38      	it	cc
 8009f4a:	461d      	movcc	r5, r3
 8009f4c:	0553      	lsls	r3, r2, #21
 8009f4e:	d531      	bpl.n	8009fb4 <__ssputs_r+0xa0>
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7ff ff6b 	bl	8009e2c <_malloc_r>
 8009f56:	4606      	mov	r6, r0
 8009f58:	b950      	cbnz	r0, 8009f70 <__ssputs_r+0x5c>
 8009f5a:	230c      	movs	r3, #12
 8009f5c:	f8ca 3000 	str.w	r3, [sl]
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f70:	6921      	ldr	r1, [r4, #16]
 8009f72:	464a      	mov	r2, r9
 8009f74:	f7ff fb46 	bl	8009604 <memcpy>
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	6126      	str	r6, [r4, #16]
 8009f86:	6165      	str	r5, [r4, #20]
 8009f88:	444e      	add	r6, r9
 8009f8a:	eba5 0509 	sub.w	r5, r5, r9
 8009f8e:	6026      	str	r6, [r4, #0]
 8009f90:	60a5      	str	r5, [r4, #8]
 8009f92:	463e      	mov	r6, r7
 8009f94:	42be      	cmp	r6, r7
 8009f96:	d900      	bls.n	8009f9a <__ssputs_r+0x86>
 8009f98:	463e      	mov	r6, r7
 8009f9a:	6820      	ldr	r0, [r4, #0]
 8009f9c:	4632      	mov	r2, r6
 8009f9e:	4641      	mov	r1, r8
 8009fa0:	f000 f966 	bl	800a270 <memmove>
 8009fa4:	68a3      	ldr	r3, [r4, #8]
 8009fa6:	1b9b      	subs	r3, r3, r6
 8009fa8:	60a3      	str	r3, [r4, #8]
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	4433      	add	r3, r6
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7db      	b.n	8009f6c <__ssputs_r+0x58>
 8009fb4:	462a      	mov	r2, r5
 8009fb6:	f000 f981 	bl	800a2bc <_realloc_r>
 8009fba:	4606      	mov	r6, r0
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d1e1      	bne.n	8009f84 <__ssputs_r+0x70>
 8009fc0:	6921      	ldr	r1, [r4, #16]
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	f7ff fec6 	bl	8009d54 <_free_r>
 8009fc8:	e7c7      	b.n	8009f5a <__ssputs_r+0x46>
	...

08009fcc <_svfiprintf_r>:
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	4698      	mov	r8, r3
 8009fd2:	898b      	ldrh	r3, [r1, #12]
 8009fd4:	061b      	lsls	r3, r3, #24
 8009fd6:	b09d      	sub	sp, #116	; 0x74
 8009fd8:	4607      	mov	r7, r0
 8009fda:	460d      	mov	r5, r1
 8009fdc:	4614      	mov	r4, r2
 8009fde:	d50e      	bpl.n	8009ffe <_svfiprintf_r+0x32>
 8009fe0:	690b      	ldr	r3, [r1, #16]
 8009fe2:	b963      	cbnz	r3, 8009ffe <_svfiprintf_r+0x32>
 8009fe4:	2140      	movs	r1, #64	; 0x40
 8009fe6:	f7ff ff21 	bl	8009e2c <_malloc_r>
 8009fea:	6028      	str	r0, [r5, #0]
 8009fec:	6128      	str	r0, [r5, #16]
 8009fee:	b920      	cbnz	r0, 8009ffa <_svfiprintf_r+0x2e>
 8009ff0:	230c      	movs	r3, #12
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff8:	e0d1      	b.n	800a19e <_svfiprintf_r+0x1d2>
 8009ffa:	2340      	movs	r3, #64	; 0x40
 8009ffc:	616b      	str	r3, [r5, #20]
 8009ffe:	2300      	movs	r3, #0
 800a000:	9309      	str	r3, [sp, #36]	; 0x24
 800a002:	2320      	movs	r3, #32
 800a004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a008:	f8cd 800c 	str.w	r8, [sp, #12]
 800a00c:	2330      	movs	r3, #48	; 0x30
 800a00e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1b8 <_svfiprintf_r+0x1ec>
 800a012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a016:	f04f 0901 	mov.w	r9, #1
 800a01a:	4623      	mov	r3, r4
 800a01c:	469a      	mov	sl, r3
 800a01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a022:	b10a      	cbz	r2, 800a028 <_svfiprintf_r+0x5c>
 800a024:	2a25      	cmp	r2, #37	; 0x25
 800a026:	d1f9      	bne.n	800a01c <_svfiprintf_r+0x50>
 800a028:	ebba 0b04 	subs.w	fp, sl, r4
 800a02c:	d00b      	beq.n	800a046 <_svfiprintf_r+0x7a>
 800a02e:	465b      	mov	r3, fp
 800a030:	4622      	mov	r2, r4
 800a032:	4629      	mov	r1, r5
 800a034:	4638      	mov	r0, r7
 800a036:	f7ff ff6d 	bl	8009f14 <__ssputs_r>
 800a03a:	3001      	adds	r0, #1
 800a03c:	f000 80aa 	beq.w	800a194 <_svfiprintf_r+0x1c8>
 800a040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a042:	445a      	add	r2, fp
 800a044:	9209      	str	r2, [sp, #36]	; 0x24
 800a046:	f89a 3000 	ldrb.w	r3, [sl]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 80a2 	beq.w	800a194 <_svfiprintf_r+0x1c8>
 800a050:	2300      	movs	r3, #0
 800a052:	f04f 32ff 	mov.w	r2, #4294967295
 800a056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a05a:	f10a 0a01 	add.w	sl, sl, #1
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	9307      	str	r3, [sp, #28]
 800a062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a066:	931a      	str	r3, [sp, #104]	; 0x68
 800a068:	4654      	mov	r4, sl
 800a06a:	2205      	movs	r2, #5
 800a06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a070:	4851      	ldr	r0, [pc, #324]	; (800a1b8 <_svfiprintf_r+0x1ec>)
 800a072:	f7f6 f8b5 	bl	80001e0 <memchr>
 800a076:	9a04      	ldr	r2, [sp, #16]
 800a078:	b9d8      	cbnz	r0, 800a0b2 <_svfiprintf_r+0xe6>
 800a07a:	06d0      	lsls	r0, r2, #27
 800a07c:	bf44      	itt	mi
 800a07e:	2320      	movmi	r3, #32
 800a080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a084:	0711      	lsls	r1, r2, #28
 800a086:	bf44      	itt	mi
 800a088:	232b      	movmi	r3, #43	; 0x2b
 800a08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a08e:	f89a 3000 	ldrb.w	r3, [sl]
 800a092:	2b2a      	cmp	r3, #42	; 0x2a
 800a094:	d015      	beq.n	800a0c2 <_svfiprintf_r+0xf6>
 800a096:	9a07      	ldr	r2, [sp, #28]
 800a098:	4654      	mov	r4, sl
 800a09a:	2000      	movs	r0, #0
 800a09c:	f04f 0c0a 	mov.w	ip, #10
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0a6:	3b30      	subs	r3, #48	; 0x30
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	d94e      	bls.n	800a14a <_svfiprintf_r+0x17e>
 800a0ac:	b1b0      	cbz	r0, 800a0dc <_svfiprintf_r+0x110>
 800a0ae:	9207      	str	r2, [sp, #28]
 800a0b0:	e014      	b.n	800a0dc <_svfiprintf_r+0x110>
 800a0b2:	eba0 0308 	sub.w	r3, r0, r8
 800a0b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	9304      	str	r3, [sp, #16]
 800a0be:	46a2      	mov	sl, r4
 800a0c0:	e7d2      	b.n	800a068 <_svfiprintf_r+0x9c>
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	1d19      	adds	r1, r3, #4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	9103      	str	r1, [sp, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	bfbb      	ittet	lt
 800a0ce:	425b      	neglt	r3, r3
 800a0d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a0d4:	9307      	strge	r3, [sp, #28]
 800a0d6:	9307      	strlt	r3, [sp, #28]
 800a0d8:	bfb8      	it	lt
 800a0da:	9204      	strlt	r2, [sp, #16]
 800a0dc:	7823      	ldrb	r3, [r4, #0]
 800a0de:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e0:	d10c      	bne.n	800a0fc <_svfiprintf_r+0x130>
 800a0e2:	7863      	ldrb	r3, [r4, #1]
 800a0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e6:	d135      	bne.n	800a154 <_svfiprintf_r+0x188>
 800a0e8:	9b03      	ldr	r3, [sp, #12]
 800a0ea:	1d1a      	adds	r2, r3, #4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	9203      	str	r2, [sp, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bfb8      	it	lt
 800a0f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0f8:	3402      	adds	r4, #2
 800a0fa:	9305      	str	r3, [sp, #20]
 800a0fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1c8 <_svfiprintf_r+0x1fc>
 800a100:	7821      	ldrb	r1, [r4, #0]
 800a102:	2203      	movs	r2, #3
 800a104:	4650      	mov	r0, sl
 800a106:	f7f6 f86b 	bl	80001e0 <memchr>
 800a10a:	b140      	cbz	r0, 800a11e <_svfiprintf_r+0x152>
 800a10c:	2340      	movs	r3, #64	; 0x40
 800a10e:	eba0 000a 	sub.w	r0, r0, sl
 800a112:	fa03 f000 	lsl.w	r0, r3, r0
 800a116:	9b04      	ldr	r3, [sp, #16]
 800a118:	4303      	orrs	r3, r0
 800a11a:	3401      	adds	r4, #1
 800a11c:	9304      	str	r3, [sp, #16]
 800a11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a122:	4826      	ldr	r0, [pc, #152]	; (800a1bc <_svfiprintf_r+0x1f0>)
 800a124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a128:	2206      	movs	r2, #6
 800a12a:	f7f6 f859 	bl	80001e0 <memchr>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d038      	beq.n	800a1a4 <_svfiprintf_r+0x1d8>
 800a132:	4b23      	ldr	r3, [pc, #140]	; (800a1c0 <_svfiprintf_r+0x1f4>)
 800a134:	bb1b      	cbnz	r3, 800a17e <_svfiprintf_r+0x1b2>
 800a136:	9b03      	ldr	r3, [sp, #12]
 800a138:	3307      	adds	r3, #7
 800a13a:	f023 0307 	bic.w	r3, r3, #7
 800a13e:	3308      	adds	r3, #8
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a144:	4433      	add	r3, r6
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	e767      	b.n	800a01a <_svfiprintf_r+0x4e>
 800a14a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a14e:	460c      	mov	r4, r1
 800a150:	2001      	movs	r0, #1
 800a152:	e7a5      	b.n	800a0a0 <_svfiprintf_r+0xd4>
 800a154:	2300      	movs	r3, #0
 800a156:	3401      	adds	r4, #1
 800a158:	9305      	str	r3, [sp, #20]
 800a15a:	4619      	mov	r1, r3
 800a15c:	f04f 0c0a 	mov.w	ip, #10
 800a160:	4620      	mov	r0, r4
 800a162:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a166:	3a30      	subs	r2, #48	; 0x30
 800a168:	2a09      	cmp	r2, #9
 800a16a:	d903      	bls.n	800a174 <_svfiprintf_r+0x1a8>
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d0c5      	beq.n	800a0fc <_svfiprintf_r+0x130>
 800a170:	9105      	str	r1, [sp, #20]
 800a172:	e7c3      	b.n	800a0fc <_svfiprintf_r+0x130>
 800a174:	fb0c 2101 	mla	r1, ip, r1, r2
 800a178:	4604      	mov	r4, r0
 800a17a:	2301      	movs	r3, #1
 800a17c:	e7f0      	b.n	800a160 <_svfiprintf_r+0x194>
 800a17e:	ab03      	add	r3, sp, #12
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	462a      	mov	r2, r5
 800a184:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <_svfiprintf_r+0x1f8>)
 800a186:	a904      	add	r1, sp, #16
 800a188:	4638      	mov	r0, r7
 800a18a:	f7fd ffc1 	bl	8008110 <_printf_float>
 800a18e:	1c42      	adds	r2, r0, #1
 800a190:	4606      	mov	r6, r0
 800a192:	d1d6      	bne.n	800a142 <_svfiprintf_r+0x176>
 800a194:	89ab      	ldrh	r3, [r5, #12]
 800a196:	065b      	lsls	r3, r3, #25
 800a198:	f53f af2c 	bmi.w	8009ff4 <_svfiprintf_r+0x28>
 800a19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a19e:	b01d      	add	sp, #116	; 0x74
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	ab03      	add	r3, sp, #12
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	462a      	mov	r2, r5
 800a1aa:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <_svfiprintf_r+0x1f8>)
 800a1ac:	a904      	add	r1, sp, #16
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	f7fe fa52 	bl	8008658 <_printf_i>
 800a1b4:	e7eb      	b.n	800a18e <_svfiprintf_r+0x1c2>
 800a1b6:	bf00      	nop
 800a1b8:	0800c0ec 	.word	0x0800c0ec
 800a1bc:	0800c0f6 	.word	0x0800c0f6
 800a1c0:	08008111 	.word	0x08008111
 800a1c4:	08009f15 	.word	0x08009f15
 800a1c8:	0800c0f2 	.word	0x0800c0f2

0800a1cc <_sbrk_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	4d06      	ldr	r5, [pc, #24]	; (800a1e8 <_sbrk_r+0x1c>)
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	602b      	str	r3, [r5, #0]
 800a1d8:	f7f9 fa72 	bl	80036c0 <_sbrk>
 800a1dc:	1c43      	adds	r3, r0, #1
 800a1de:	d102      	bne.n	800a1e6 <_sbrk_r+0x1a>
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	b103      	cbz	r3, 800a1e6 <_sbrk_r+0x1a>
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	bd38      	pop	{r3, r4, r5, pc}
 800a1e8:	20000af8 	.word	0x20000af8

0800a1ec <__assert_func>:
 800a1ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ee:	4614      	mov	r4, r2
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <__assert_func+0x2c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	68d8      	ldr	r0, [r3, #12]
 800a1fa:	b14c      	cbz	r4, 800a210 <__assert_func+0x24>
 800a1fc:	4b07      	ldr	r3, [pc, #28]	; (800a21c <__assert_func+0x30>)
 800a1fe:	9100      	str	r1, [sp, #0]
 800a200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a204:	4906      	ldr	r1, [pc, #24]	; (800a220 <__assert_func+0x34>)
 800a206:	462b      	mov	r3, r5
 800a208:	f000 f80e 	bl	800a228 <fiprintf>
 800a20c:	f000 faac 	bl	800a768 <abort>
 800a210:	4b04      	ldr	r3, [pc, #16]	; (800a224 <__assert_func+0x38>)
 800a212:	461c      	mov	r4, r3
 800a214:	e7f3      	b.n	800a1fe <__assert_func+0x12>
 800a216:	bf00      	nop
 800a218:	20000028 	.word	0x20000028
 800a21c:	0800c0fd 	.word	0x0800c0fd
 800a220:	0800c10a 	.word	0x0800c10a
 800a224:	0800c138 	.word	0x0800c138

0800a228 <fiprintf>:
 800a228:	b40e      	push	{r1, r2, r3}
 800a22a:	b503      	push	{r0, r1, lr}
 800a22c:	4601      	mov	r1, r0
 800a22e:	ab03      	add	r3, sp, #12
 800a230:	4805      	ldr	r0, [pc, #20]	; (800a248 <fiprintf+0x20>)
 800a232:	f853 2b04 	ldr.w	r2, [r3], #4
 800a236:	6800      	ldr	r0, [r0, #0]
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	f000 f897 	bl	800a36c <_vfiprintf_r>
 800a23e:	b002      	add	sp, #8
 800a240:	f85d eb04 	ldr.w	lr, [sp], #4
 800a244:	b003      	add	sp, #12
 800a246:	4770      	bx	lr
 800a248:	20000028 	.word	0x20000028

0800a24c <__ascii_mbtowc>:
 800a24c:	b082      	sub	sp, #8
 800a24e:	b901      	cbnz	r1, 800a252 <__ascii_mbtowc+0x6>
 800a250:	a901      	add	r1, sp, #4
 800a252:	b142      	cbz	r2, 800a266 <__ascii_mbtowc+0x1a>
 800a254:	b14b      	cbz	r3, 800a26a <__ascii_mbtowc+0x1e>
 800a256:	7813      	ldrb	r3, [r2, #0]
 800a258:	600b      	str	r3, [r1, #0]
 800a25a:	7812      	ldrb	r2, [r2, #0]
 800a25c:	1e10      	subs	r0, r2, #0
 800a25e:	bf18      	it	ne
 800a260:	2001      	movne	r0, #1
 800a262:	b002      	add	sp, #8
 800a264:	4770      	bx	lr
 800a266:	4610      	mov	r0, r2
 800a268:	e7fb      	b.n	800a262 <__ascii_mbtowc+0x16>
 800a26a:	f06f 0001 	mvn.w	r0, #1
 800a26e:	e7f8      	b.n	800a262 <__ascii_mbtowc+0x16>

0800a270 <memmove>:
 800a270:	4288      	cmp	r0, r1
 800a272:	b510      	push	{r4, lr}
 800a274:	eb01 0402 	add.w	r4, r1, r2
 800a278:	d902      	bls.n	800a280 <memmove+0x10>
 800a27a:	4284      	cmp	r4, r0
 800a27c:	4623      	mov	r3, r4
 800a27e:	d807      	bhi.n	800a290 <memmove+0x20>
 800a280:	1e43      	subs	r3, r0, #1
 800a282:	42a1      	cmp	r1, r4
 800a284:	d008      	beq.n	800a298 <memmove+0x28>
 800a286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a28a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a28e:	e7f8      	b.n	800a282 <memmove+0x12>
 800a290:	4402      	add	r2, r0
 800a292:	4601      	mov	r1, r0
 800a294:	428a      	cmp	r2, r1
 800a296:	d100      	bne.n	800a29a <memmove+0x2a>
 800a298:	bd10      	pop	{r4, pc}
 800a29a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a29e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2a2:	e7f7      	b.n	800a294 <memmove+0x24>

0800a2a4 <__malloc_lock>:
 800a2a4:	4801      	ldr	r0, [pc, #4]	; (800a2ac <__malloc_lock+0x8>)
 800a2a6:	f000 bc1f 	b.w	800aae8 <__retarget_lock_acquire_recursive>
 800a2aa:	bf00      	nop
 800a2ac:	20000afc 	.word	0x20000afc

0800a2b0 <__malloc_unlock>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	; (800a2b8 <__malloc_unlock+0x8>)
 800a2b2:	f000 bc1a 	b.w	800aaea <__retarget_lock_release_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	20000afc 	.word	0x20000afc

0800a2bc <_realloc_r>:
 800a2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	4614      	mov	r4, r2
 800a2c4:	460e      	mov	r6, r1
 800a2c6:	b921      	cbnz	r1, 800a2d2 <_realloc_r+0x16>
 800a2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	f7ff bdad 	b.w	8009e2c <_malloc_r>
 800a2d2:	b92a      	cbnz	r2, 800a2e0 <_realloc_r+0x24>
 800a2d4:	f7ff fd3e 	bl	8009d54 <_free_r>
 800a2d8:	4625      	mov	r5, r4
 800a2da:	4628      	mov	r0, r5
 800a2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e0:	f000 fc6a 	bl	800abb8 <_malloc_usable_size_r>
 800a2e4:	4284      	cmp	r4, r0
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	d802      	bhi.n	800a2f0 <_realloc_r+0x34>
 800a2ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2ee:	d812      	bhi.n	800a316 <_realloc_r+0x5a>
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	f7ff fd9a 	bl	8009e2c <_malloc_r>
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d0ed      	beq.n	800a2da <_realloc_r+0x1e>
 800a2fe:	42bc      	cmp	r4, r7
 800a300:	4622      	mov	r2, r4
 800a302:	4631      	mov	r1, r6
 800a304:	bf28      	it	cs
 800a306:	463a      	movcs	r2, r7
 800a308:	f7ff f97c 	bl	8009604 <memcpy>
 800a30c:	4631      	mov	r1, r6
 800a30e:	4640      	mov	r0, r8
 800a310:	f7ff fd20 	bl	8009d54 <_free_r>
 800a314:	e7e1      	b.n	800a2da <_realloc_r+0x1e>
 800a316:	4635      	mov	r5, r6
 800a318:	e7df      	b.n	800a2da <_realloc_r+0x1e>

0800a31a <__sfputc_r>:
 800a31a:	6893      	ldr	r3, [r2, #8]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	2b00      	cmp	r3, #0
 800a320:	b410      	push	{r4}
 800a322:	6093      	str	r3, [r2, #8]
 800a324:	da08      	bge.n	800a338 <__sfputc_r+0x1e>
 800a326:	6994      	ldr	r4, [r2, #24]
 800a328:	42a3      	cmp	r3, r4
 800a32a:	db01      	blt.n	800a330 <__sfputc_r+0x16>
 800a32c:	290a      	cmp	r1, #10
 800a32e:	d103      	bne.n	800a338 <__sfputc_r+0x1e>
 800a330:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a334:	f000 b94a 	b.w	800a5cc <__swbuf_r>
 800a338:	6813      	ldr	r3, [r2, #0]
 800a33a:	1c58      	adds	r0, r3, #1
 800a33c:	6010      	str	r0, [r2, #0]
 800a33e:	7019      	strb	r1, [r3, #0]
 800a340:	4608      	mov	r0, r1
 800a342:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <__sfputs_r>:
 800a348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34a:	4606      	mov	r6, r0
 800a34c:	460f      	mov	r7, r1
 800a34e:	4614      	mov	r4, r2
 800a350:	18d5      	adds	r5, r2, r3
 800a352:	42ac      	cmp	r4, r5
 800a354:	d101      	bne.n	800a35a <__sfputs_r+0x12>
 800a356:	2000      	movs	r0, #0
 800a358:	e007      	b.n	800a36a <__sfputs_r+0x22>
 800a35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35e:	463a      	mov	r2, r7
 800a360:	4630      	mov	r0, r6
 800a362:	f7ff ffda 	bl	800a31a <__sfputc_r>
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	d1f3      	bne.n	800a352 <__sfputs_r+0xa>
 800a36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a36c <_vfiprintf_r>:
 800a36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a370:	460d      	mov	r5, r1
 800a372:	b09d      	sub	sp, #116	; 0x74
 800a374:	4614      	mov	r4, r2
 800a376:	4698      	mov	r8, r3
 800a378:	4606      	mov	r6, r0
 800a37a:	b118      	cbz	r0, 800a384 <_vfiprintf_r+0x18>
 800a37c:	6983      	ldr	r3, [r0, #24]
 800a37e:	b90b      	cbnz	r3, 800a384 <_vfiprintf_r+0x18>
 800a380:	f000 fb14 	bl	800a9ac <__sinit>
 800a384:	4b89      	ldr	r3, [pc, #548]	; (800a5ac <_vfiprintf_r+0x240>)
 800a386:	429d      	cmp	r5, r3
 800a388:	d11b      	bne.n	800a3c2 <_vfiprintf_r+0x56>
 800a38a:	6875      	ldr	r5, [r6, #4]
 800a38c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a38e:	07d9      	lsls	r1, r3, #31
 800a390:	d405      	bmi.n	800a39e <_vfiprintf_r+0x32>
 800a392:	89ab      	ldrh	r3, [r5, #12]
 800a394:	059a      	lsls	r2, r3, #22
 800a396:	d402      	bmi.n	800a39e <_vfiprintf_r+0x32>
 800a398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a39a:	f000 fba5 	bl	800aae8 <__retarget_lock_acquire_recursive>
 800a39e:	89ab      	ldrh	r3, [r5, #12]
 800a3a0:	071b      	lsls	r3, r3, #28
 800a3a2:	d501      	bpl.n	800a3a8 <_vfiprintf_r+0x3c>
 800a3a4:	692b      	ldr	r3, [r5, #16]
 800a3a6:	b9eb      	cbnz	r3, 800a3e4 <_vfiprintf_r+0x78>
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f000 f96e 	bl	800a68c <__swsetup_r>
 800a3b0:	b1c0      	cbz	r0, 800a3e4 <_vfiprintf_r+0x78>
 800a3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3b4:	07dc      	lsls	r4, r3, #31
 800a3b6:	d50e      	bpl.n	800a3d6 <_vfiprintf_r+0x6a>
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3bc:	b01d      	add	sp, #116	; 0x74
 800a3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c2:	4b7b      	ldr	r3, [pc, #492]	; (800a5b0 <_vfiprintf_r+0x244>)
 800a3c4:	429d      	cmp	r5, r3
 800a3c6:	d101      	bne.n	800a3cc <_vfiprintf_r+0x60>
 800a3c8:	68b5      	ldr	r5, [r6, #8]
 800a3ca:	e7df      	b.n	800a38c <_vfiprintf_r+0x20>
 800a3cc:	4b79      	ldr	r3, [pc, #484]	; (800a5b4 <_vfiprintf_r+0x248>)
 800a3ce:	429d      	cmp	r5, r3
 800a3d0:	bf08      	it	eq
 800a3d2:	68f5      	ldreq	r5, [r6, #12]
 800a3d4:	e7da      	b.n	800a38c <_vfiprintf_r+0x20>
 800a3d6:	89ab      	ldrh	r3, [r5, #12]
 800a3d8:	0598      	lsls	r0, r3, #22
 800a3da:	d4ed      	bmi.n	800a3b8 <_vfiprintf_r+0x4c>
 800a3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3de:	f000 fb84 	bl	800aaea <__retarget_lock_release_recursive>
 800a3e2:	e7e9      	b.n	800a3b8 <_vfiprintf_r+0x4c>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e8:	2320      	movs	r3, #32
 800a3ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f2:	2330      	movs	r3, #48	; 0x30
 800a3f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5b8 <_vfiprintf_r+0x24c>
 800a3f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3fc:	f04f 0901 	mov.w	r9, #1
 800a400:	4623      	mov	r3, r4
 800a402:	469a      	mov	sl, r3
 800a404:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a408:	b10a      	cbz	r2, 800a40e <_vfiprintf_r+0xa2>
 800a40a:	2a25      	cmp	r2, #37	; 0x25
 800a40c:	d1f9      	bne.n	800a402 <_vfiprintf_r+0x96>
 800a40e:	ebba 0b04 	subs.w	fp, sl, r4
 800a412:	d00b      	beq.n	800a42c <_vfiprintf_r+0xc0>
 800a414:	465b      	mov	r3, fp
 800a416:	4622      	mov	r2, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	4630      	mov	r0, r6
 800a41c:	f7ff ff94 	bl	800a348 <__sfputs_r>
 800a420:	3001      	adds	r0, #1
 800a422:	f000 80aa 	beq.w	800a57a <_vfiprintf_r+0x20e>
 800a426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a428:	445a      	add	r2, fp
 800a42a:	9209      	str	r2, [sp, #36]	; 0x24
 800a42c:	f89a 3000 	ldrb.w	r3, [sl]
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 80a2 	beq.w	800a57a <_vfiprintf_r+0x20e>
 800a436:	2300      	movs	r3, #0
 800a438:	f04f 32ff 	mov.w	r2, #4294967295
 800a43c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a440:	f10a 0a01 	add.w	sl, sl, #1
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	9307      	str	r3, [sp, #28]
 800a448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a44c:	931a      	str	r3, [sp, #104]	; 0x68
 800a44e:	4654      	mov	r4, sl
 800a450:	2205      	movs	r2, #5
 800a452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a456:	4858      	ldr	r0, [pc, #352]	; (800a5b8 <_vfiprintf_r+0x24c>)
 800a458:	f7f5 fec2 	bl	80001e0 <memchr>
 800a45c:	9a04      	ldr	r2, [sp, #16]
 800a45e:	b9d8      	cbnz	r0, 800a498 <_vfiprintf_r+0x12c>
 800a460:	06d1      	lsls	r1, r2, #27
 800a462:	bf44      	itt	mi
 800a464:	2320      	movmi	r3, #32
 800a466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a46a:	0713      	lsls	r3, r2, #28
 800a46c:	bf44      	itt	mi
 800a46e:	232b      	movmi	r3, #43	; 0x2b
 800a470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a474:	f89a 3000 	ldrb.w	r3, [sl]
 800a478:	2b2a      	cmp	r3, #42	; 0x2a
 800a47a:	d015      	beq.n	800a4a8 <_vfiprintf_r+0x13c>
 800a47c:	9a07      	ldr	r2, [sp, #28]
 800a47e:	4654      	mov	r4, sl
 800a480:	2000      	movs	r0, #0
 800a482:	f04f 0c0a 	mov.w	ip, #10
 800a486:	4621      	mov	r1, r4
 800a488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a48c:	3b30      	subs	r3, #48	; 0x30
 800a48e:	2b09      	cmp	r3, #9
 800a490:	d94e      	bls.n	800a530 <_vfiprintf_r+0x1c4>
 800a492:	b1b0      	cbz	r0, 800a4c2 <_vfiprintf_r+0x156>
 800a494:	9207      	str	r2, [sp, #28]
 800a496:	e014      	b.n	800a4c2 <_vfiprintf_r+0x156>
 800a498:	eba0 0308 	sub.w	r3, r0, r8
 800a49c:	fa09 f303 	lsl.w	r3, r9, r3
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	46a2      	mov	sl, r4
 800a4a6:	e7d2      	b.n	800a44e <_vfiprintf_r+0xe2>
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	1d19      	adds	r1, r3, #4
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	9103      	str	r1, [sp, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bfbb      	ittet	lt
 800a4b4:	425b      	neglt	r3, r3
 800a4b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ba:	9307      	strge	r3, [sp, #28]
 800a4bc:	9307      	strlt	r3, [sp, #28]
 800a4be:	bfb8      	it	lt
 800a4c0:	9204      	strlt	r2, [sp, #16]
 800a4c2:	7823      	ldrb	r3, [r4, #0]
 800a4c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a4c6:	d10c      	bne.n	800a4e2 <_vfiprintf_r+0x176>
 800a4c8:	7863      	ldrb	r3, [r4, #1]
 800a4ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a4cc:	d135      	bne.n	800a53a <_vfiprintf_r+0x1ce>
 800a4ce:	9b03      	ldr	r3, [sp, #12]
 800a4d0:	1d1a      	adds	r2, r3, #4
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	9203      	str	r2, [sp, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bfb8      	it	lt
 800a4da:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4de:	3402      	adds	r4, #2
 800a4e0:	9305      	str	r3, [sp, #20]
 800a4e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5c8 <_vfiprintf_r+0x25c>
 800a4e6:	7821      	ldrb	r1, [r4, #0]
 800a4e8:	2203      	movs	r2, #3
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	f7f5 fe78 	bl	80001e0 <memchr>
 800a4f0:	b140      	cbz	r0, 800a504 <_vfiprintf_r+0x198>
 800a4f2:	2340      	movs	r3, #64	; 0x40
 800a4f4:	eba0 000a 	sub.w	r0, r0, sl
 800a4f8:	fa03 f000 	lsl.w	r0, r3, r0
 800a4fc:	9b04      	ldr	r3, [sp, #16]
 800a4fe:	4303      	orrs	r3, r0
 800a500:	3401      	adds	r4, #1
 800a502:	9304      	str	r3, [sp, #16]
 800a504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a508:	482c      	ldr	r0, [pc, #176]	; (800a5bc <_vfiprintf_r+0x250>)
 800a50a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a50e:	2206      	movs	r2, #6
 800a510:	f7f5 fe66 	bl	80001e0 <memchr>
 800a514:	2800      	cmp	r0, #0
 800a516:	d03f      	beq.n	800a598 <_vfiprintf_r+0x22c>
 800a518:	4b29      	ldr	r3, [pc, #164]	; (800a5c0 <_vfiprintf_r+0x254>)
 800a51a:	bb1b      	cbnz	r3, 800a564 <_vfiprintf_r+0x1f8>
 800a51c:	9b03      	ldr	r3, [sp, #12]
 800a51e:	3307      	adds	r3, #7
 800a520:	f023 0307 	bic.w	r3, r3, #7
 800a524:	3308      	adds	r3, #8
 800a526:	9303      	str	r3, [sp, #12]
 800a528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a52a:	443b      	add	r3, r7
 800a52c:	9309      	str	r3, [sp, #36]	; 0x24
 800a52e:	e767      	b.n	800a400 <_vfiprintf_r+0x94>
 800a530:	fb0c 3202 	mla	r2, ip, r2, r3
 800a534:	460c      	mov	r4, r1
 800a536:	2001      	movs	r0, #1
 800a538:	e7a5      	b.n	800a486 <_vfiprintf_r+0x11a>
 800a53a:	2300      	movs	r3, #0
 800a53c:	3401      	adds	r4, #1
 800a53e:	9305      	str	r3, [sp, #20]
 800a540:	4619      	mov	r1, r3
 800a542:	f04f 0c0a 	mov.w	ip, #10
 800a546:	4620      	mov	r0, r4
 800a548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a54c:	3a30      	subs	r2, #48	; 0x30
 800a54e:	2a09      	cmp	r2, #9
 800a550:	d903      	bls.n	800a55a <_vfiprintf_r+0x1ee>
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0c5      	beq.n	800a4e2 <_vfiprintf_r+0x176>
 800a556:	9105      	str	r1, [sp, #20]
 800a558:	e7c3      	b.n	800a4e2 <_vfiprintf_r+0x176>
 800a55a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a55e:	4604      	mov	r4, r0
 800a560:	2301      	movs	r3, #1
 800a562:	e7f0      	b.n	800a546 <_vfiprintf_r+0x1da>
 800a564:	ab03      	add	r3, sp, #12
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	462a      	mov	r2, r5
 800a56a:	4b16      	ldr	r3, [pc, #88]	; (800a5c4 <_vfiprintf_r+0x258>)
 800a56c:	a904      	add	r1, sp, #16
 800a56e:	4630      	mov	r0, r6
 800a570:	f7fd fdce 	bl	8008110 <_printf_float>
 800a574:	4607      	mov	r7, r0
 800a576:	1c78      	adds	r0, r7, #1
 800a578:	d1d6      	bne.n	800a528 <_vfiprintf_r+0x1bc>
 800a57a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a57c:	07d9      	lsls	r1, r3, #31
 800a57e:	d405      	bmi.n	800a58c <_vfiprintf_r+0x220>
 800a580:	89ab      	ldrh	r3, [r5, #12]
 800a582:	059a      	lsls	r2, r3, #22
 800a584:	d402      	bmi.n	800a58c <_vfiprintf_r+0x220>
 800a586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a588:	f000 faaf 	bl	800aaea <__retarget_lock_release_recursive>
 800a58c:	89ab      	ldrh	r3, [r5, #12]
 800a58e:	065b      	lsls	r3, r3, #25
 800a590:	f53f af12 	bmi.w	800a3b8 <_vfiprintf_r+0x4c>
 800a594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a596:	e711      	b.n	800a3bc <_vfiprintf_r+0x50>
 800a598:	ab03      	add	r3, sp, #12
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	462a      	mov	r2, r5
 800a59e:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <_vfiprintf_r+0x258>)
 800a5a0:	a904      	add	r1, sp, #16
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7fe f858 	bl	8008658 <_printf_i>
 800a5a8:	e7e4      	b.n	800a574 <_vfiprintf_r+0x208>
 800a5aa:	bf00      	nop
 800a5ac:	0800c264 	.word	0x0800c264
 800a5b0:	0800c284 	.word	0x0800c284
 800a5b4:	0800c244 	.word	0x0800c244
 800a5b8:	0800c0ec 	.word	0x0800c0ec
 800a5bc:	0800c0f6 	.word	0x0800c0f6
 800a5c0:	08008111 	.word	0x08008111
 800a5c4:	0800a349 	.word	0x0800a349
 800a5c8:	0800c0f2 	.word	0x0800c0f2

0800a5cc <__swbuf_r>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	460e      	mov	r6, r1
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	b118      	cbz	r0, 800a5de <__swbuf_r+0x12>
 800a5d6:	6983      	ldr	r3, [r0, #24]
 800a5d8:	b90b      	cbnz	r3, 800a5de <__swbuf_r+0x12>
 800a5da:	f000 f9e7 	bl	800a9ac <__sinit>
 800a5de:	4b21      	ldr	r3, [pc, #132]	; (800a664 <__swbuf_r+0x98>)
 800a5e0:	429c      	cmp	r4, r3
 800a5e2:	d12b      	bne.n	800a63c <__swbuf_r+0x70>
 800a5e4:	686c      	ldr	r4, [r5, #4]
 800a5e6:	69a3      	ldr	r3, [r4, #24]
 800a5e8:	60a3      	str	r3, [r4, #8]
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	071a      	lsls	r2, r3, #28
 800a5ee:	d52f      	bpl.n	800a650 <__swbuf_r+0x84>
 800a5f0:	6923      	ldr	r3, [r4, #16]
 800a5f2:	b36b      	cbz	r3, 800a650 <__swbuf_r+0x84>
 800a5f4:	6923      	ldr	r3, [r4, #16]
 800a5f6:	6820      	ldr	r0, [r4, #0]
 800a5f8:	1ac0      	subs	r0, r0, r3
 800a5fa:	6963      	ldr	r3, [r4, #20]
 800a5fc:	b2f6      	uxtb	r6, r6
 800a5fe:	4283      	cmp	r3, r0
 800a600:	4637      	mov	r7, r6
 800a602:	dc04      	bgt.n	800a60e <__swbuf_r+0x42>
 800a604:	4621      	mov	r1, r4
 800a606:	4628      	mov	r0, r5
 800a608:	f000 f93c 	bl	800a884 <_fflush_r>
 800a60c:	bb30      	cbnz	r0, 800a65c <__swbuf_r+0x90>
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	3b01      	subs	r3, #1
 800a612:	60a3      	str	r3, [r4, #8]
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	6022      	str	r2, [r4, #0]
 800a61a:	701e      	strb	r6, [r3, #0]
 800a61c:	6963      	ldr	r3, [r4, #20]
 800a61e:	3001      	adds	r0, #1
 800a620:	4283      	cmp	r3, r0
 800a622:	d004      	beq.n	800a62e <__swbuf_r+0x62>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	07db      	lsls	r3, r3, #31
 800a628:	d506      	bpl.n	800a638 <__swbuf_r+0x6c>
 800a62a:	2e0a      	cmp	r6, #10
 800a62c:	d104      	bne.n	800a638 <__swbuf_r+0x6c>
 800a62e:	4621      	mov	r1, r4
 800a630:	4628      	mov	r0, r5
 800a632:	f000 f927 	bl	800a884 <_fflush_r>
 800a636:	b988      	cbnz	r0, 800a65c <__swbuf_r+0x90>
 800a638:	4638      	mov	r0, r7
 800a63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a63c:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <__swbuf_r+0x9c>)
 800a63e:	429c      	cmp	r4, r3
 800a640:	d101      	bne.n	800a646 <__swbuf_r+0x7a>
 800a642:	68ac      	ldr	r4, [r5, #8]
 800a644:	e7cf      	b.n	800a5e6 <__swbuf_r+0x1a>
 800a646:	4b09      	ldr	r3, [pc, #36]	; (800a66c <__swbuf_r+0xa0>)
 800a648:	429c      	cmp	r4, r3
 800a64a:	bf08      	it	eq
 800a64c:	68ec      	ldreq	r4, [r5, #12]
 800a64e:	e7ca      	b.n	800a5e6 <__swbuf_r+0x1a>
 800a650:	4621      	mov	r1, r4
 800a652:	4628      	mov	r0, r5
 800a654:	f000 f81a 	bl	800a68c <__swsetup_r>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d0cb      	beq.n	800a5f4 <__swbuf_r+0x28>
 800a65c:	f04f 37ff 	mov.w	r7, #4294967295
 800a660:	e7ea      	b.n	800a638 <__swbuf_r+0x6c>
 800a662:	bf00      	nop
 800a664:	0800c264 	.word	0x0800c264
 800a668:	0800c284 	.word	0x0800c284
 800a66c:	0800c244 	.word	0x0800c244

0800a670 <__ascii_wctomb>:
 800a670:	b149      	cbz	r1, 800a686 <__ascii_wctomb+0x16>
 800a672:	2aff      	cmp	r2, #255	; 0xff
 800a674:	bf85      	ittet	hi
 800a676:	238a      	movhi	r3, #138	; 0x8a
 800a678:	6003      	strhi	r3, [r0, #0]
 800a67a:	700a      	strbls	r2, [r1, #0]
 800a67c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a680:	bf98      	it	ls
 800a682:	2001      	movls	r0, #1
 800a684:	4770      	bx	lr
 800a686:	4608      	mov	r0, r1
 800a688:	4770      	bx	lr
	...

0800a68c <__swsetup_r>:
 800a68c:	4b32      	ldr	r3, [pc, #200]	; (800a758 <__swsetup_r+0xcc>)
 800a68e:	b570      	push	{r4, r5, r6, lr}
 800a690:	681d      	ldr	r5, [r3, #0]
 800a692:	4606      	mov	r6, r0
 800a694:	460c      	mov	r4, r1
 800a696:	b125      	cbz	r5, 800a6a2 <__swsetup_r+0x16>
 800a698:	69ab      	ldr	r3, [r5, #24]
 800a69a:	b913      	cbnz	r3, 800a6a2 <__swsetup_r+0x16>
 800a69c:	4628      	mov	r0, r5
 800a69e:	f000 f985 	bl	800a9ac <__sinit>
 800a6a2:	4b2e      	ldr	r3, [pc, #184]	; (800a75c <__swsetup_r+0xd0>)
 800a6a4:	429c      	cmp	r4, r3
 800a6a6:	d10f      	bne.n	800a6c8 <__swsetup_r+0x3c>
 800a6a8:	686c      	ldr	r4, [r5, #4]
 800a6aa:	89a3      	ldrh	r3, [r4, #12]
 800a6ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6b0:	0719      	lsls	r1, r3, #28
 800a6b2:	d42c      	bmi.n	800a70e <__swsetup_r+0x82>
 800a6b4:	06dd      	lsls	r5, r3, #27
 800a6b6:	d411      	bmi.n	800a6dc <__swsetup_r+0x50>
 800a6b8:	2309      	movs	r3, #9
 800a6ba:	6033      	str	r3, [r6, #0]
 800a6bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c6:	e03e      	b.n	800a746 <__swsetup_r+0xba>
 800a6c8:	4b25      	ldr	r3, [pc, #148]	; (800a760 <__swsetup_r+0xd4>)
 800a6ca:	429c      	cmp	r4, r3
 800a6cc:	d101      	bne.n	800a6d2 <__swsetup_r+0x46>
 800a6ce:	68ac      	ldr	r4, [r5, #8]
 800a6d0:	e7eb      	b.n	800a6aa <__swsetup_r+0x1e>
 800a6d2:	4b24      	ldr	r3, [pc, #144]	; (800a764 <__swsetup_r+0xd8>)
 800a6d4:	429c      	cmp	r4, r3
 800a6d6:	bf08      	it	eq
 800a6d8:	68ec      	ldreq	r4, [r5, #12]
 800a6da:	e7e6      	b.n	800a6aa <__swsetup_r+0x1e>
 800a6dc:	0758      	lsls	r0, r3, #29
 800a6de:	d512      	bpl.n	800a706 <__swsetup_r+0x7a>
 800a6e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6e2:	b141      	cbz	r1, 800a6f6 <__swsetup_r+0x6a>
 800a6e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e8:	4299      	cmp	r1, r3
 800a6ea:	d002      	beq.n	800a6f2 <__swsetup_r+0x66>
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff fb31 	bl	8009d54 <_free_r>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	2300      	movs	r3, #0
 800a700:	6063      	str	r3, [r4, #4]
 800a702:	6923      	ldr	r3, [r4, #16]
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	f043 0308 	orr.w	r3, r3, #8
 800a70c:	81a3      	strh	r3, [r4, #12]
 800a70e:	6923      	ldr	r3, [r4, #16]
 800a710:	b94b      	cbnz	r3, 800a726 <__swsetup_r+0x9a>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a71c:	d003      	beq.n	800a726 <__swsetup_r+0x9a>
 800a71e:	4621      	mov	r1, r4
 800a720:	4630      	mov	r0, r6
 800a722:	f000 fa09 	bl	800ab38 <__smakebuf_r>
 800a726:	89a0      	ldrh	r0, [r4, #12]
 800a728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a72c:	f010 0301 	ands.w	r3, r0, #1
 800a730:	d00a      	beq.n	800a748 <__swsetup_r+0xbc>
 800a732:	2300      	movs	r3, #0
 800a734:	60a3      	str	r3, [r4, #8]
 800a736:	6963      	ldr	r3, [r4, #20]
 800a738:	425b      	negs	r3, r3
 800a73a:	61a3      	str	r3, [r4, #24]
 800a73c:	6923      	ldr	r3, [r4, #16]
 800a73e:	b943      	cbnz	r3, 800a752 <__swsetup_r+0xc6>
 800a740:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a744:	d1ba      	bne.n	800a6bc <__swsetup_r+0x30>
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	0781      	lsls	r1, r0, #30
 800a74a:	bf58      	it	pl
 800a74c:	6963      	ldrpl	r3, [r4, #20]
 800a74e:	60a3      	str	r3, [r4, #8]
 800a750:	e7f4      	b.n	800a73c <__swsetup_r+0xb0>
 800a752:	2000      	movs	r0, #0
 800a754:	e7f7      	b.n	800a746 <__swsetup_r+0xba>
 800a756:	bf00      	nop
 800a758:	20000028 	.word	0x20000028
 800a75c:	0800c264 	.word	0x0800c264
 800a760:	0800c284 	.word	0x0800c284
 800a764:	0800c244 	.word	0x0800c244

0800a768 <abort>:
 800a768:	b508      	push	{r3, lr}
 800a76a:	2006      	movs	r0, #6
 800a76c:	f000 fa54 	bl	800ac18 <raise>
 800a770:	2001      	movs	r0, #1
 800a772:	f7f8 ff2d 	bl	80035d0 <_exit>
	...

0800a778 <__sflush_r>:
 800a778:	898a      	ldrh	r2, [r1, #12]
 800a77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a77e:	4605      	mov	r5, r0
 800a780:	0710      	lsls	r0, r2, #28
 800a782:	460c      	mov	r4, r1
 800a784:	d458      	bmi.n	800a838 <__sflush_r+0xc0>
 800a786:	684b      	ldr	r3, [r1, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dc05      	bgt.n	800a798 <__sflush_r+0x20>
 800a78c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a78e:	2b00      	cmp	r3, #0
 800a790:	dc02      	bgt.n	800a798 <__sflush_r+0x20>
 800a792:	2000      	movs	r0, #0
 800a794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a79a:	2e00      	cmp	r6, #0
 800a79c:	d0f9      	beq.n	800a792 <__sflush_r+0x1a>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7a4:	682f      	ldr	r7, [r5, #0]
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	d032      	beq.n	800a810 <__sflush_r+0x98>
 800a7aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	075a      	lsls	r2, r3, #29
 800a7b0:	d505      	bpl.n	800a7be <__sflush_r+0x46>
 800a7b2:	6863      	ldr	r3, [r4, #4]
 800a7b4:	1ac0      	subs	r0, r0, r3
 800a7b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7b8:	b10b      	cbz	r3, 800a7be <__sflush_r+0x46>
 800a7ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7bc:	1ac0      	subs	r0, r0, r3
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7c4:	6a21      	ldr	r1, [r4, #32]
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	47b0      	blx	r6
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	d106      	bne.n	800a7de <__sflush_r+0x66>
 800a7d0:	6829      	ldr	r1, [r5, #0]
 800a7d2:	291d      	cmp	r1, #29
 800a7d4:	d82c      	bhi.n	800a830 <__sflush_r+0xb8>
 800a7d6:	4a2a      	ldr	r2, [pc, #168]	; (800a880 <__sflush_r+0x108>)
 800a7d8:	40ca      	lsrs	r2, r1
 800a7da:	07d6      	lsls	r6, r2, #31
 800a7dc:	d528      	bpl.n	800a830 <__sflush_r+0xb8>
 800a7de:	2200      	movs	r2, #0
 800a7e0:	6062      	str	r2, [r4, #4]
 800a7e2:	04d9      	lsls	r1, r3, #19
 800a7e4:	6922      	ldr	r2, [r4, #16]
 800a7e6:	6022      	str	r2, [r4, #0]
 800a7e8:	d504      	bpl.n	800a7f4 <__sflush_r+0x7c>
 800a7ea:	1c42      	adds	r2, r0, #1
 800a7ec:	d101      	bne.n	800a7f2 <__sflush_r+0x7a>
 800a7ee:	682b      	ldr	r3, [r5, #0]
 800a7f0:	b903      	cbnz	r3, 800a7f4 <__sflush_r+0x7c>
 800a7f2:	6560      	str	r0, [r4, #84]	; 0x54
 800a7f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7f6:	602f      	str	r7, [r5, #0]
 800a7f8:	2900      	cmp	r1, #0
 800a7fa:	d0ca      	beq.n	800a792 <__sflush_r+0x1a>
 800a7fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a800:	4299      	cmp	r1, r3
 800a802:	d002      	beq.n	800a80a <__sflush_r+0x92>
 800a804:	4628      	mov	r0, r5
 800a806:	f7ff faa5 	bl	8009d54 <_free_r>
 800a80a:	2000      	movs	r0, #0
 800a80c:	6360      	str	r0, [r4, #52]	; 0x34
 800a80e:	e7c1      	b.n	800a794 <__sflush_r+0x1c>
 800a810:	6a21      	ldr	r1, [r4, #32]
 800a812:	2301      	movs	r3, #1
 800a814:	4628      	mov	r0, r5
 800a816:	47b0      	blx	r6
 800a818:	1c41      	adds	r1, r0, #1
 800a81a:	d1c7      	bne.n	800a7ac <__sflush_r+0x34>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d0c4      	beq.n	800a7ac <__sflush_r+0x34>
 800a822:	2b1d      	cmp	r3, #29
 800a824:	d001      	beq.n	800a82a <__sflush_r+0xb2>
 800a826:	2b16      	cmp	r3, #22
 800a828:	d101      	bne.n	800a82e <__sflush_r+0xb6>
 800a82a:	602f      	str	r7, [r5, #0]
 800a82c:	e7b1      	b.n	800a792 <__sflush_r+0x1a>
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a834:	81a3      	strh	r3, [r4, #12]
 800a836:	e7ad      	b.n	800a794 <__sflush_r+0x1c>
 800a838:	690f      	ldr	r7, [r1, #16]
 800a83a:	2f00      	cmp	r7, #0
 800a83c:	d0a9      	beq.n	800a792 <__sflush_r+0x1a>
 800a83e:	0793      	lsls	r3, r2, #30
 800a840:	680e      	ldr	r6, [r1, #0]
 800a842:	bf08      	it	eq
 800a844:	694b      	ldreq	r3, [r1, #20]
 800a846:	600f      	str	r7, [r1, #0]
 800a848:	bf18      	it	ne
 800a84a:	2300      	movne	r3, #0
 800a84c:	eba6 0807 	sub.w	r8, r6, r7
 800a850:	608b      	str	r3, [r1, #8]
 800a852:	f1b8 0f00 	cmp.w	r8, #0
 800a856:	dd9c      	ble.n	800a792 <__sflush_r+0x1a>
 800a858:	6a21      	ldr	r1, [r4, #32]
 800a85a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a85c:	4643      	mov	r3, r8
 800a85e:	463a      	mov	r2, r7
 800a860:	4628      	mov	r0, r5
 800a862:	47b0      	blx	r6
 800a864:	2800      	cmp	r0, #0
 800a866:	dc06      	bgt.n	800a876 <__sflush_r+0xfe>
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	e78e      	b.n	800a794 <__sflush_r+0x1c>
 800a876:	4407      	add	r7, r0
 800a878:	eba8 0800 	sub.w	r8, r8, r0
 800a87c:	e7e9      	b.n	800a852 <__sflush_r+0xda>
 800a87e:	bf00      	nop
 800a880:	20400001 	.word	0x20400001

0800a884 <_fflush_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	690b      	ldr	r3, [r1, #16]
 800a888:	4605      	mov	r5, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	b913      	cbnz	r3, 800a894 <_fflush_r+0x10>
 800a88e:	2500      	movs	r5, #0
 800a890:	4628      	mov	r0, r5
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	b118      	cbz	r0, 800a89e <_fflush_r+0x1a>
 800a896:	6983      	ldr	r3, [r0, #24]
 800a898:	b90b      	cbnz	r3, 800a89e <_fflush_r+0x1a>
 800a89a:	f000 f887 	bl	800a9ac <__sinit>
 800a89e:	4b14      	ldr	r3, [pc, #80]	; (800a8f0 <_fflush_r+0x6c>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	d11b      	bne.n	800a8dc <_fflush_r+0x58>
 800a8a4:	686c      	ldr	r4, [r5, #4]
 800a8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0ef      	beq.n	800a88e <_fflush_r+0xa>
 800a8ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8b0:	07d0      	lsls	r0, r2, #31
 800a8b2:	d404      	bmi.n	800a8be <_fflush_r+0x3a>
 800a8b4:	0599      	lsls	r1, r3, #22
 800a8b6:	d402      	bmi.n	800a8be <_fflush_r+0x3a>
 800a8b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ba:	f000 f915 	bl	800aae8 <__retarget_lock_acquire_recursive>
 800a8be:	4628      	mov	r0, r5
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	f7ff ff59 	bl	800a778 <__sflush_r>
 800a8c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8c8:	07da      	lsls	r2, r3, #31
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	d4e0      	bmi.n	800a890 <_fflush_r+0xc>
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	059b      	lsls	r3, r3, #22
 800a8d2:	d4dd      	bmi.n	800a890 <_fflush_r+0xc>
 800a8d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8d6:	f000 f908 	bl	800aaea <__retarget_lock_release_recursive>
 800a8da:	e7d9      	b.n	800a890 <_fflush_r+0xc>
 800a8dc:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <_fflush_r+0x70>)
 800a8de:	429c      	cmp	r4, r3
 800a8e0:	d101      	bne.n	800a8e6 <_fflush_r+0x62>
 800a8e2:	68ac      	ldr	r4, [r5, #8]
 800a8e4:	e7df      	b.n	800a8a6 <_fflush_r+0x22>
 800a8e6:	4b04      	ldr	r3, [pc, #16]	; (800a8f8 <_fflush_r+0x74>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	bf08      	it	eq
 800a8ec:	68ec      	ldreq	r4, [r5, #12]
 800a8ee:	e7da      	b.n	800a8a6 <_fflush_r+0x22>
 800a8f0:	0800c264 	.word	0x0800c264
 800a8f4:	0800c284 	.word	0x0800c284
 800a8f8:	0800c244 	.word	0x0800c244

0800a8fc <std>:
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	b510      	push	{r4, lr}
 800a900:	4604      	mov	r4, r0
 800a902:	e9c0 3300 	strd	r3, r3, [r0]
 800a906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a90a:	6083      	str	r3, [r0, #8]
 800a90c:	8181      	strh	r1, [r0, #12]
 800a90e:	6643      	str	r3, [r0, #100]	; 0x64
 800a910:	81c2      	strh	r2, [r0, #14]
 800a912:	6183      	str	r3, [r0, #24]
 800a914:	4619      	mov	r1, r3
 800a916:	2208      	movs	r2, #8
 800a918:	305c      	adds	r0, #92	; 0x5c
 800a91a:	f7fd fb51 	bl	8007fc0 <memset>
 800a91e:	4b05      	ldr	r3, [pc, #20]	; (800a934 <std+0x38>)
 800a920:	6263      	str	r3, [r4, #36]	; 0x24
 800a922:	4b05      	ldr	r3, [pc, #20]	; (800a938 <std+0x3c>)
 800a924:	62a3      	str	r3, [r4, #40]	; 0x28
 800a926:	4b05      	ldr	r3, [pc, #20]	; (800a93c <std+0x40>)
 800a928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a92a:	4b05      	ldr	r3, [pc, #20]	; (800a940 <std+0x44>)
 800a92c:	6224      	str	r4, [r4, #32]
 800a92e:	6323      	str	r3, [r4, #48]	; 0x30
 800a930:	bd10      	pop	{r4, pc}
 800a932:	bf00      	nop
 800a934:	0800ac51 	.word	0x0800ac51
 800a938:	0800ac73 	.word	0x0800ac73
 800a93c:	0800acab 	.word	0x0800acab
 800a940:	0800accf 	.word	0x0800accf

0800a944 <_cleanup_r>:
 800a944:	4901      	ldr	r1, [pc, #4]	; (800a94c <_cleanup_r+0x8>)
 800a946:	f000 b8af 	b.w	800aaa8 <_fwalk_reent>
 800a94a:	bf00      	nop
 800a94c:	0800a885 	.word	0x0800a885

0800a950 <__sfmoreglue>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	2268      	movs	r2, #104	; 0x68
 800a954:	1e4d      	subs	r5, r1, #1
 800a956:	4355      	muls	r5, r2
 800a958:	460e      	mov	r6, r1
 800a95a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a95e:	f7ff fa65 	bl	8009e2c <_malloc_r>
 800a962:	4604      	mov	r4, r0
 800a964:	b140      	cbz	r0, 800a978 <__sfmoreglue+0x28>
 800a966:	2100      	movs	r1, #0
 800a968:	e9c0 1600 	strd	r1, r6, [r0]
 800a96c:	300c      	adds	r0, #12
 800a96e:	60a0      	str	r0, [r4, #8]
 800a970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a974:	f7fd fb24 	bl	8007fc0 <memset>
 800a978:	4620      	mov	r0, r4
 800a97a:	bd70      	pop	{r4, r5, r6, pc}

0800a97c <__sfp_lock_acquire>:
 800a97c:	4801      	ldr	r0, [pc, #4]	; (800a984 <__sfp_lock_acquire+0x8>)
 800a97e:	f000 b8b3 	b.w	800aae8 <__retarget_lock_acquire_recursive>
 800a982:	bf00      	nop
 800a984:	20000afd 	.word	0x20000afd

0800a988 <__sfp_lock_release>:
 800a988:	4801      	ldr	r0, [pc, #4]	; (800a990 <__sfp_lock_release+0x8>)
 800a98a:	f000 b8ae 	b.w	800aaea <__retarget_lock_release_recursive>
 800a98e:	bf00      	nop
 800a990:	20000afd 	.word	0x20000afd

0800a994 <__sinit_lock_acquire>:
 800a994:	4801      	ldr	r0, [pc, #4]	; (800a99c <__sinit_lock_acquire+0x8>)
 800a996:	f000 b8a7 	b.w	800aae8 <__retarget_lock_acquire_recursive>
 800a99a:	bf00      	nop
 800a99c:	20000afe 	.word	0x20000afe

0800a9a0 <__sinit_lock_release>:
 800a9a0:	4801      	ldr	r0, [pc, #4]	; (800a9a8 <__sinit_lock_release+0x8>)
 800a9a2:	f000 b8a2 	b.w	800aaea <__retarget_lock_release_recursive>
 800a9a6:	bf00      	nop
 800a9a8:	20000afe 	.word	0x20000afe

0800a9ac <__sinit>:
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	f7ff fff0 	bl	800a994 <__sinit_lock_acquire>
 800a9b4:	69a3      	ldr	r3, [r4, #24]
 800a9b6:	b11b      	cbz	r3, 800a9c0 <__sinit+0x14>
 800a9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9bc:	f7ff bff0 	b.w	800a9a0 <__sinit_lock_release>
 800a9c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a9c6:	4b13      	ldr	r3, [pc, #76]	; (800aa14 <__sinit+0x68>)
 800a9c8:	4a13      	ldr	r2, [pc, #76]	; (800aa18 <__sinit+0x6c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9ce:	42a3      	cmp	r3, r4
 800a9d0:	bf04      	itt	eq
 800a9d2:	2301      	moveq	r3, #1
 800a9d4:	61a3      	streq	r3, [r4, #24]
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 f820 	bl	800aa1c <__sfp>
 800a9dc:	6060      	str	r0, [r4, #4]
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 f81c 	bl	800aa1c <__sfp>
 800a9e4:	60a0      	str	r0, [r4, #8]
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 f818 	bl	800aa1c <__sfp>
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	60e0      	str	r0, [r4, #12]
 800a9f0:	2104      	movs	r1, #4
 800a9f2:	6860      	ldr	r0, [r4, #4]
 800a9f4:	f7ff ff82 	bl	800a8fc <std>
 800a9f8:	68a0      	ldr	r0, [r4, #8]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	2109      	movs	r1, #9
 800a9fe:	f7ff ff7d 	bl	800a8fc <std>
 800aa02:	68e0      	ldr	r0, [r4, #12]
 800aa04:	2202      	movs	r2, #2
 800aa06:	2112      	movs	r1, #18
 800aa08:	f7ff ff78 	bl	800a8fc <std>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	61a3      	str	r3, [r4, #24]
 800aa10:	e7d2      	b.n	800a9b8 <__sinit+0xc>
 800aa12:	bf00      	nop
 800aa14:	0800bec8 	.word	0x0800bec8
 800aa18:	0800a945 	.word	0x0800a945

0800aa1c <__sfp>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	4607      	mov	r7, r0
 800aa20:	f7ff ffac 	bl	800a97c <__sfp_lock_acquire>
 800aa24:	4b1e      	ldr	r3, [pc, #120]	; (800aaa0 <__sfp+0x84>)
 800aa26:	681e      	ldr	r6, [r3, #0]
 800aa28:	69b3      	ldr	r3, [r6, #24]
 800aa2a:	b913      	cbnz	r3, 800aa32 <__sfp+0x16>
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f7ff ffbd 	bl	800a9ac <__sinit>
 800aa32:	3648      	adds	r6, #72	; 0x48
 800aa34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	d503      	bpl.n	800aa44 <__sfp+0x28>
 800aa3c:	6833      	ldr	r3, [r6, #0]
 800aa3e:	b30b      	cbz	r3, 800aa84 <__sfp+0x68>
 800aa40:	6836      	ldr	r6, [r6, #0]
 800aa42:	e7f7      	b.n	800aa34 <__sfp+0x18>
 800aa44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa48:	b9d5      	cbnz	r5, 800aa80 <__sfp+0x64>
 800aa4a:	4b16      	ldr	r3, [pc, #88]	; (800aaa4 <__sfp+0x88>)
 800aa4c:	60e3      	str	r3, [r4, #12]
 800aa4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa52:	6665      	str	r5, [r4, #100]	; 0x64
 800aa54:	f000 f847 	bl	800aae6 <__retarget_lock_init_recursive>
 800aa58:	f7ff ff96 	bl	800a988 <__sfp_lock_release>
 800aa5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa64:	6025      	str	r5, [r4, #0]
 800aa66:	61a5      	str	r5, [r4, #24]
 800aa68:	2208      	movs	r2, #8
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa70:	f7fd faa6 	bl	8007fc0 <memset>
 800aa74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa80:	3468      	adds	r4, #104	; 0x68
 800aa82:	e7d9      	b.n	800aa38 <__sfp+0x1c>
 800aa84:	2104      	movs	r1, #4
 800aa86:	4638      	mov	r0, r7
 800aa88:	f7ff ff62 	bl	800a950 <__sfmoreglue>
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	6030      	str	r0, [r6, #0]
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d1d5      	bne.n	800aa40 <__sfp+0x24>
 800aa94:	f7ff ff78 	bl	800a988 <__sfp_lock_release>
 800aa98:	230c      	movs	r3, #12
 800aa9a:	603b      	str	r3, [r7, #0]
 800aa9c:	e7ee      	b.n	800aa7c <__sfp+0x60>
 800aa9e:	bf00      	nop
 800aaa0:	0800bec8 	.word	0x0800bec8
 800aaa4:	ffff0001 	.word	0xffff0001

0800aaa8 <_fwalk_reent>:
 800aaa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaac:	4606      	mov	r6, r0
 800aaae:	4688      	mov	r8, r1
 800aab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aab4:	2700      	movs	r7, #0
 800aab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaba:	f1b9 0901 	subs.w	r9, r9, #1
 800aabe:	d505      	bpl.n	800aacc <_fwalk_reent+0x24>
 800aac0:	6824      	ldr	r4, [r4, #0]
 800aac2:	2c00      	cmp	r4, #0
 800aac4:	d1f7      	bne.n	800aab6 <_fwalk_reent+0xe>
 800aac6:	4638      	mov	r0, r7
 800aac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aacc:	89ab      	ldrh	r3, [r5, #12]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d907      	bls.n	800aae2 <_fwalk_reent+0x3a>
 800aad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aad6:	3301      	adds	r3, #1
 800aad8:	d003      	beq.n	800aae2 <_fwalk_reent+0x3a>
 800aada:	4629      	mov	r1, r5
 800aadc:	4630      	mov	r0, r6
 800aade:	47c0      	blx	r8
 800aae0:	4307      	orrs	r7, r0
 800aae2:	3568      	adds	r5, #104	; 0x68
 800aae4:	e7e9      	b.n	800aaba <_fwalk_reent+0x12>

0800aae6 <__retarget_lock_init_recursive>:
 800aae6:	4770      	bx	lr

0800aae8 <__retarget_lock_acquire_recursive>:
 800aae8:	4770      	bx	lr

0800aaea <__retarget_lock_release_recursive>:
 800aaea:	4770      	bx	lr

0800aaec <__swhatbuf_r>:
 800aaec:	b570      	push	{r4, r5, r6, lr}
 800aaee:	460e      	mov	r6, r1
 800aaf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf4:	2900      	cmp	r1, #0
 800aaf6:	b096      	sub	sp, #88	; 0x58
 800aaf8:	4614      	mov	r4, r2
 800aafa:	461d      	mov	r5, r3
 800aafc:	da08      	bge.n	800ab10 <__swhatbuf_r+0x24>
 800aafe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	602a      	str	r2, [r5, #0]
 800ab06:	061a      	lsls	r2, r3, #24
 800ab08:	d410      	bmi.n	800ab2c <__swhatbuf_r+0x40>
 800ab0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab0e:	e00e      	b.n	800ab2e <__swhatbuf_r+0x42>
 800ab10:	466a      	mov	r2, sp
 800ab12:	f000 f903 	bl	800ad1c <_fstat_r>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	dbf1      	blt.n	800aafe <__swhatbuf_r+0x12>
 800ab1a:	9a01      	ldr	r2, [sp, #4]
 800ab1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab24:	425a      	negs	r2, r3
 800ab26:	415a      	adcs	r2, r3
 800ab28:	602a      	str	r2, [r5, #0]
 800ab2a:	e7ee      	b.n	800ab0a <__swhatbuf_r+0x1e>
 800ab2c:	2340      	movs	r3, #64	; 0x40
 800ab2e:	2000      	movs	r0, #0
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	b016      	add	sp, #88	; 0x58
 800ab34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab38 <__smakebuf_r>:
 800ab38:	898b      	ldrh	r3, [r1, #12]
 800ab3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab3c:	079d      	lsls	r5, r3, #30
 800ab3e:	4606      	mov	r6, r0
 800ab40:	460c      	mov	r4, r1
 800ab42:	d507      	bpl.n	800ab54 <__smakebuf_r+0x1c>
 800ab44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	6163      	str	r3, [r4, #20]
 800ab50:	b002      	add	sp, #8
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	ab01      	add	r3, sp, #4
 800ab56:	466a      	mov	r2, sp
 800ab58:	f7ff ffc8 	bl	800aaec <__swhatbuf_r>
 800ab5c:	9900      	ldr	r1, [sp, #0]
 800ab5e:	4605      	mov	r5, r0
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7ff f963 	bl	8009e2c <_malloc_r>
 800ab66:	b948      	cbnz	r0, 800ab7c <__smakebuf_r+0x44>
 800ab68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab6c:	059a      	lsls	r2, r3, #22
 800ab6e:	d4ef      	bmi.n	800ab50 <__smakebuf_r+0x18>
 800ab70:	f023 0303 	bic.w	r3, r3, #3
 800ab74:	f043 0302 	orr.w	r3, r3, #2
 800ab78:	81a3      	strh	r3, [r4, #12]
 800ab7a:	e7e3      	b.n	800ab44 <__smakebuf_r+0xc>
 800ab7c:	4b0d      	ldr	r3, [pc, #52]	; (800abb4 <__smakebuf_r+0x7c>)
 800ab7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	6020      	str	r0, [r4, #0]
 800ab84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	9b00      	ldr	r3, [sp, #0]
 800ab8c:	6163      	str	r3, [r4, #20]
 800ab8e:	9b01      	ldr	r3, [sp, #4]
 800ab90:	6120      	str	r0, [r4, #16]
 800ab92:	b15b      	cbz	r3, 800abac <__smakebuf_r+0x74>
 800ab94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f000 f8d1 	bl	800ad40 <_isatty_r>
 800ab9e:	b128      	cbz	r0, 800abac <__smakebuf_r+0x74>
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	f043 0301 	orr.w	r3, r3, #1
 800abaa:	81a3      	strh	r3, [r4, #12]
 800abac:	89a0      	ldrh	r0, [r4, #12]
 800abae:	4305      	orrs	r5, r0
 800abb0:	81a5      	strh	r5, [r4, #12]
 800abb2:	e7cd      	b.n	800ab50 <__smakebuf_r+0x18>
 800abb4:	0800a945 	.word	0x0800a945

0800abb8 <_malloc_usable_size_r>:
 800abb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abbc:	1f18      	subs	r0, r3, #4
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bfbc      	itt	lt
 800abc2:	580b      	ldrlt	r3, [r1, r0]
 800abc4:	18c0      	addlt	r0, r0, r3
 800abc6:	4770      	bx	lr

0800abc8 <_raise_r>:
 800abc8:	291f      	cmp	r1, #31
 800abca:	b538      	push	{r3, r4, r5, lr}
 800abcc:	4604      	mov	r4, r0
 800abce:	460d      	mov	r5, r1
 800abd0:	d904      	bls.n	800abdc <_raise_r+0x14>
 800abd2:	2316      	movs	r3, #22
 800abd4:	6003      	str	r3, [r0, #0]
 800abd6:	f04f 30ff 	mov.w	r0, #4294967295
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abde:	b112      	cbz	r2, 800abe6 <_raise_r+0x1e>
 800abe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abe4:	b94b      	cbnz	r3, 800abfa <_raise_r+0x32>
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 f830 	bl	800ac4c <_getpid_r>
 800abec:	462a      	mov	r2, r5
 800abee:	4601      	mov	r1, r0
 800abf0:	4620      	mov	r0, r4
 800abf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abf6:	f000 b817 	b.w	800ac28 <_kill_r>
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d00a      	beq.n	800ac14 <_raise_r+0x4c>
 800abfe:	1c59      	adds	r1, r3, #1
 800ac00:	d103      	bne.n	800ac0a <_raise_r+0x42>
 800ac02:	2316      	movs	r3, #22
 800ac04:	6003      	str	r3, [r0, #0]
 800ac06:	2001      	movs	r0, #1
 800ac08:	e7e7      	b.n	800abda <_raise_r+0x12>
 800ac0a:	2400      	movs	r4, #0
 800ac0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac10:	4628      	mov	r0, r5
 800ac12:	4798      	blx	r3
 800ac14:	2000      	movs	r0, #0
 800ac16:	e7e0      	b.n	800abda <_raise_r+0x12>

0800ac18 <raise>:
 800ac18:	4b02      	ldr	r3, [pc, #8]	; (800ac24 <raise+0xc>)
 800ac1a:	4601      	mov	r1, r0
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	f7ff bfd3 	b.w	800abc8 <_raise_r>
 800ac22:	bf00      	nop
 800ac24:	20000028 	.word	0x20000028

0800ac28 <_kill_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d07      	ldr	r5, [pc, #28]	; (800ac48 <_kill_r+0x20>)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	4611      	mov	r1, r2
 800ac34:	602b      	str	r3, [r5, #0]
 800ac36:	f7f8 fcbb 	bl	80035b0 <_kill>
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	d102      	bne.n	800ac44 <_kill_r+0x1c>
 800ac3e:	682b      	ldr	r3, [r5, #0]
 800ac40:	b103      	cbz	r3, 800ac44 <_kill_r+0x1c>
 800ac42:	6023      	str	r3, [r4, #0]
 800ac44:	bd38      	pop	{r3, r4, r5, pc}
 800ac46:	bf00      	nop
 800ac48:	20000af8 	.word	0x20000af8

0800ac4c <_getpid_r>:
 800ac4c:	f7f8 bca8 	b.w	80035a0 <_getpid>

0800ac50 <__sread>:
 800ac50:	b510      	push	{r4, lr}
 800ac52:	460c      	mov	r4, r1
 800ac54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac58:	f000 f894 	bl	800ad84 <_read_r>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	bfab      	itete	ge
 800ac60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac62:	89a3      	ldrhlt	r3, [r4, #12]
 800ac64:	181b      	addge	r3, r3, r0
 800ac66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac6a:	bfac      	ite	ge
 800ac6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac6e:	81a3      	strhlt	r3, [r4, #12]
 800ac70:	bd10      	pop	{r4, pc}

0800ac72 <__swrite>:
 800ac72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac76:	461f      	mov	r7, r3
 800ac78:	898b      	ldrh	r3, [r1, #12]
 800ac7a:	05db      	lsls	r3, r3, #23
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	4616      	mov	r6, r2
 800ac82:	d505      	bpl.n	800ac90 <__swrite+0x1e>
 800ac84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac88:	2302      	movs	r3, #2
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f000 f868 	bl	800ad60 <_lseek_r>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	4632      	mov	r2, r6
 800ac9e:	463b      	mov	r3, r7
 800aca0:	4628      	mov	r0, r5
 800aca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca6:	f000 b817 	b.w	800acd8 <_write_r>

0800acaa <__sseek>:
 800acaa:	b510      	push	{r4, lr}
 800acac:	460c      	mov	r4, r1
 800acae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb2:	f000 f855 	bl	800ad60 <_lseek_r>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	bf15      	itete	ne
 800acbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800acbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acc6:	81a3      	strheq	r3, [r4, #12]
 800acc8:	bf18      	it	ne
 800acca:	81a3      	strhne	r3, [r4, #12]
 800accc:	bd10      	pop	{r4, pc}

0800acce <__sclose>:
 800acce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd2:	f000 b813 	b.w	800acfc <_close_r>
	...

0800acd8 <_write_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d07      	ldr	r5, [pc, #28]	; (800acf8 <_write_r+0x20>)
 800acdc:	4604      	mov	r4, r0
 800acde:	4608      	mov	r0, r1
 800ace0:	4611      	mov	r1, r2
 800ace2:	2200      	movs	r2, #0
 800ace4:	602a      	str	r2, [r5, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	f7f8 fc99 	bl	800361e <_write>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_write_r+0x1e>
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_write_r+0x1e>
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	20000af8 	.word	0x20000af8

0800acfc <_close_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d06      	ldr	r5, [pc, #24]	; (800ad18 <_close_r+0x1c>)
 800ad00:	2300      	movs	r3, #0
 800ad02:	4604      	mov	r4, r0
 800ad04:	4608      	mov	r0, r1
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	f7f8 fca5 	bl	8003656 <_close>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d102      	bne.n	800ad16 <_close_r+0x1a>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	b103      	cbz	r3, 800ad16 <_close_r+0x1a>
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	20000af8 	.word	0x20000af8

0800ad1c <_fstat_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d07      	ldr	r5, [pc, #28]	; (800ad3c <_fstat_r+0x20>)
 800ad20:	2300      	movs	r3, #0
 800ad22:	4604      	mov	r4, r0
 800ad24:	4608      	mov	r0, r1
 800ad26:	4611      	mov	r1, r2
 800ad28:	602b      	str	r3, [r5, #0]
 800ad2a:	f7f8 fca0 	bl	800366e <_fstat>
 800ad2e:	1c43      	adds	r3, r0, #1
 800ad30:	d102      	bne.n	800ad38 <_fstat_r+0x1c>
 800ad32:	682b      	ldr	r3, [r5, #0]
 800ad34:	b103      	cbz	r3, 800ad38 <_fstat_r+0x1c>
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	bd38      	pop	{r3, r4, r5, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20000af8 	.word	0x20000af8

0800ad40 <_isatty_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d06      	ldr	r5, [pc, #24]	; (800ad5c <_isatty_r+0x1c>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	f7f8 fc9f 	bl	800368e <_isatty>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_isatty_r+0x1a>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_isatty_r+0x1a>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	20000af8 	.word	0x20000af8

0800ad60 <_lseek_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d07      	ldr	r5, [pc, #28]	; (800ad80 <_lseek_r+0x20>)
 800ad64:	4604      	mov	r4, r0
 800ad66:	4608      	mov	r0, r1
 800ad68:	4611      	mov	r1, r2
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	602a      	str	r2, [r5, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f7f8 fc98 	bl	80036a4 <_lseek>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_lseek_r+0x1e>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_lseek_r+0x1e>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	20000af8 	.word	0x20000af8

0800ad84 <_read_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d07      	ldr	r5, [pc, #28]	; (800ada4 <_read_r+0x20>)
 800ad88:	4604      	mov	r4, r0
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	2200      	movs	r2, #0
 800ad90:	602a      	str	r2, [r5, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f7f8 fc26 	bl	80035e4 <_read>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_read_r+0x1e>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_read_r+0x1e>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20000af8 	.word	0x20000af8

0800ada8 <atan2>:
 800ada8:	f000 b802 	b.w	800adb0 <__ieee754_atan2>
 800adac:	0000      	movs	r0, r0
	...

0800adb0 <__ieee754_atan2>:
 800adb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb4:	ec57 6b11 	vmov	r6, r7, d1
 800adb8:	4273      	negs	r3, r6
 800adba:	f8df e184 	ldr.w	lr, [pc, #388]	; 800af40 <__ieee754_atan2+0x190>
 800adbe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800adc2:	4333      	orrs	r3, r6
 800adc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800adc8:	4573      	cmp	r3, lr
 800adca:	ec51 0b10 	vmov	r0, r1, d0
 800adce:	ee11 8a10 	vmov	r8, s2
 800add2:	d80a      	bhi.n	800adea <__ieee754_atan2+0x3a>
 800add4:	4244      	negs	r4, r0
 800add6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800adda:	4304      	orrs	r4, r0
 800addc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ade0:	4574      	cmp	r4, lr
 800ade2:	ee10 9a10 	vmov	r9, s0
 800ade6:	468c      	mov	ip, r1
 800ade8:	d907      	bls.n	800adfa <__ieee754_atan2+0x4a>
 800adea:	4632      	mov	r2, r6
 800adec:	463b      	mov	r3, r7
 800adee:	f7f5 fa4d 	bl	800028c <__adddf3>
 800adf2:	ec41 0b10 	vmov	d0, r0, r1
 800adf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adfa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800adfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ae02:	4334      	orrs	r4, r6
 800ae04:	d103      	bne.n	800ae0e <__ieee754_atan2+0x5e>
 800ae06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae0a:	f000 b89d 	b.w	800af48 <atan>
 800ae0e:	17bc      	asrs	r4, r7, #30
 800ae10:	f004 0402 	and.w	r4, r4, #2
 800ae14:	ea53 0909 	orrs.w	r9, r3, r9
 800ae18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ae1c:	d107      	bne.n	800ae2e <__ieee754_atan2+0x7e>
 800ae1e:	2c02      	cmp	r4, #2
 800ae20:	d060      	beq.n	800aee4 <__ieee754_atan2+0x134>
 800ae22:	2c03      	cmp	r4, #3
 800ae24:	d1e5      	bne.n	800adf2 <__ieee754_atan2+0x42>
 800ae26:	a142      	add	r1, pc, #264	; (adr r1, 800af30 <__ieee754_atan2+0x180>)
 800ae28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae2c:	e7e1      	b.n	800adf2 <__ieee754_atan2+0x42>
 800ae2e:	ea52 0808 	orrs.w	r8, r2, r8
 800ae32:	d106      	bne.n	800ae42 <__ieee754_atan2+0x92>
 800ae34:	f1bc 0f00 	cmp.w	ip, #0
 800ae38:	da5f      	bge.n	800aefa <__ieee754_atan2+0x14a>
 800ae3a:	a13f      	add	r1, pc, #252	; (adr r1, 800af38 <__ieee754_atan2+0x188>)
 800ae3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae40:	e7d7      	b.n	800adf2 <__ieee754_atan2+0x42>
 800ae42:	4572      	cmp	r2, lr
 800ae44:	d10f      	bne.n	800ae66 <__ieee754_atan2+0xb6>
 800ae46:	4293      	cmp	r3, r2
 800ae48:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae4c:	d107      	bne.n	800ae5e <__ieee754_atan2+0xae>
 800ae4e:	2c02      	cmp	r4, #2
 800ae50:	d84c      	bhi.n	800aeec <__ieee754_atan2+0x13c>
 800ae52:	4b35      	ldr	r3, [pc, #212]	; (800af28 <__ieee754_atan2+0x178>)
 800ae54:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ae58:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ae5c:	e7c9      	b.n	800adf2 <__ieee754_atan2+0x42>
 800ae5e:	2c02      	cmp	r4, #2
 800ae60:	d848      	bhi.n	800aef4 <__ieee754_atan2+0x144>
 800ae62:	4b32      	ldr	r3, [pc, #200]	; (800af2c <__ieee754_atan2+0x17c>)
 800ae64:	e7f6      	b.n	800ae54 <__ieee754_atan2+0xa4>
 800ae66:	4573      	cmp	r3, lr
 800ae68:	d0e4      	beq.n	800ae34 <__ieee754_atan2+0x84>
 800ae6a:	1a9b      	subs	r3, r3, r2
 800ae6c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ae70:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae74:	da1e      	bge.n	800aeb4 <__ieee754_atan2+0x104>
 800ae76:	2f00      	cmp	r7, #0
 800ae78:	da01      	bge.n	800ae7e <__ieee754_atan2+0xce>
 800ae7a:	323c      	adds	r2, #60	; 0x3c
 800ae7c:	db1e      	blt.n	800aebc <__ieee754_atan2+0x10c>
 800ae7e:	4632      	mov	r2, r6
 800ae80:	463b      	mov	r3, r7
 800ae82:	f7f5 fce3 	bl	800084c <__aeabi_ddiv>
 800ae86:	ec41 0b10 	vmov	d0, r0, r1
 800ae8a:	f000 f9fd 	bl	800b288 <fabs>
 800ae8e:	f000 f85b 	bl	800af48 <atan>
 800ae92:	ec51 0b10 	vmov	r0, r1, d0
 800ae96:	2c01      	cmp	r4, #1
 800ae98:	d013      	beq.n	800aec2 <__ieee754_atan2+0x112>
 800ae9a:	2c02      	cmp	r4, #2
 800ae9c:	d015      	beq.n	800aeca <__ieee754_atan2+0x11a>
 800ae9e:	2c00      	cmp	r4, #0
 800aea0:	d0a7      	beq.n	800adf2 <__ieee754_atan2+0x42>
 800aea2:	a319      	add	r3, pc, #100	; (adr r3, 800af08 <__ieee754_atan2+0x158>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 f9ee 	bl	8000288 <__aeabi_dsub>
 800aeac:	a318      	add	r3, pc, #96	; (adr r3, 800af10 <__ieee754_atan2+0x160>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	e014      	b.n	800aede <__ieee754_atan2+0x12e>
 800aeb4:	a118      	add	r1, pc, #96	; (adr r1, 800af18 <__ieee754_atan2+0x168>)
 800aeb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeba:	e7ec      	b.n	800ae96 <__ieee754_atan2+0xe6>
 800aebc:	2000      	movs	r0, #0
 800aebe:	2100      	movs	r1, #0
 800aec0:	e7e9      	b.n	800ae96 <__ieee754_atan2+0xe6>
 800aec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aec6:	4619      	mov	r1, r3
 800aec8:	e793      	b.n	800adf2 <__ieee754_atan2+0x42>
 800aeca:	a30f      	add	r3, pc, #60	; (adr r3, 800af08 <__ieee754_atan2+0x158>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 f9da 	bl	8000288 <__aeabi_dsub>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	a10d      	add	r1, pc, #52	; (adr r1, 800af10 <__ieee754_atan2+0x160>)
 800aeda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aede:	f7f5 f9d3 	bl	8000288 <__aeabi_dsub>
 800aee2:	e786      	b.n	800adf2 <__ieee754_atan2+0x42>
 800aee4:	a10a      	add	r1, pc, #40	; (adr r1, 800af10 <__ieee754_atan2+0x160>)
 800aee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeea:	e782      	b.n	800adf2 <__ieee754_atan2+0x42>
 800aeec:	a10c      	add	r1, pc, #48	; (adr r1, 800af20 <__ieee754_atan2+0x170>)
 800aeee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aef2:	e77e      	b.n	800adf2 <__ieee754_atan2+0x42>
 800aef4:	2000      	movs	r0, #0
 800aef6:	2100      	movs	r1, #0
 800aef8:	e77b      	b.n	800adf2 <__ieee754_atan2+0x42>
 800aefa:	a107      	add	r1, pc, #28	; (adr r1, 800af18 <__ieee754_atan2+0x168>)
 800aefc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af00:	e777      	b.n	800adf2 <__ieee754_atan2+0x42>
 800af02:	bf00      	nop
 800af04:	f3af 8000 	nop.w
 800af08:	33145c07 	.word	0x33145c07
 800af0c:	3ca1a626 	.word	0x3ca1a626
 800af10:	54442d18 	.word	0x54442d18
 800af14:	400921fb 	.word	0x400921fb
 800af18:	54442d18 	.word	0x54442d18
 800af1c:	3ff921fb 	.word	0x3ff921fb
 800af20:	54442d18 	.word	0x54442d18
 800af24:	3fe921fb 	.word	0x3fe921fb
 800af28:	0800c2a8 	.word	0x0800c2a8
 800af2c:	0800c2c0 	.word	0x0800c2c0
 800af30:	54442d18 	.word	0x54442d18
 800af34:	c00921fb 	.word	0xc00921fb
 800af38:	54442d18 	.word	0x54442d18
 800af3c:	bff921fb 	.word	0xbff921fb
 800af40:	7ff00000 	.word	0x7ff00000
 800af44:	00000000 	.word	0x00000000

0800af48 <atan>:
 800af48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	ec55 4b10 	vmov	r4, r5, d0
 800af50:	4bc3      	ldr	r3, [pc, #780]	; (800b260 <atan+0x318>)
 800af52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800af56:	429e      	cmp	r6, r3
 800af58:	46ab      	mov	fp, r5
 800af5a:	dd18      	ble.n	800af8e <atan+0x46>
 800af5c:	4bc1      	ldr	r3, [pc, #772]	; (800b264 <atan+0x31c>)
 800af5e:	429e      	cmp	r6, r3
 800af60:	dc01      	bgt.n	800af66 <atan+0x1e>
 800af62:	d109      	bne.n	800af78 <atan+0x30>
 800af64:	b144      	cbz	r4, 800af78 <atan+0x30>
 800af66:	4622      	mov	r2, r4
 800af68:	462b      	mov	r3, r5
 800af6a:	4620      	mov	r0, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	f7f5 f98d 	bl	800028c <__adddf3>
 800af72:	4604      	mov	r4, r0
 800af74:	460d      	mov	r5, r1
 800af76:	e006      	b.n	800af86 <atan+0x3e>
 800af78:	f1bb 0f00 	cmp.w	fp, #0
 800af7c:	f300 8131 	bgt.w	800b1e2 <atan+0x29a>
 800af80:	a59b      	add	r5, pc, #620	; (adr r5, 800b1f0 <atan+0x2a8>)
 800af82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af86:	ec45 4b10 	vmov	d0, r4, r5
 800af8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8e:	4bb6      	ldr	r3, [pc, #728]	; (800b268 <atan+0x320>)
 800af90:	429e      	cmp	r6, r3
 800af92:	dc14      	bgt.n	800afbe <atan+0x76>
 800af94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800af98:	429e      	cmp	r6, r3
 800af9a:	dc0d      	bgt.n	800afb8 <atan+0x70>
 800af9c:	a396      	add	r3, pc, #600	; (adr r3, 800b1f8 <atan+0x2b0>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	ee10 0a10 	vmov	r0, s0
 800afa6:	4629      	mov	r1, r5
 800afa8:	f7f5 f970 	bl	800028c <__adddf3>
 800afac:	4baf      	ldr	r3, [pc, #700]	; (800b26c <atan+0x324>)
 800afae:	2200      	movs	r2, #0
 800afb0:	f7f5 fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d1e6      	bne.n	800af86 <atan+0x3e>
 800afb8:	f04f 3aff 	mov.w	sl, #4294967295
 800afbc:	e02b      	b.n	800b016 <atan+0xce>
 800afbe:	f000 f963 	bl	800b288 <fabs>
 800afc2:	4bab      	ldr	r3, [pc, #684]	; (800b270 <atan+0x328>)
 800afc4:	429e      	cmp	r6, r3
 800afc6:	ec55 4b10 	vmov	r4, r5, d0
 800afca:	f300 80bf 	bgt.w	800b14c <atan+0x204>
 800afce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800afd2:	429e      	cmp	r6, r3
 800afd4:	f300 80a0 	bgt.w	800b118 <atan+0x1d0>
 800afd8:	ee10 2a10 	vmov	r2, s0
 800afdc:	ee10 0a10 	vmov	r0, s0
 800afe0:	462b      	mov	r3, r5
 800afe2:	4629      	mov	r1, r5
 800afe4:	f7f5 f952 	bl	800028c <__adddf3>
 800afe8:	4ba0      	ldr	r3, [pc, #640]	; (800b26c <atan+0x324>)
 800afea:	2200      	movs	r2, #0
 800afec:	f7f5 f94c 	bl	8000288 <__aeabi_dsub>
 800aff0:	2200      	movs	r2, #0
 800aff2:	4606      	mov	r6, r0
 800aff4:	460f      	mov	r7, r1
 800aff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800affa:	4620      	mov	r0, r4
 800affc:	4629      	mov	r1, r5
 800affe:	f7f5 f945 	bl	800028c <__adddf3>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4630      	mov	r0, r6
 800b008:	4639      	mov	r1, r7
 800b00a:	f7f5 fc1f 	bl	800084c <__aeabi_ddiv>
 800b00e:	f04f 0a00 	mov.w	sl, #0
 800b012:	4604      	mov	r4, r0
 800b014:	460d      	mov	r5, r1
 800b016:	4622      	mov	r2, r4
 800b018:	462b      	mov	r3, r5
 800b01a:	4620      	mov	r0, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	f7f5 faeb 	bl	80005f8 <__aeabi_dmul>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4680      	mov	r8, r0
 800b028:	4689      	mov	r9, r1
 800b02a:	f7f5 fae5 	bl	80005f8 <__aeabi_dmul>
 800b02e:	a374      	add	r3, pc, #464	; (adr r3, 800b200 <atan+0x2b8>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	4606      	mov	r6, r0
 800b036:	460f      	mov	r7, r1
 800b038:	f7f5 fade 	bl	80005f8 <__aeabi_dmul>
 800b03c:	a372      	add	r3, pc, #456	; (adr r3, 800b208 <atan+0x2c0>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f7f5 f923 	bl	800028c <__adddf3>
 800b046:	4632      	mov	r2, r6
 800b048:	463b      	mov	r3, r7
 800b04a:	f7f5 fad5 	bl	80005f8 <__aeabi_dmul>
 800b04e:	a370      	add	r3, pc, #448	; (adr r3, 800b210 <atan+0x2c8>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	f7f5 f91a 	bl	800028c <__adddf3>
 800b058:	4632      	mov	r2, r6
 800b05a:	463b      	mov	r3, r7
 800b05c:	f7f5 facc 	bl	80005f8 <__aeabi_dmul>
 800b060:	a36d      	add	r3, pc, #436	; (adr r3, 800b218 <atan+0x2d0>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 f911 	bl	800028c <__adddf3>
 800b06a:	4632      	mov	r2, r6
 800b06c:	463b      	mov	r3, r7
 800b06e:	f7f5 fac3 	bl	80005f8 <__aeabi_dmul>
 800b072:	a36b      	add	r3, pc, #428	; (adr r3, 800b220 <atan+0x2d8>)
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	f7f5 f908 	bl	800028c <__adddf3>
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	f7f5 faba 	bl	80005f8 <__aeabi_dmul>
 800b084:	a368      	add	r3, pc, #416	; (adr r3, 800b228 <atan+0x2e0>)
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f7f5 f8ff 	bl	800028c <__adddf3>
 800b08e:	4642      	mov	r2, r8
 800b090:	464b      	mov	r3, r9
 800b092:	f7f5 fab1 	bl	80005f8 <__aeabi_dmul>
 800b096:	a366      	add	r3, pc, #408	; (adr r3, 800b230 <atan+0x2e8>)
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	4680      	mov	r8, r0
 800b09e:	4689      	mov	r9, r1
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7f5 faa8 	bl	80005f8 <__aeabi_dmul>
 800b0a8:	a363      	add	r3, pc, #396	; (adr r3, 800b238 <atan+0x2f0>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f7f5 f8eb 	bl	8000288 <__aeabi_dsub>
 800b0b2:	4632      	mov	r2, r6
 800b0b4:	463b      	mov	r3, r7
 800b0b6:	f7f5 fa9f 	bl	80005f8 <__aeabi_dmul>
 800b0ba:	a361      	add	r3, pc, #388	; (adr r3, 800b240 <atan+0x2f8>)
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	f7f5 f8e2 	bl	8000288 <__aeabi_dsub>
 800b0c4:	4632      	mov	r2, r6
 800b0c6:	463b      	mov	r3, r7
 800b0c8:	f7f5 fa96 	bl	80005f8 <__aeabi_dmul>
 800b0cc:	a35e      	add	r3, pc, #376	; (adr r3, 800b248 <atan+0x300>)
 800b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d2:	f7f5 f8d9 	bl	8000288 <__aeabi_dsub>
 800b0d6:	4632      	mov	r2, r6
 800b0d8:	463b      	mov	r3, r7
 800b0da:	f7f5 fa8d 	bl	80005f8 <__aeabi_dmul>
 800b0de:	a35c      	add	r3, pc, #368	; (adr r3, 800b250 <atan+0x308>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f7f5 f8d0 	bl	8000288 <__aeabi_dsub>
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	f7f5 fa84 	bl	80005f8 <__aeabi_dmul>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4640      	mov	r0, r8
 800b0f6:	4649      	mov	r1, r9
 800b0f8:	f7f5 f8c8 	bl	800028c <__adddf3>
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	462b      	mov	r3, r5
 800b100:	f7f5 fa7a 	bl	80005f8 <__aeabi_dmul>
 800b104:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b108:	4602      	mov	r2, r0
 800b10a:	460b      	mov	r3, r1
 800b10c:	d14b      	bne.n	800b1a6 <atan+0x25e>
 800b10e:	4620      	mov	r0, r4
 800b110:	4629      	mov	r1, r5
 800b112:	f7f5 f8b9 	bl	8000288 <__aeabi_dsub>
 800b116:	e72c      	b.n	800af72 <atan+0x2a>
 800b118:	ee10 0a10 	vmov	r0, s0
 800b11c:	4b53      	ldr	r3, [pc, #332]	; (800b26c <atan+0x324>)
 800b11e:	2200      	movs	r2, #0
 800b120:	4629      	mov	r1, r5
 800b122:	f7f5 f8b1 	bl	8000288 <__aeabi_dsub>
 800b126:	4b51      	ldr	r3, [pc, #324]	; (800b26c <atan+0x324>)
 800b128:	4606      	mov	r6, r0
 800b12a:	460f      	mov	r7, r1
 800b12c:	2200      	movs	r2, #0
 800b12e:	4620      	mov	r0, r4
 800b130:	4629      	mov	r1, r5
 800b132:	f7f5 f8ab 	bl	800028c <__adddf3>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4630      	mov	r0, r6
 800b13c:	4639      	mov	r1, r7
 800b13e:	f7f5 fb85 	bl	800084c <__aeabi_ddiv>
 800b142:	f04f 0a01 	mov.w	sl, #1
 800b146:	4604      	mov	r4, r0
 800b148:	460d      	mov	r5, r1
 800b14a:	e764      	b.n	800b016 <atan+0xce>
 800b14c:	4b49      	ldr	r3, [pc, #292]	; (800b274 <atan+0x32c>)
 800b14e:	429e      	cmp	r6, r3
 800b150:	da1d      	bge.n	800b18e <atan+0x246>
 800b152:	ee10 0a10 	vmov	r0, s0
 800b156:	4b48      	ldr	r3, [pc, #288]	; (800b278 <atan+0x330>)
 800b158:	2200      	movs	r2, #0
 800b15a:	4629      	mov	r1, r5
 800b15c:	f7f5 f894 	bl	8000288 <__aeabi_dsub>
 800b160:	4b45      	ldr	r3, [pc, #276]	; (800b278 <atan+0x330>)
 800b162:	4606      	mov	r6, r0
 800b164:	460f      	mov	r7, r1
 800b166:	2200      	movs	r2, #0
 800b168:	4620      	mov	r0, r4
 800b16a:	4629      	mov	r1, r5
 800b16c:	f7f5 fa44 	bl	80005f8 <__aeabi_dmul>
 800b170:	4b3e      	ldr	r3, [pc, #248]	; (800b26c <atan+0x324>)
 800b172:	2200      	movs	r2, #0
 800b174:	f7f5 f88a 	bl	800028c <__adddf3>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4630      	mov	r0, r6
 800b17e:	4639      	mov	r1, r7
 800b180:	f7f5 fb64 	bl	800084c <__aeabi_ddiv>
 800b184:	f04f 0a02 	mov.w	sl, #2
 800b188:	4604      	mov	r4, r0
 800b18a:	460d      	mov	r5, r1
 800b18c:	e743      	b.n	800b016 <atan+0xce>
 800b18e:	462b      	mov	r3, r5
 800b190:	ee10 2a10 	vmov	r2, s0
 800b194:	4939      	ldr	r1, [pc, #228]	; (800b27c <atan+0x334>)
 800b196:	2000      	movs	r0, #0
 800b198:	f7f5 fb58 	bl	800084c <__aeabi_ddiv>
 800b19c:	f04f 0a03 	mov.w	sl, #3
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	e737      	b.n	800b016 <atan+0xce>
 800b1a6:	4b36      	ldr	r3, [pc, #216]	; (800b280 <atan+0x338>)
 800b1a8:	4e36      	ldr	r6, [pc, #216]	; (800b284 <atan+0x33c>)
 800b1aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b1ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b1b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800b1b6:	f7f5 f867 	bl	8000288 <__aeabi_dsub>
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	462b      	mov	r3, r5
 800b1be:	f7f5 f863 	bl	8000288 <__aeabi_dsub>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b1ca:	f7f5 f85d 	bl	8000288 <__aeabi_dsub>
 800b1ce:	f1bb 0f00 	cmp.w	fp, #0
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	460d      	mov	r5, r1
 800b1d6:	f6bf aed6 	bge.w	800af86 <atan+0x3e>
 800b1da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1de:	461d      	mov	r5, r3
 800b1e0:	e6d1      	b.n	800af86 <atan+0x3e>
 800b1e2:	a51d      	add	r5, pc, #116	; (adr r5, 800b258 <atan+0x310>)
 800b1e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1e8:	e6cd      	b.n	800af86 <atan+0x3e>
 800b1ea:	bf00      	nop
 800b1ec:	f3af 8000 	nop.w
 800b1f0:	54442d18 	.word	0x54442d18
 800b1f4:	bff921fb 	.word	0xbff921fb
 800b1f8:	8800759c 	.word	0x8800759c
 800b1fc:	7e37e43c 	.word	0x7e37e43c
 800b200:	e322da11 	.word	0xe322da11
 800b204:	3f90ad3a 	.word	0x3f90ad3a
 800b208:	24760deb 	.word	0x24760deb
 800b20c:	3fa97b4b 	.word	0x3fa97b4b
 800b210:	a0d03d51 	.word	0xa0d03d51
 800b214:	3fb10d66 	.word	0x3fb10d66
 800b218:	c54c206e 	.word	0xc54c206e
 800b21c:	3fb745cd 	.word	0x3fb745cd
 800b220:	920083ff 	.word	0x920083ff
 800b224:	3fc24924 	.word	0x3fc24924
 800b228:	5555550d 	.word	0x5555550d
 800b22c:	3fd55555 	.word	0x3fd55555
 800b230:	2c6a6c2f 	.word	0x2c6a6c2f
 800b234:	bfa2b444 	.word	0xbfa2b444
 800b238:	52defd9a 	.word	0x52defd9a
 800b23c:	3fadde2d 	.word	0x3fadde2d
 800b240:	af749a6d 	.word	0xaf749a6d
 800b244:	3fb3b0f2 	.word	0x3fb3b0f2
 800b248:	fe231671 	.word	0xfe231671
 800b24c:	3fbc71c6 	.word	0x3fbc71c6
 800b250:	9998ebc4 	.word	0x9998ebc4
 800b254:	3fc99999 	.word	0x3fc99999
 800b258:	54442d18 	.word	0x54442d18
 800b25c:	3ff921fb 	.word	0x3ff921fb
 800b260:	440fffff 	.word	0x440fffff
 800b264:	7ff00000 	.word	0x7ff00000
 800b268:	3fdbffff 	.word	0x3fdbffff
 800b26c:	3ff00000 	.word	0x3ff00000
 800b270:	3ff2ffff 	.word	0x3ff2ffff
 800b274:	40038000 	.word	0x40038000
 800b278:	3ff80000 	.word	0x3ff80000
 800b27c:	bff00000 	.word	0xbff00000
 800b280:	0800c2f8 	.word	0x0800c2f8
 800b284:	0800c2d8 	.word	0x0800c2d8

0800b288 <fabs>:
 800b288:	ec51 0b10 	vmov	r0, r1, d0
 800b28c:	ee10 2a10 	vmov	r2, s0
 800b290:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b294:	ec43 2b10 	vmov	d0, r2, r3
 800b298:	4770      	bx	lr
	...

0800b29c <_init>:
 800b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29e:	bf00      	nop
 800b2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2a2:	bc08      	pop	{r3}
 800b2a4:	469e      	mov	lr, r3
 800b2a6:	4770      	bx	lr

0800b2a8 <_fini>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	bf00      	nop
 800b2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ae:	bc08      	pop	{r3}
 800b2b0:	469e      	mov	lr, r3
 800b2b2:	4770      	bx	lr
